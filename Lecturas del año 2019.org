#+TITLE: Lecturas del Grupo de Lógica Computacional durante el año 2019
#+OPTIONS: ^:nil

Este repositorio es una recopilación de lecturas compartidas en la lista de
correo del [[http://www.glc.us.es][grupo de lógica computacional]] durante el año 2019. La recopilación
está ordenada por la fecha de su publicación en la lista. Al final de cada
artículo se encuentra etiquetas relativas a los sistemas que usa o a su
contenido.

* Contenido                                                             :TOC:
- [[#enero-2019][Enero 2019]]
- [[#febrero-2019][Febrero 2019]]
- [[#marzo-2019][Marzo 2019]]
- [[#abril-2019][Abril 2019]]
- [[#mayo-2019][Mayo 2019]]
- [[#junio-2019][Junio 2019]]
- [[#julio-2019][Julio 2019]]
- [[#agosto-2019][Agosto 2019]]
- [[#septiembre-de-2019][Septiembre de 2019]]
- [[#octubre-de-2019][Octubre de 2019]]
- [[#noviembre-de-2019][Noviembre de 2019]]
- [[#diciembre-de-2019][Diciembre de 2019]]

* Enero 2019

+ [[http://fse.studenttheses.ub.rug.nl/8724/1/verslag.pdf][Evaluation of Isabelle with a proof of the perfect number theorem]]. ~
  Mark IJbema. #ITP #IsabelleHOL #Math
+ [[http://publications.lib.chalmers.se/records/fulltext/256404/256404.pdf][Univalent categories (A formalization of category theory in Cubical
  Agda)]]. ~ F.H. Iversen #Msc_Thesis #ITP #Agda
+ [[https://www.cs.uoregon.edu/research/summerschool/summer13/lectures/Kinds_and_GADTs.pdf][Fun with kinds and GADTS]]. ~ Simon Peyton Jones. #Haskell
  #FunctionalProgramming
+ [[http://www.cse.unt.edu/~tarau/research/2019/tprover.pdf][A combinatorial testing framework for intuitionistic propositional
  theorem provers]]. ~ P. Tarau. #ATP #Logic #Prolog
+ [[https://github.com/alexwl/haskell-code-explorer/blob/master/README.md][Haskell Code Explorer: Web application for exploring and understanding
  Haskell libraries]]. ~ Alexey Kiryushin. #Haskell 
+ [[https://blog.poisson.chat/posts/2018-08-06-one-type-family.html][Haskell with only one type family]]. ~ Xia Li-yao. #Haskell
+ [[https://github.com/MWRuszczycky/rubiks][3D-Rubik's cube simulator written in Haskell using Gloss]]. ~ Mark
  W. Ruszczycky. #Haskell
+ [[http://blog.klipse.tech/prolog/2019/01/01/blog-prolog.html][A new way of blogging about Prolog]]. ~ Yehonathan Sharvit. #Prolog
  #Klipse #Clojure
+ [[https://www.isa-afp.org/entries/Concurrent_Revisions.html][Formalization of concurrent revisions in Isabelle/HOL]]. ~
  R. Overbeek. #ITP #IsabelleHOL
+ [[https://blog.clement.delafargue.name/posts/2018-12-27-a-tale-of-servant-clients.html][A tale of servant clients]]. ~ C. Delafargue. #Haskell
+ [[http://fixpt.de/blog/2018-12-30-strictness-analysis-part-2.html][All about strictness analysis (part 2)]]. ~ Sebastian Graf.
  #Haskell
+ [[https://jappieklooster.nl/lens-into-wrapped-newtypes.html][Lens into wrapped newtypes]]. ~ Jappie Klooster. #Haskell 
+ [[https://www.wjwh.eu/posts/2019-01-01-parsing-infinite-streams.html][Parsing infinite streams with attoparsec]]. ~ Wander Hillen. #Haskell
+ [[https://lin-techdet.blogspot.com/2018/12/type-annotations-vs-partial-type.html][Type annotations vs partial type signatures vs visible type
  applications]]. ~ Alexey Radkov. #Haskell
+ [[https://cs.vu.nl/~jhl890/pub/hoelzl2011measuretheory.pdf][Three chapters of measure theory in Isabelle/HOL]]. ~ J. Hölzl,
  A. Heller. #ITP #IsabelleHOL #Math
+ [[https://medium.com/@hgiasac/typeable-a-long-journey-to-type-safe-dynamic-type-representation-9070eac2cf8b][Typeable: A long journey to type-safe dynamic type representation]]. ~
  Toan Nguyen. #Haskell
+ [[http://matryoshka.gforge.inria.fr/pubs/schlichtkrull_phd_thesis.pdf][Formalization of logic in the Isabelle proof assistant]]. ~
  A. Schlichtkrull. #PhD_Thesis #ITP #IsabelleHOL #Logic
+ [[https://lean-forward.github.io/logical-verification/2018/index.html][Course: Logical verification (2018-2019)]]. ~ J. Blanchette et als. #ITP
  #LeanProver
+ [[https://liquid.kosmikus.org][Liquid Haskell tutorial]]. ~ Andres Löh. #Haskell #LiquidHaskell
+ [[http://dld.bz/hmaAS][The QED Manifesto revisited]]. ~ Freek Wiedijk. #ITP 
+ [[http://ftp.science.ru.nl/CSI/CompMath.Found/Barendregt-Wiedijk.pdf][The challenge of computer mathematics]]. ~ H. Barendregt, F. Wiedijk. #ITP 
+ [[https://github.com/fsestini/zsyntax][Zsyntax: Automated theorem prover for a linear logic-based calculus
  for molecular biology]]. ~ Filippo Sestini. #ATP #Logic #Haskell
+ [[https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0009511][Zsyntax: A formal language for molecular biology with projected
  applications in text mining and biological prediction]]. ~ G. Boniolo,
  M. D'Agostino, P.P. di Fiore. #ATP #Logic #Haskell
+ [[https://www.isa-afp.org/entries/Core_DOM.html][A formal model of the Document Object Model (DOM) in Isabelle/HOL]]. ~
  A.D. Brucker, M, Herzberg. #ITP #IsabelleHOL
+ [[http://yudkowsky.net/assets/44/LobsTheorem.pdf][(The Cartoon Guide to) Lob's Theorem]]. ~ Eliezer Yudkowsky. #Logic
+ [[https://identicalsnowflake.github.io/Cantor.html][Cantor pairing]]. #Haskell #FunctionalProgramming #Math
+ [[https://mmhaskell.com/blog/2019/1/7/why-haskell-i-simple-data-types][Why Haskell I: Simple data types!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://github.com/epogrebnyak/haskell-intro][Short overview of Haskell concepts]]. ~ E. Pogrebnyak et als. #Haskell
  #FunctionalProgramming
+ [[https://www.nature.com/articles/d41586-019-00083-3][Machine learning leads mathematicians to unsolvable problem]]. ~
  D. Castelvecchi. #AI #Math #MachineLearnig
+ [[https://www.nature.com/articles/d41586-019-00012-4][Unprovability comes to machine learning]]. ~ L. Reyzin #AI #Math
  #MachineLearnig
+ [[http://cs.engr.uky.edu/~mirek/stuff/kr-2018-gm.pdf][Answer Set Programming (A story of default negation, definitions and
  informal semantics) ]]. ~ M. Truszczynski #ASP #Logic #Programming #KR
+ [[https://taeer.bar-yam.me/blog/posts/hakyll-tikz/][Hakyll + TikZ]]. ~ Taeer Bar-Yam. #Haskell
+ [[https://haskell-at-work.com/episodes/2019-01-10-purely-functional-gtk-part-1-hello-world.html][Purely functional GTK+, Part 1: Hello World]]. ~ Oskar Wickström. #Haskell
+ [[https://k-bx.github.io/articles/Validating-Form-Data-via-Applicative-Functors.html][Validating form data via applicative functors]]. ~ Kostiantyn Rybnikov. #Haskell
+ [[https://www.isa-afp.org/entries/Store_Buffer_Reduction.html][A reduction theorem for store buffers]]. ~ E. Cohen, N. Schirmer. #ITP
  #IsabelleHOL
+ [[https://project-archive.inf.ed.ac.uk/msc/20182958/msc_proj.pdf][HaskellQuest: a game for teaching functional programming in Haskell]]. ~
  R. Fu.  #Teaching #Haskell
+ [[http://www.joachim-breitner.de/blog/750-Teaching_to_read_Haskell][Teaching to read Haskell]]. ~ Joachim Breitner. #Haskell
+ [[http://haskell-for-readers.nomeata.de/][Haskell for readers]]. ~ Joachim Breitner. #Haskell
+ [[https://www.logicmatters.net/resources/pdfs/ProofSystems.pdf][Types of proof system]]. ~ Peter Smith. #Logic #ITP 
+ [[https://www.aurelienalvarez.org/my-app/dist/assets/pdf/ALVAREZ_nombres-premiers-Euclide-Coq_Quadrature_2019.pdf][Nombres premiers, Euclide et Coq]]. ~ A. Alvarez. #ITP #Coq #Math
+ [[https://xenaproject.wordpress.com/2019/01/12/column-addition][Column addition]]. ~ Kevin Buzzard. #ITP #LeanProver #Math
+ [[https://medium.com/javascript-scene/the-forgotten-history-of-oop-88d71b9b2d9f][The forgotten history of OOP]]. ~ Eric Elliott. #Programming 
  #History
+ [[https://blog.po.et/building-the-verifiable-web-cb1b93a40b11][Building the verifiable Web]]. ~ Kevin Buzzard. #Blockchain
+ [[https://t.co/ENeTmK25iN][The compactness theorem and applications]]. ~ B. Call #Logic
+ [[http://cgi.csc.liv.ac.uk/~frank/MLHandbook/][Handbook of modal logic]]. ~ P. Blackburn, J. van Benthem, F. Wolter. #Logic
+ [[http://www.iiisci.org/Journal/CV$/sci/pdfs/MA079VM12.pdf][A comparison of functional and imperative programming techniques for
  mathematical software development]]. ~ S. Frame, J.W. Coffey. #Haskell
  #Cpp #Math
+ [[https://www.youtube.com/watch?v=ofUAlkYHFsI][HaskellRank 11: Treating lists as monads]]. ~ @tsoding. #Haskell #HaskellRank
+ [[https://mmhaskell.com/blog/2019/1/14/why-haskell-ii-sum-types][Why Haskell II: Sum types]]. ~ James Bowen. #Haskell #Java
  #Python
+ [[https://jespercockx.github.io/popl19-tutorial/][Correct by construction programming in Agda]]. ~ Jesper Cockx.
  #ITP #Agda
+ [[https://www.isa-afp.org/entries/Higher_Order_Terms.html][An algebra for higher-order terms in Isabelle/HOL]]. ~ Lars Hupel. #ITP
  #IsabelleHOL
+ [[http://www.tpflug.me/2019/01/14/haskell-nix-vim][Haskell, Nix and Vim: Getting started]]. ~ Tobias Pflug. #Haskell #Nix #Vim
+ [[http://www.people.cs.uchicago.edu/~soare/History/handbook.pdf][The history and concept of computability]]. ~ Robert I. Soare. #CompSci
+ [[https://www.cis.upenn.edu/~llamp/pdf/urns.pdf][Ode on a random urn (Functional pearl)]]. ~ L. Lampropoulos, A. Spector-Zabusky,
  K. Foner, #Haskell
+ [[https://denibertovic.com/posts/haskell-showroom-how-to-switch-between-kubernetes-clusters][Haskell Showroom: How to switch between multiple kubernetes clusters
  and namespaces]]. ~ Deni Bertovic #Haskell
+ [[http://www.philipzucker.com/a-touch-of-topological-quantum-computation-in-haskell-pt-ii-automating-drudgery/][A touch of topological quantum computation in Haskell Pt. II:
  Automating drudgery]]. ~ Philip Zucker. #Haskell
+ [[https://www.isa-afp.org/entries/IMP2.html][IMP2: Simple program verification in Isabelle/HOL]]. ~ Peter Lammich and
  Simon Wimmer. #ITP #IsabelleHOL
+ [[https://hal.inria.fr/hal-01977585/document][Verifiable certificates for predicate subtyping]]. ~ F. Gilbert. #ITP #PVS 
+ [[https://arxiv.org/abs/1901.03313][Mechanization of separation in generic extensions]]. ~ E- Gunther,
  M. Pagano, P.S Terraf. #ITP #IsabelleHOL
+ [[https://www.pédrot.fr/articles/coqpl2019.pdf][Ltac2: Tactical warfare]]. ~ P.M. Pédrot. #ITP #Coq
+ [[https://www.xn--pdrot-bsa.fr/articles/thesis.pdf][A materialist dialectica]]. ~ P.M. Pédrot. #PhD_Thesis #Logic #CompSci
+ [[http://bit.ly/2RNTMGw][Löb and möb: strange loops in Haskell]]. ~ David Luposchainsky. #Haskell
+ [[http://neilmitchell.blogspot.com/2019/01/ignoring-hlint.html][Ignoring HLint (HLint now has more ways to ignore hints you don't
  like)]]. ~ Neil Mitchell. #Haskell
+ [[https://doisinkidney.com/posts/2019-01-15-binomial-urn.html][A binomial urn]]. ~ Donnacha Oisín Kidney. #Haskell
+ [[https://jaspervdj.be/posts/2019-01-11-dynamic-graphs.html][Dynamic graphs: A Haskell library for the dynamic connectivity
  problem]]. ~ Jasper Van der Jeugt. #Haskell
+ [[https://phaazon.net/blog/aoc-18-hindsight][Hindsight on Advent of Code 2018]]. ~ Dimitri Sabadie. #Haskell
+ [[https://lean-forward.github.io/][Lean Forward: Usable computer-checked proofs and computations for
  number theorists]]. #ITP #LeanProver #Math
+ [[https://github.com/leanprover/mathlib][mathlib: Lean mathematical components library]]. #ITP #LeanProver #Math
+ [[https://lean-forward.github.io/lean-together/2019/slides/buzzard.pdf][Using Lean with undergraduate mathematicians]]. ~ Kevin Buzzard. #ITP
  #LeanProver #Math
+ [[https://dl.acm.org/citation.cfm?id=3294093][Smooth manifolds and types to sets for linear algebra in Isabelle/HOL]]. 
  ~ F. Immler, B. Zhan. #ITP #IsabelleHOL #Math
+ [[https://elpais.com/elpais/2019/01/15/eps/1547557079_800501.html][Las mentes matemáticas mueven el mundo]]. ~ G. Abril. #Matemáticas
+ [[http://robertylewis.com/files/icms/WMFarmer-new-proof-style-icms-2018.pdf][A new style of mathematical proof]]. ~ William Farmer. #Logic #Math #ITP 
+ [[https://avigad.github.io/formal_methods_in_education/][Resources for teaching with formal methods]]. ~ Jeremy Avigad. #Logic
  #Math #CompSci #ITP
+ [[https://dl.acm.org/citation.cfm?id=3294104][Dynamic class initialization semantics: a Jinja extension]]. ~
  S. Mansky, E.L. Gunter. #ITP #IsabelleHOL
+ [[http://www.cs.pomona.edu/~michael/courses/csci054s18/book/][Discrete Math in Coq]]. ~ B.C. Pierce et als. #ITP #Coq Math
+ [[http://www.cs.pomona.edu/~michael/papers/coqpl2019.pdf][Teaching discrete mathematics to early undergraduates with "Software
  Foundations"]]. ~ M. Greenberg, J.C. Osborn. #ITP #Coq #Math
+ [[http://www.cs.pomona.edu/~michael/courses/csci054s18][Course: Discrete mathematics and functional programming]]. ~
  M. Greenberg. #ITP #Coq #Math
+ [[https://dl.acm.org/citation.cfm?id=3294102][Formally verified big step semantics out of x86-64 binaries]]. ~
  I. Roessle, F. Verbeek, B. Ravindran. #ITP #IsabelleHOL
+ [[http://tinselcity.net/pensando-en-programar][Pensando en programar]]. ~ Gonzalo García Braschi. #Programación
+ [[https://github.com/sjoerdvisscher/data-category][Data-category: a collection of categories, and some categorical constructions
  on them]]. ~ Sjoerd Visscher. #Haskell
+ [[https://mmhaskell.com/blog/2019/1/21/why-haskell-iii-parametric-types][Why Haskell III: Parametric types]]. ~ James Bowen. #Haskell #Java
  #Cpp #Python
+ [[https://www.isa-afp.org/entries/Farkas.html][Farkas' lemma and Motzkin's transposition theorem in Isabelle/HOL]]. ~
  R. Bottesch, M.W. Haslbeck, R. Thiemann. #ITP #IsabelleHOL #Math
+ [[https://vanemden.wordpress.com/2018/07/21/dijkstra-and-logic/][A bridge too far: E.W. Dijkstra and logic]]. ~ Maarten van Emden. #Logic
+ [[https://www.isa-afp.org/entries/Auto2_Imperative_HOL.html][Verifying imperative programs using auto2]]. ~ B. Zhan. #ITP #IsabelleHOL
+ [[https://gupea.ub.gu.se/bitstream/2077/53339/1/gupea_2077_53339_1.pdf][Proof editor for natural deduction in first-order logic (The evaluation of an
  educational aiding tool for students learning logic)]]. ~ E. Björnsson et
  als. #Logic #Teaching #RA2018
+ [[https://arxiv.org/pdf/1901.06567.pdf][Tarski's relevance logic]]. R. D. Maddux. #Logic
+ [[https://www.tweag.io/posts/2019-01-23-jupyterlab-ihaskell.html][Towards interactive Data Science in Haskell: Haskell in JupyterLab]]. ~ Matthias
  Meschede, Juan Simões. #Haskell
+ [[https://www.well-typed.com/blog/2019/01/qsm-in-depth][An in-depth look at quickcheck-state-machine]]. ~ Edsko de Vries. #Haskell
+ [[http://www.cs.ox.ac.uk/people/bernard.sufrin/personal/jape.org/OXFORDIFP/Jape/JapeForIFP.pdf][Using Jape for "Introduction to formal proof"]]. ~ Bernard Sufrin. #ITP #Jape
  #Logic
+ [[https://www.sciencedirect.com/science/article/pii/S0890540104001804][Proving pointer programs in higher-order logic]]. ~ F. Mehta, T. Nipkow. #ITP
  #IsabelleHOL
+ [[https://interstices.info/la-revolution-de-lapprentissage-profond/][La révolution de l’apprentissage profond]]. ~ Y. Bengio. #AI 
+ [[https://vitez.me/haskell-error-reduction][A beginner’s guide to the ways Haskell helps us avoid errors]]. ~ Mitchell
  Vitez. #Haskell
+ [[https://oisdk.github.io/agda-ring-solver/README.html][Solving rings in Aga]]. ~ Donnacha Oisín Kidney. #ITP #Agda #Math 
+ [[https://arxiv.org/abs/1401.7694][Experience implementing a performant category-theory library in Coq]]. ~
  J. Gross, A. Chlipala, D.I. Spivak. #ITP #Coq #CategoryTheory
+ [[https://owickstrom.github.io/domain-modelling-with-haskell-workshop/][Domain modelling with Haskell]]. ~ Oskar Wickström. #Haskell
+ [[https://www.datasciencecentral.com/profiles/blogs/r-python-julia-and-polyglot][R, Python, Julia ... and Polyglot]]. ~ Steve Miller. #Programming #Rstats
  #Python #Julia #Jupyter
+ [[http://dropbox.com/s/joaq7m9v75blrw5/pl-notation-lambdaconf-2018.pdf?dl=1][Crash course on notation in programming language theory]]. ~ Jeremy
  G. Siek. #CompSci
+ [[http://bit.ly/haskell-tt-fby][Haskell and type theory: better together]]. ~ V. Bragilevsky. #Haskell
  #TypeTheory #LambdaCalculus
+ [[https://research-repository.st-andrews.ac.uk/bitstream/handle/10023/15729/Barwell_2017_FGCS_ParallelFunctionalPearls_AAM.pdf][Finding parallel functional pearls: Automatic parallel recursion scheme
  detection in Haskell functions via anti-unification]]. ~ A.D. Barwell, C. Brown,
  K. Hammond. #Haskell
+ [[http://www2.sf.ecei.tohoku.ac.jp/~kztk/papers/kztk_jfp_am_2018.pdf][Applicative bidirectional programming (Mixing lenses and semantic
  bidirectionalization)]].  ~ K. Matsuda, M. Wang. #Haskell
+ [[http://www.philipzucker.com/bidirectional-applicative-programming-and-automatic-differentation][Applicative bidirectional programming and automatic differentiation]]. ~ Philip
  Zucker. #Haskell
+ [[https://github.com/google/haskell-trainings][Haskell trainings at Google]]. #Haskell
+ [[http://bit.ly/2HCapB6][Haskell trainings at Google: 101]]. #Haskell
+ [[http://bit.ly/2HyDJIv][Haskell trainings at Google: 102]]. #Haskell
+ [[https://culturacientifica.com/2016/01/27/el-origen-de-los-signos-matematico][El origen de los signos matemáticos]]. ~ Raúl Ibáñez. #Matemáticas
+ [[https://mmhaskell.com/blog/2019/1/28/why-haskell-iv-typeclasses-vs-inheritanc][Why Haskell IV: Typeclasses vs. inheritance]]. ~ James Bowen. 
  #Haskell
+ [[https://www.sciencedirect.com/science/article/pii/016764239190036W/pdf?md5=b7dedd960214d9191929e6f41f5fd5be&pid=1-s2.0-016764239190036W-main.pdf][On the expressive power of programming languages]]. ~ M. Felleisen. 
  #FunctionalProgramming 
+ [[https://web.stanford.edu/~kdevlin/Papers/DanesiChapter.pdf][How technology has changed what it means to think mathematically]]. ~
  K. Devlin. #Math
+ [[http://bit.ly/2SiIPNe][A correct compiler from Mini-ML to a big-step machine verified using natural
  semantics in Coq]]. ~ A. Zúniga, G. Bel-Enguix. #ITP #Coq
+ [[https://www.fpcomplete.com/blog/https/www.fpcomplete.com/blog/defining-exceptions-in-haskell][Defining exceptions in Haskell]]. ~ Chris Done. #Haskell
  #FunctionalProgramming
+ [[https://www.um.edu.mt/library/oar/handle/123456789/38118][Combinatory logic: from philosophy and mathematics to computer science]]. ~
  A. Farrugia. #Logic #Math #CompSci #FunctionalProgramming
+ [[https://rjlipton.wordpress.com/2019/01/29/primes-and-polynomials][Primes and polynomials]]. ~ R.J. Lipton, K.W. Regan. #Math
+ [[http://www.cl.cam.ac.uk/~na482/meta/lecture-notes.pdf][Metaprogramming lecture notes]]. ~ Nada Amin. #Programming #Scala #Lisp #Prolog
+ [[https://dkwise.wordpress.com/2019/01/18/fractals-and-monads][Fractals and monads in Haskell (Part 1)]]. ~ Derek Wise. #Haskell
+ [[https://dkwise.wordpress.com/2019/01/30/fractals-and-monads-part-2/][Fractals and monads in Haskell (Part 2)]]. ~ Derek Wise. #Haskell

* Febrero 2019
+ [[http://code.intef.es/inteligencia-artificial-en-el-aula-con-scratch-3-0][Inteligencia artificial en el aula con Scratch 3.0]]. #Enseñanza
  #InteligenciaArtificial #Scratch
+ [[https://github.com/cohomolo-gy/haskell-resources][A list of foundational Haskell papers]]. ~ Emily Pillmore. #Haskell
  #FunctionalProgramming
+ [[https://www.arcadianvisions.com/blog/2018/org-nix-direnv.html][Robust notes with embedded code]]. #Emacs #OrgMode
+ [[http://vmls-book.stanford.edu/vmls.pdf][Introduction to applied linear algebra]]. ~ S. Boyd, L. Vandenberghe. #Math
+ [[http://vmls-book.stanford.edu/vmls-julia-companion.pdf][Introduction to applied linear algebra (Julia language companion)]]. ~ S. Boyd,
  L. Vandenberghe. #Math #Programming #JuliaLang
+ [[http://xion.io/post/programming/rust-into-haskell.html][Rust as a gateway drug to Haskell]]. ~ Karol Kuczmarski. #Programming
  #Rust #Haskell
+ [[https://twitter.com/kena42][Rust for functional programmers]]. ~ Raphael ‘kena’ Poss. #Rust
  #Haskell #OCaml #FunctionalProgramming
+ [[https://blog.jle.im/entry/tries-with-recursion-schemes.html][Visualizing prequel meme prefix tries with recursion schemes]]. ~ Justin
  Le. #Haskell #FunctionalProgramming
+ [[https://coot.me/posts/categories-with-monadic-effects.html][Categories with monadic effects and state machines]]. ~ Marcin
  Szamotulski. #Haskell #FunctionalProgramming
+ [[https://kbsg.rwth-aachen.de/~hofmann/papers/clips-exec-pddl.pdf][CLIPS-based execution for PDDL planners]]. ~ T. Niemueller, T. Hofmann,
  G. Lakemeyer. #CLIPS
+ [[https://books.google.es/books?id=-UOCDwAAQBAJ&printsec=frontcover][Data Science with Julia]]. ~ P.D. McNicholas, P. Tait. #eBook #DataScience
  #JuliaLang 
+ [[https://tonyarcieri.com/rust-in-2019-security-maturity-stability][Rust in 2019: security, maturity, stability]]. ~ Tony Arcieri. #RustLang 
+ [[https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF][Formalização de algoritmos de criptografia em um assistente de provas
  interativo]]. ~ Guilherme Gomes Felix da Silva. #ITP #LeanProver
+ [[https://arxiv.org/abs/1807.01456][A purely functional computer algebra system embedded in Haskell]]. ~ H. Ishii
  #Haskell #FunctionalProgramming #CAS #Math
+ [[https://konn.github.io/computational-algebra][Computational algebra system in Haskell]]. ~ H. Ishii #Haskell
  #FunctionalProgramming #CAS #Math
+ [[http://beautiful.ai/deck/-LVp7S8CDQAZdaT8hNhW/Intro-to-Julia][Introduction to Julia (the language of the future for AI and ML)]]. ~ Zhuo Jia
  Dai. #JuliaLang
+ [[https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/][Programming paradigms for dummies: what every programmer should know]]. ~ Adrian
  Colyer. #Programming
+ [[https://xuanji.appspot.com/isicp][Structure and interpretation of computer programs]]. (Interactive version). ~
  Hal Abelson, Gerald Jay Sussman. ~ #CompSci
+ [[https://www.cs.uaf.edu/users/chappell/public_html/class/2018_spr/cs331/docs/types_primer.html][A primer on type systems]]. ~ Glenn G. Chappell. #Programming #Haskell #Cpp
  #Python #Lua
+ [[https://arxiv.org/abs/1901.10220][On the impact of programming languages on code quality (A reproduction
  study)]]. ~ E.D. Berger et als. #Programming
+ [[https://mountainscholar.org/bitstream/handle/10217/193082/Kessler_colostate_0053N_14914.pdf][Functional programming applied to computational algebra]]. ~
  I.H. Kessler. #Msc_Thesis #Math #CategoryTheory #FunctionalProgramming #Scala
+ [[https://www.cs.utexas.edu/~vl/teaching/378/ASP.pdf][Answer Set Programming (Draft)]]. ~ V. Lifschitz. #DeclarativeProgramming #ASP
+ [[https://www21.in.tum.de/~eberlm/real_asymp.pdf][Verified real asymptotics in Isabelle/HOL]]. ~ M. Eberl. #ITP #IsabelleHOL
+ [[http://reduction.io/essays/rosetta-haskell.html][A Rosetta stone for Haskell abstractions]]. ~ Chas Leichner. #Haskell
  #FunctionalProgramming
+ [[https://andre.tips/wmh/][Wise man's Haskell]]. ~ Andre Popovitch. #Haskell
  #FunctionalProgramming
+ [[https://sras.me/haskell/miscellaneous-enlightenments.html][Learning Haskell (Miscellaneous enlightenments)]]. ~ Sandeep C.R. #Haskell
  #FunctionalProgramming
+ [[https://books.google.es/books?id=dMJiDwAAQBAJ&printsec=frontcover][2062: The World that AI made]]. ~ Toby Walsh. #eBook #AI
+ [[https://blog.goodaudience.com/10-reasons-why-you-should-learn-julia-d786ac29c6ca][10 reasons why you should learn Julia]]. ~ Gabriel Gauci Maistre. #Programming
  #JuliaLang
+ [[http://bogumilkaminski.pl/files/julia_express.pdf][The Julia express]]. ~ Bogumił Kamiński. #Programming #JuliaLang
+ [[https://goo.gl/scholar/CHqqCY][esverify: Verifying dynamically-typed higher-order functional programs by SMT
  solving]]. ~ C. Schuster, S. Banerjea, C. Flanagan. #SMT #ITP #LeanProver
+ [[https://goo.gl/scholar/qymEhF][Formal analysis of language-based Android security using theorem proving
  approach]]. ~ W. Khan et als. #ITP #Coq
+ [[https://mmhaskell.com/blog/2019/2/4/why-haskell-v-type-families][Why Haskell V: Type families]]. ~ James Bowen. #Haskell 
+ [[http://www.pl-enthusiast.net/2019/02/04/what-is-pl-research-the-talk]["What is programming languages research?" The talk]]. ~ Michael Hicks. #PL
+ [[http://richardzach.org/2018/04/10/the-significance-of-philosophy-to-mathematics][The significance of Philosophy to Mathematics]]. ~ Richard Zach. #Philosophy
  #Mathematics
+ [[https://books.google.es/books?id=wPhwJdjI-dIC&printsec=frontcover][Proof and other dilemmas: Mathematics and Philosophy]]. ~ B. Gold,
  R.A. Simons. #Mathematics #Philosophy
+ [[https://yurichev.com/writings/SAT_SMT_by_example.pdf][SAT/SMT by example]]. ~ Dennis Yurichev. #SAT #SMT
+ [[https://arxiv.org/abs/1208.1368][Getting started with Isabelle/jEdit in 2018]]. ~ C. Sternagel. #ITP #IsabelleHOL
+ [[https://justinbarclay.me/posts/literate_programming_against_rest_apis][Literate programming against REST APIs]]. ~ Justin Barclay. #Emacs #OrgMode
+ [[https://www.williamjbowman.com/resources/wjb-dissertation.pdf][Compiling with dependent types]]. ~ W.J. Bowman. #PhD_Thesis 
+ [[https://www.isa-afp.org/entries/UTP.html][Isabelle/UTP: Mechanised theory engineering for unifying theories of
  programming]]. ~ S. Foster et als. #ITP #IsabelleHOL
+ [[https://kowainik.github.io/posts/2019-02-06-style-guide][Haskell style guide]]. ~ Kowainik. #Haskell
+ [[https://keyholesoftware.com/2019/01/30/running-your-life-with-emacs/][Running your life with Emacs]]. ~ Garrett Hopper #Emacs
+ [[https://hgiasac.github.io/posts/2019-01-04-Typeable---A-long-journey-to-Type-Safe-Dynamic-Type-Representations.html][Typeable: A long journey to type-safe dynamic type representation]]. ~ Toan
  Nguyen. #Haskell
+ [[https://cvlad.info/curry-howard/][Curry-Howard correspondence example]]. ~ Vladimir Ciobanu. #Haskell
  #Logic #Math #CategoryTheory
+ [[https://irreal.org/blog/?p=7824][Calc tutorial]]. #Emacs
+ [[https://nullprogram.com/blog/2009/06/23/][The Emacs calculator]]. ~ Chris Wellons. #Emacs
+ [[https://www.gnu.org/software/emacs/manual/calc.html][Calc: an advanced calculator and mathematical tool]]. #Emacs #Math
+ [[https://github.com/ahyatt/emacs-calc-tutorials][A series of tutorials about emacs-calc]]. ~ Andrew Hyatt #Emacs #Math
+ [[https://arxiv.org/abs/1902.00297][Signatures and induction principles for higher inductive-inductive types]]. ~
  A. Kaposi, A. Kovács. #ITP #Agda #Haskell
+ [[https://jcheminf.biomedcentral.com/track/pdf/10.1186/s13321-019-0332-0][Chemoinformatics and structural bioinformatics in OCaml]]. ~ F- Berenger,
  K.Y.J. Zhang, Y. Yamanishi. #OCaml #FunctionalProgramming
+ [[https://www.iro.umontreal.ca/~monnier/hopl-4-emacs-lisp.pdf][Evolution of Emacs Lisp]]. ~ S. Monnier, M. Sperber. #Emacs #Lisp
+ [[https://andreaspk.github.io/posts/2019-02-01-nub-benchmarks.html][Comparing nub implementations]]. ~ A. Klebinger. #Haskell 
+ [[https://www.lavanguardia.com/tecnologia/20190209/46283380483/inteligencia-artificial-ia-kairos-darpa-pentagono.html][EE.UU crea un algoritmo que predice golpes de estado y crisis financieras]]. ~
  A. Barbieri #AI
+ [[http://andrewcropper.com/pubs/jelia19-typed.pdf][Typed meta-interpretive learning of logic programs]]. ~ R: Morel, A. Cropper,
  L. Ong. #Prolog #ML
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol4/releases/download/v1.0/Examenes_de_PF_con_Haskell_Vol4.pdf][Exámenes de programación funcional con Haskell. Vol. 4 (Curso 2012-13)]]. 
  #Haskell #ProgramaciónFuncional
+ [[https://xenaproject.wordpress.com/2019/02/11/lean-in-latex][Lean in LaTeX]]. ~ Kevin Buzzard. #ITP #LeanProver
+ [[https://medium.com/@reinman/monads-for-dummies-3c3c0bbf95b6][AI automation of software (Demystifying functional programming and monads)]]. ~
  @datacountry_ai. #FunctionalProgramming #CategoryTheory
+ [[https://arxiv.org/abs/1902.03218][Model checking applied to quantum physics]]. ~ J. Guan, Y. Feng, A. Turrini,
  M. Ying. #ModelChecking
+ [[https://www.juliabloggers.com/bisecting-floating-point-numbers-3/][Bisecting floating point numbers in Julia]]. #JuliaLang #Math
+ [[https://medium.com/permutive/having-your-cake-and-eating-it-9f462bf3f908][Having your cake and eating it]]. ~ Tim Spence. #Haskell
+ [[http://gallium.inria.fr/blog/incremental-cycle-detection][Formal proof and analysis of an incremental cycle detection algorithm]]. ~
  Armaël Guéneau. #ITP #Coq
+ [[https://vaibhavsagar.com/blog/2019/02/12/refactoring-haskell/][Refactoring Haskell: A case study]]. ~ Vaibhav Sagar. #Haskell
+ [[https://www.isa-afp.org/entries/Universal_Turing_Machine.html][Universal Turing Machine in Isabelle/HOL]]. ~ Jian Xu et als. #ITP #IsabelleHOL
+ [[https://codurance.com/2019/02/11/bank-kata-in-haskell-state/][Bank kata in Haskell - dealing with state]]. ~ Liam Griffin. #Haskell
  #FunctionalProgramming
+ [[http://reasonablypolymorphic.com/blog/freer-monads/][Freer monads, more better programs]]. #Haskell #FunctionalProgramming
+ [[https://www.tweag.io/posts/2019-02-13-types-got-you.html][The types got you]]. ~ Mark Karpov. #Haskell #FunctionalProgramming
+ [[https://functional.works-hub.com/learn/afsm-arrowized-functional-state-machines-f0640][AFSM: Arrowized Functional State Machines]]. ~ Hanzhong Xu. #Haskell
  #FunctionalProgramming
+ [[http://www.marktarver.com/bipolar.html][The bipolar Lisp programmer]]. ~ Mark Tarver. #Lisp #Programming
+ [[https://catonmat.net/proof-that-sed-is-turing-complete][A proof that Unix utility sed is Turing complete]]. ~ Peter
  Krumins. #Programming
+ [[https://www.msoos.org/2019/02/sat-solvers-as-smart-search-engines/][SAT solvers as smart search engines]]. ~ Mate Soos. #SAT #Logic
+ [[http://www.msoos.org/wordpress/wp-content/uploads/2018/09/EMF-camp-SAT-and-SMT-solvers-final.pdf][Hacking using SAT and SMT solvers]]. ~ Mate Soos. #SAT #SMT #Logic
+ [[http://www.msoos.org/wordpress/wp-content/uploads/2010/11/soos_microsoft_pres.pdf][Using SAT solvers for cryptographic problems]]. ~ Mate Soos. #SAT
  #SMT #Logic
+ [[https://www.comp.nus.edu.sg/~meel/Papers/aaai19-sm.pdf ][BIRD: Engineering an efficient CNF-XOR SAT Solver and its applications to
  approximate model counting]]. ~ Mate Soos, Kuldeep S. Meel. #SAT
+ [[https://byorgey.wordpress.com/2019/02/13/finding-roots-of-polynomials-in-haskell/][Finding roots of polynomials in Haskell?]] ~ Brent Yorgey. #Haskell
+ [[https://www.isa-afp.org/entries/Probabilistic_Prime_Tests.html][Probabilistic primality testing in Isabelle/HOL]]. ~ D. Stüwe, M. Eberl. #ITP #IsabelleHOL #Math
+ [[https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/][An opinionated guide to Haskell in 2018]]. ~ Alexis King. #Haskell
+ [[http://mpickering.github.io/posts/2019-02-14-stage-3.html][A three-stage program you definitely want to write]]. ~ Matthew Pickering. #Haskell
+ [[https://www.vandenoever.info/blog/2015/07/12/translating-haskell-to-c++.html][Translating Haskell to C++ metaprogramming]]. ~ Jos van den Oever. #Haskell 
  #Cpp
+ [[https://dspace.library.uu.nl/bitstream/handle/1874/364837/3705269.pdf][Compiling an Haskell EDSL to C]]. ~ F. Dedden. #Haskell #Clang
+ [[https://alex-hhh.github.io/2019/02/racket-data-structures.html][An overview of common Racket data structures]]. ~ Alex Harsányi. #Racket
+ [[http://www.ii.uni.wroc.pl/~nivelle/publications/jlc2014.pdf][Theorem proving for classical logic with partial functions by reduction to
  Kleene logic]]. ~ H. de Nivelle. #Logic
+ [[https://arxiv.org/abs/1407.4399][A constructive version of Tarski's geometry]]. ~ M. Beeson. #Logic #Math
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol5/raw/master/Libro/Examenes_de_PF_con_Haskell_Vol5.pdf ][Exámenes de programación funcional con Haskell. Vol. 5 (Curso 2013-14)]]. 
  #Haskell #ProgramaciónFuncional
+ [[https://byorgey.wordpress.com/2019/02/16/worstsort/][Worstsort]]. ~ Brent Yorgey. #Haskell
+ [[https://www.theguardian.com/commentisfree/2019/feb/17/machines-not-our-masters-but-sinister-side-ai-demands-smart-response][Machines are not our masters – but the sinister side of AI demands a smart
  response]]. ~ Will Hutton. #AI
+ [[https://hackage.haskell.org/package/heyting-algebras-0.0.2.0][Heyting and boolean algebras in Haskell]]. ~ Marcin Szamotulski. #Haskell #Math
+ [[http://winterland.me/2019/02/17/stdio-A-simple-and-high-performance-IO%20toolkit-for-Haskell/][stdio: A simple and high-performance IO toolkit for Haskell]]. #Haskell
+ [[http://dld.bz/hrGRD][Implementing the Davis–Putnam method]]. ~ H. Zhang, M.E. Stickel. #Logic #ATP  
+ [[http://newartisans.com/2017/05/monads-are-monoids/][Monads are monoid objects]]. #Haskell #CategoryTheory
+ [[https://plato.stanford.edu/entries/set-theory-constructive/][Set theory: constructive and intuitionistic ZF]]. ~ Laura Crosilla. #Logic #Math
+ [[https://www.isa-afp.org/entries/Kruskal.html][Kruskal's algorithm for minimum spanning forest in Isabelle/HOL]]. ~
  M.P.L. Haslbeck et als. #ITP #IsabelleHOL
+ [[https://www.repository.cam.ac.uk/bitstream/handle/1810/289389/thesis.pdf][Towards justifying computer algebra algorithms in Isabelle/HOL]]. ~ W. Li. #ITP
  #IsabelleHOL #Math
+ [[https://reasonablypolymorphic.com/blog/too-fast-too-free/][Freer monads: too fast, too free]]. #Haskell
+ [[http://www.philipzucker.com/a-touch-of-topological-computation-3-categorical-interlude/][A touch of topological quantum computation 3: Categorical interlude]]. ~ Philip
  Zucker. #Haskell #CategoryTheory
+ [[https://whatthefunctional.wordpress.com/2019/02/20/a-brief-introduction-to-the-%ce%bb-calculus-part-1][A brief introduction to the λ-calculus (part 1)]]. ~ Laurence
  Emms. #LambdaCalculus
+ [[https://cacm.acm.org/news/234896-the-ai-that-can-write-fake-news-stories-from-handful-of-words/fulltext][The AI that can write fake news stories from handful of words]]. #AI
+ [[https://www.isa-afp.org/entries/List_Inversions.html][The inversions of a list in Isabelle/HOL]]. ~ M. Eberl. #ITP #IsabelleHOL
+ [[https://cvlad.info/quantifiers/][Quantifiers in Agda]]. ~ Vladimir Ciobanu. #ITP #Agda
+ [[https://whatthefunctional.wordpress.com/][A brief introduction to the λ-calculus (part 2)]]. ~ Laurence
  Emms. #LambdaCalculus
+ [[https://www.isa-afp.org/entries/Prime_Distribution_Elementary.html][Elementary facts about the distribution of primes in Isabelle/HOL]]. ~
  M. Eberl. #ITP #IsabelleHOL #Math
+ [[https://haskell-works.github.io/posts/2019-02-22-adding-bit-vectors-branchless-comparisons.html][Adding bit vectors - Branchless Comparisons]]. ~ John Ky. #Haskell
+ [[https://habr.com/en/post/441350/][Is Haskell really the language of geniuses and academia?]] #Haskell
+ [[https://coot.me/posts/monadic-io.html][Why monadic IO?]] ~ Marcin Szamotulski. #Haskell #FunctionalProgramming
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol6/raw/master/LibroE/xamenes_de_PF_con_Haskell_Vol6.pdf][Exámenes de programación funcional con Haskell]]. (Vol. 6: Curso 2014-15).
  #Haskell #ProgramaciónFuncional
+ [[https://jfr.unibo.it/article/download/8751/8968][Commutativity theorems in groups with power-like maps]]. ~ R. Padmanabhan,
  Y. Zhang. #ATP #Prover9 #Math
+ [[http://www.andrew.cmu.edu/user/avigad/Students/baek_ms_thesis.pdf][Reflected decision procedures in lean]]. ~ S. Baek. #PhD_Thesis #ITP #LeanProver
  #Logic #Math
+ [[https://byorgey.wordpress.com/2019/02/24/whats-the-right-way-to-quickcheck-floating-point-routines/][What’s the right way to QuickCheck floating-point routines?]] ~ Brent
  Yorgey. #Haskell
+ [[http://r6.ca/blog/20190223T161625Z.html][How can basic arithmetic make a self-referential sentence?]] ~ Russell
  O’Connor. #Haskell #Logic #Math
+ [[https://victorcmiraldo.github.io/data/tyde2018_draft.pdf][Sums of products for mutually recursive datatypes (The appropriationist’s view
  on generic programming)]]. ~ V.C. Miraldo, A. Serrano. #Haskell
  #FunctionalProgramming
+ [[http://www.michael-noll.com/blog/2013/12/02/twitter-algebird-monoid-monad-for-large-scala-data-analytics/][Of Algebirds, monoids, monads, and other bestiary for large-scale data
  analytics]]. ~ Michael G. Noll. #Scala #FunctionalProgramming
+ [[https://doisinkidney.com/posts/2019-02-25-agda-fingertrees.html][Finger trees in Agda]]. ~ Donnacha Oisín Kidney. #Agda 
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/10237/pdf/dagrep_v008_i008_p130_18341.pdf][Formalization of mathematics in type theory (Report from Dagstuhl Seminar
  18341)]]. #ITP #Math
+ [[https://people.smp.uq.edu.au/YoniNazarathy/julia-stats/StatisticsWithJulia.pdf][Statistics with Julia: Fundamentals for Data Science, Machine Learning and
  Artificial Intelligence]]. ~ H. Klok, Y. Nazarathy. #eBook #JuliaLang
  #DataScience #MachineLearnig #AI
+ [[https://arxiv.org/abs/1902.08048][A complete axiomatisation of reversible Kleene lattices]]. ~ P. Brunet. #ITP
  #Coq #Logic #Math
+ [[https://giordano.github.io/blog/2017-11-03-rock-paper-scissors][Rock–paper–scissors game in less than 10 lines of code]]. ~ Mosè
  Giordano. #Programming #JuliaLang
+ [[https://towardsdatascience.com/all-your-matplotlib-questions-answered-420dd95cb4ff][Matplotlib guide for people in a hurry]]. ~ Julia Kho. #Python
+ [[https://www.fpcomplete.com/blog/quickcheck-hedgehog-validity][QuickCheck, Hedgehog, Validity]]. ~ Syd Kerckhove. #Haskell
+ [[http://entropiesschool.sciencesconf.org/data/How_to_Write_Mathematics.pdf][How to write mathematics]]. ~ Paul R. Halmos. #Math
+ [[http://www3.risc.jku.at/publications/download/risc_5895/main.pdf][Theorem and algorithm checking for courses on logic and formal methods]]. ~
  W. Schreiner. #ITP #Logic #Teaching
+ [[https://www.tweag.io/posts/2019-02-28-jupyter-with.html][JupyterWith: Declarative, reproducible notebook environments]]. ~ J. Simões,
  M. Meschede. #Programming #Jupyter

* Marzo 2019
+ [[https://coot.me/posts/monoidal-functors.html][Monoidal and applicative functors]]. ~ Marcin Szamotulski. #Haskell
  #FunctionalProgramming
+ [[https://wickstrom.tech/programming/2019/03/02/property-based-testing-in-a-screencast-editor-introduction.html][Property-based testing in a screencast editor: Introduction]]. ~ Oskar
  Wickström. #Haskell
+ [[https://jaspervdj.be/posts/2019-02-27-beeraffe.html][Beeraffe: A silly game in PureScript]]. ~ Jasper Van der Jeugt. #PureScript
+ [[https://blog.sumtypeofway.com/recursion-schemes-part-6-comonads-composition-and-generality/][Recursion schemes, part VI: Comonads, composition, and generality]]. ~ Patrick
  Thomson. #Haskell
+ [[https://beautifulracket.com][Beautiful Racket (an introduction to language oriented programming using
  Racket)]]. ~ Matthew Butterick. #Racket #Programming
+ [[http://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/][Functional programming in OCaml]]. ~ Michael R. Clarkson. #eBook #OCaml
  #FunctionalProgramming
+ [[https://ro-che.info/articles/2019-03-02-lazy-validation-applicative][Lazy validation]]. ~ Roman Cheplyaka. #Haskell
+ [[https://defungames.com/2019/02/the-basics-of-game-programming-in-common-lisp/][The basics of game programming in Common Lisp]]. ~ Mauricio
  Fernandez. #CommonLisp
+ [[https://cleytonfar.github.io/posts/using-julia-for-data-science-part-02/][Using Julia for Data Science (Part 02)]]. ~ Cleyton Farias. #JuliaLang
  #DataScience
+ [[https://interstices.info/pourquoi-creer-des-nouveaux-langages-de-programmation/ ][Pourquoi créer des nouveaux langages de programmation?]] ~ Ludovic
  Henrio. #Programmation
+ [[https://towardsdatascience.com/all-your-matplotlib-questions-answered-420dd95cb4ff][Matplotlib guide for people in a hurry]]. ~ Julia Kho. #Python #Matplotlib
+ [[https://github.com/snowleopard/selective][Selective applicative functors: declare your effects statically, select which
  to execute dynamically]]. ~ A. Mokhov. #Haskell
+ [[https://juliendehos.gitlab.io/lillefp-2019-isomorphic][Isomorphic web apps in Haskell]]. ~ Julien Dehos. #Haskell
+ [[http://julien.dehos.free.fr/build/html/PFW/index.html][Programmation fonctionnelle pour le web]]. ~ Julien Dehos. #Haskell
+ [[http://julien.dehos.free.fr/build/html/PF/nn42h.html][Neural network in 42 lines of Haskell]]. ~ Julien Dehos. #Haskell
+ [[https://mmhaskell.com/blog/2019/3/4/shareable-haskell-with-jupyter][Shareable Haskell with Jupyter!]] ~ James Bowen. #Haskell #Jupyter
+ [[https://arxiv.org/abs/1902.10971][Infinite types, infinite data, infinite interaction]]. ~ P. Hyvernat. #ITP #Agda
+ [[https://arxiv.org/abs/1902.10809][Means compatible with semigroup laws]]. ~ R. Padmanabhan, A. Shukla. #ATP
  #Prover9 #Math
+ [[https://introtcs.org/public/index.html][Introduction to theoretical computer science]]. ~ Boaz Barak. #eBook #CompSci
+ [[https://arxiv.org/abs/1903.00686][DimDraw: A novel tool for drawing concept lattices]]. ~ D. Dürrschnabel,
  T. Hanika, G. Stumme. #AFC
+ [[http://www.eelis.net/research/math-classes/mscs.pdf][Type classes for mathematics in type theory]]. ~ B. Spitters, E. van der
  Weegen. #ITP #Coq #Math
+ [[https://github.com/uds-psl/coq-library-undecidability][A library of formalised undecidable problems in Coq]]. ~ Dominique
  Larchey-Wendling et als. #ITP #Coq
+ [[https://arxiv.org/abs/1903.02539][GRUNGE: A grand unified ATP challenge]]. ~ C.E. Brown, T. Gauthier, C. Kaliszyk,
  G. Sutcliffe, J. Urban. #ATP
+ [[https://youtu.be/p-t73EGlCMs][The state of Haskell in Ethereum]]. ~ Martin Allen. #Haskell
+ [[https://medium.com/@josh_40272/why-i-use-julia-8eb47216880e][Why I use Julia. (Come for the speed. Stay for the productivity)]]. ~ Josh Day
  #LuliaLang
+ [[https://softwareengineering.stackexchange.com/questions/279316/what-exactly-makes-the-haskell-type-system-so-revered-vs-say-java/279362#279362?newreg=cc0182f2943f417aa828e40270d43fe7][What exactly makes the Haskell type system so revered (vs say, Java)?]] #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1801.07528][Computer-assisted proving of combinatorial conjectures over finite domains: A
  case study of a chess conjecture]]. ~ P. Janičić, F. Marić, M. Maliković. #ITP
  #IsabelleHOL #ATP #SAT #SMT
+ [[https://arxiv.org/abs/1903.01237][Dijkstra monads for all]]. ~ K. Maillard et als. #ITP #Coq
+ [[https://guide.aelve.com/haskell/stack-cookbook-ai0adh03][Stack cookbook]]. #Haskell #Stack
+ [[http://jpmoresmau.blogspot.com/2019/03/rust-for-linear-algebra-and-neural.html][Rust for linear algebra and neural networks]]. ~ J.P. Moresmau. #RustLang #AI
  #MachineLearnig #Math
+ [[https://ilyasergey.wordpress.com/2015/12/27/on-lamports-critique-of-compositional-reasoning/][On Lamport’s critique of compositional reasoning]]. ~ Ilya Sergey. #Programming 
+ [[https://blog.sicara.com/jupyter-notebook-analysis-production-b2d585204520][Why Jupyter is not my ideal notebook]]. ~ Clément Walter. #Jupyter
+ [[https://coot.me/posts/free-monads.html][From free algebras to free monads]]. ~ Marcin Szamotulski. #Haskell
  #CategoryTheory 
+ [[http://www.tac.mta.ca/tac/reprints/articles/22/tr22.pdf][Category theory for computing science]]. ~ M. Barr, C. Wells. #eBook
  #CategoryTheory
+ [[http://forum.ulisp.com/t/what-are-the-advantages-disadvantages-of-ulisp-vs-c-c/313][What are the advantages/disadvantages of uLisp vs C/C++?]] #Programming #Lisp
  #Cpp
+ [[https://blog.ploeh.dk/2019/03/11/an-example-of-state-based-testing-in-haskell][An example of state-based testing in Haskell]]. ~ Mark Seemann. #Haskell
+ [[https://aperiodical.com/2019/03/33-can-be-written-as-the-sum-of-three-cubes][33 can be written as the sum of three cubes]]. ~ Peter Rowlett. #Math #CompSci
+ [[http://www.logicmatters.net/igt/godel-without-tears/][Gödel without (too many) tears]]. ~ Peter Smith. #Logic
+ [[https://cacm.acm.org/news/235358-ai-efforts-at-large-companies-may-be-hindered-by-poor-quality-data/fulltext][AI efforts at large companies may be hindered by poor quality data]]. #AI
+ [[https://arxiv.org/abs/1802.03685][Learning a SAT solver from single-bit supervision]]. ~ D. Selsam et als. #SAT
  #Logic #MachineLearnig
+ [[https://arxiv.org/abs/1903.05175][On constructive-deductive method for plane euclidean geometry]]. ~
  E.V. Ivashkevich. #ITP #Coq #Math
+ [[https://chrisdone.com/posts/data-typeable][Typeable and Data in Haskell]]. ~ Chris Done. #Haskell #FunctionalProgramming
+ [[https://briansteffens.github.io/2017/02/20/from-math-to-machine.html][From math to machine: translating a function to machine code]]. ~ Brian
  Steffens #Haskell #Math
+ [[https://bor0.wordpress.com/2019/03/15/writing-a-simple-evaluator-and-type-checker-in-haskell][Writing a simple evaluator and type-checker in Haskell]]. ~ Boro
  Sitnikovski. #Haskell
+ [[https://medium.com/@vindarel/these-years-in-common-lisp-2018-1d6b9084920d][These years in Common Lisp: 2018]]. ~ Vince Zd #CommonLisp
+ [[https://ryanglscott.github.io/2019/03/15/visible-dependent-quantification-in-haskell/][Visible dependent quantification in Haskell]]. ~ Ryan Scott. #Haskell
+ [[https://unsafeperform.io/talks/2019-03-sit-applicative-cooking/Applicative_Cooking.pdf][Cooking a Haskell curry with applicative functors]]. ~ G. Érdi. #Haskell
+ [[http://www.lsv.fr/~dowek/Publi/logipedia.pdf][Logipedia: a multi-system encyclopedia of formal proofs]]. ~ G. Dowek,
  F. Thiré. #ITP #Logic #Math #Dedukti #Coq #Matita #HOL_Light #PVS #LeanProver
+ [[https://pastel.archives-ouvertes.fr/tel-01235303v4/document][A framework for defining computational higher-order logics]]. ~
  A. Assaf. #PhD_Thesis #ITP #Logic #Math #Dedukti
+ [[https://www21.in.tum.de/~eberlm/ant.pdf][Nine chapters of analytic number theory in Isabelle/HOL]]. ~ M. Eberl. #ITP
  #IsabelleHOL #Math
+ [[http://www.cs.nott.ac.uk/~psxmah/liquidate.pdf][Liquidate your assets (Reasoning about resource usage in Liquid Haskell)]]. ~
  M. Handley, N. Vazou, G. Hutton. #Haskell
+ [[https://arxiv.org/abs/1901.04773][Machine learning and the Continuum Hypothesis]]. ~ K.P. Hart. #MachineLearnig
  #SetTheory
+ [[https://mmhaskell.com/blog/2019/3/4/extending-haskells-syntax][Extending Haskell's syntax!]] ~ James Bowen. #Haskell #FunctionalProgramming
+ [[https://blaxill.org/posts/compdata-trees-and-catamorphisms][Compdata trees and catamorphisms]]. ~ Ben Blaxill. #Haskell
  #FunctionalProgramming
+ [[https://plus.maths.org/content/pure-maths-crisis][Pure maths in crisis?]] ~ M. Freiberger. #Math #ITP #IsabelleHOL #LeanProver
+ [[https://bor0.wordpress.com/2019/03/19/writing-a-lambda-calculus-evaluator-in-haskell][Writing a lambda calculus evaluator in Haskell]]. ~ B. Sitnikovski. #Haskell
  #FunctionalProgramming #LambdaCalculus
+ [[http://oatao.univ-toulouse.fr/22971/1/Vasseur_22971.pdf][Map/Reduce operations for scientific computing in Julia]]. ~
  X. Vasseur. #JuliaLang
+ [[https://www.cs.bham.ac.uk/~mhe/HoTT-UF-in-Agda-Lecture-Notes/index.html][Introduction to Univalent Foundations of Mathematics with Agda]]. ~ Martín
  Hötzel Escardó. #ITP #Agda #math #HoTT
+ [[http://www.mi.fu-berlin.de/inf/groups/ag-ki/publications/proof/what-is-a-proof.pdf][What is a proof? What should it be?]] ~ C. Benzmüller. #Logic #Math #ITP #ATP
+ [[https://arxiv.org/abs/1808.07771][FMS: Functional programming as a modelling language]]. ~ I. Dasseville,
  G. Janssens. #FunctionalProgramming #ASP
+ [[https://tech.io/playgrounds/12240/functional-modelling-system][FMS (Functional Modelling System) tutorial]]. ~ I. Dasseville. 
  #FunctionalProgramming #ASP
+ [[https://doisinkidney.com/posts/2019-03-21-binary-logic-search.html][Lazy binary numbers]]. ~ Donnacha Oisín Kidney. #Haskell #Agda
+ [[https://dkwise.wordpress.com/2019/02/19/fractals-and-monads-part-3/][Fractals and monads (Part 3)]]. ~ Derek Wise. #Haskell #Math
+ [[https://samtay.github.io/articles/deriving-via.html][A small use case for Deriving Via]]. ~ Sam Tay. #Haskell
+ [[https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all/][Okay, maybe proofs aren't dying after all]]. ~ J. Horgan. #Math
+ [[https://medium.com/@stephenebly/an-introduction-to-existential-types-25c130ba61a4][An introduction to existential types]]. ~ S. Bly. #FunctionalProgramming
+ [[https://arxiv.org/abs/1903.07616][A constructive proof of dependent choice in classical arithmetic via
  memoization]]. ~ É. Miquey. #ITP #Coq
+ [[https://arxiv.org/abs/1903.06758][Algorithms for verifying deep neural networks]]. ~ C. Liu, T. Arnon, C. Lazarus,
  C. Barrett, M.J. Kochenderfer. #JuliaLang #NeuralNetworks
+ [[https://books.google.es/books?id=d6t-DwAAQBAJ&printsec=frontcover#v=onepage&q&f=false][Introduction to Python for science and engineering]]. ~ D.J. Pine. #eBook
  #Programming #Python
+ [[https://mally.stanford.edu/Papers/cs-metaphysics.pdf][Computer science and metaphysics: a cross-fertilization]]. ~ D. Kirchner,
  C. Benzmüller, E.N. Zalta. #ITP #IsabelleHOL
+ [[https://doisinkidney.com/posts/2019-03-24-permutations-by-sorting.html][Permutations by sorting]]. ~ Donnacha Oisín Kidney. #Haskell
  #FunctionalProgramming
+ [[https://jproyo.github.io/posts/2019-03-17-tagless-final-haskell.html][Tagless final encoding in Haskell]]. ~ J.P. Royo. #Haskell
  #FunctionalProgramming
+ [[https://www.isa-afp.org/entries/QHLProver.html][Quantum Hoare logic in Isabelle/HOL]]. ~ J. Liu et als. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1903.09475][Using SMT solvers to validate models for AI problems]]. ~ A. Arusoaie,
  I. Pistol. #ATP #SMT #AI
+ [[https://www.sciencedirect.com/science/article/pii/S235234091930174X][Universal (meta-) logical reasoning: The wise men puzzle (Isabelle/HOL dataset)]]. 
  ~ C. Benzmüller. #ITP #IsabelleHOL #Logic
+ [[https://cs.uwaterloo.ca/~cbright/reports/projplane.pdf][A verifiable search for projective planes of order ten]]. ~ C. Bright. #ATP #SAT
  #Math
+ [[https://cs.uwaterloo.ca/~cbright/reports/sat.pdf][The SAT+CAS method for combinatorial search with applications to best matrices]]. 
  ~ C. Bright et als. #ATP #SAT #CAS #Math
+ [[https://chshersh.github.io/posts/2019-03-25-comonadic-builders][Comonadic builders]]. ~ Dmitrii Kovanikov. #Haskell
  #FunctionalProgramming
+ [[https://medium.com/@stackdoesnotwork/the-minimalist-prelude-3e187bc834fc][The minimalist Prelude ... or why can’t Haskell be more like Purescript?]]
  #Haskell #FunctionalProgramming
+ [[https://doisinkidney.com/posts/2019-02-25-agda-fingertrees.html][Finger trees in Agda]]. ~ Donnacha Oisín Kidney. #Agda
+ [[https://bartoszmilewski.com/2019/03/27/promonads-arrows-and-einstein-notation-for-profunctors/][Promonads, arrows, and Einstein notation for profunctors]]. ~ Bartosz
  Milewski. #Haskel #CategoryTheory
+ [[https://www.isa-afp.org/entries/Transcendence_Series_Hancl_Rucki.html][The transcendence of certain infinite series in Isabelle/HOL]]. ~ A,
  Koutsoukou-Argyraki, W. Li. #ITP #IsabelleHOL #Math
+ [[https://www.irif.fr/~kerjean/TYPES19.pdf][A formal, classical proof of the Hahn-Banach theorem]]. ~ M. Kerjean,
  A. Mahboubi. #ITP #Coq #Math
+ [[https://cs.brynmawr.edu/~rae/papers/2019/partialdata/partialdata.pdf][Partial type constructors (extended version)]]. ~ M.P. Jones et als. #Haskell
  #FunctionalProgramming
+ [[http://icla2019.cse.iitd.ac.in/slides/5th%20March-19/4-Abhishek_Kr_Singh.pdf][Towards a constructive formalization of Perfect Graph Theorems (Slides)]]]. ~
  A.K. Singh. R. Natarajan. #ITP #Coq #Math
+ [[https://arxiv.org/abs/1812.11108][Towards a constructive formalization of Perfect Graph Theorems]]. ~
  A.K. Singh. R. Natarajan. #ITP #Coq #Math

* Abril 2019
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?thedu18.1.pdf][Students’ Proof Assistant (SPA)]]. ~ Anders Schlichtkrull, Jørgen Villadsen,
  Andreas Halkjær From. #Logic #IsabelleHOL
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?thedu18.3.pdf][Towards ranking geometric automated theorem provers]]. ~ N. Baeta,
  P. Quaresma. #ATP #Math
+ [[https://arxiv.org/abs/1803.01466v1][Learning how to prove: From the Coq proof assistant to textbook style]]. ~
  S. Böhne, C. Kreitz. #Teaching #Logic #ITP #Coq
+ [[https://mmhaskell.com/blog/2019/4/1/building-a-bigger-world][Building a bigger World]]. James Bowen. #Haskell #FunctionalProgramming
+ [[https://macsphere.mcmaster.ca/bitstream/11375/12315/1/fulltext.pdf][A history of the theory of types]]. ~ J. Collins. #Logic #History 
+ [[https://sigma.software/about/media/pillars-functional-programming-part-1][The pillars of functional programming (part 1)]]. N. Mozgovoy. 
  #FunctionalProgramming
+ [[https://github.com/chrisdone/dynamic][Dynamic typing in Haskell]]. ~ Chris Done. #Haskell
  #FunctionalProgramming
+ [[https://github.com/EugeneLoy/coq_jupyter][Jupyter kernel for Coq]]. ~ Eugene Loy. #ITP #Coq #Jupyter
+ [[https://www.logicmatters.net/2019/04/02/ifl2-chapters-on-propositional-natural-deduction-again/][IFL2: Chapters on propositional natural deduction, again]]. ~ Peter
  Smith. #Logic
+ [[https://arxiv.org/abs/1904.00620][Theorem and algorithm checking for courses on logic and formal methods]]. ~
  W. Schreiner. #Logic #RISCAL
+ [[https://www.karlin.mff.cuni.cz/~krajicek/prf2.pdf][Proof complexity]]. ~ Jan Krajicek.  #Book #Logic
+ [[https://lars.hupel.info/pub/phd-thesis_hupel.pdf][Verified code generation from Isabelle/HOL]]. ~ L. Hupel. #PhD_Thesis #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1711.00113v4][Proving soundness of extensional normal-form bisimilarities]]. ~ P. Polesiuk, S
  Lenglet, D. Biernacki. #ITP #Coq
+ [[https://arxiv.org/abs/1904.01677][Hammering Mizar by learning clause guidance]]. ~ J. Jakubův, J. Urban. #ITP
  #Mizar #MachineLearnig
+ [[http://garden.irmacs.sfu.ca/][The Open Problem Garden: a collection of unsolved problems in mathematics]].
  #Math
+ [[https://duplode.github.io/posts/idempotent-applicatives-parametricity-and-a-puzzle.html][Idempotent applicatives, parametricity, and a puzzle]]. ~ D. Mlot. #Haskell
  #FunctionalProgramming
+ [[http://www.philipzucker.com/proving-addition-is-commutative-in-haskell-using-singletons/][Proving addition is commutative in Haskell using singletons]]. ~ Philip
  Zucker. #Haskell #FunctionalProgramming
+ [[http://idontgetoutmuch.org/singleday.htm][Data Science in Haskell: An example using temperature data from Thailand and
  Myanmar]]. ~ Dominic Steinitz. #Haskell
  #FunctionalProgramming #DataScience
+ [[https://jozefg.bitbucket.io/posts/2015-03-24-pcf.html][A tiny compiler for a typed higher order language]]. ~ Danny Gratzer. #Haskell
  #FunctionalProgramming
+ [[https://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/][Imperative Haskell]]. ~ Vaibhav Sagar. #Haskell #FunctionalProgramming
+ [[https://leanpub.com/fpmortals-es/read][Programación funcional para mortales con Scalaz]]. ~ S. Halliday,
  O. Vargas. #Scalaz #ProgramaciónFuncional
+ [[https://arxiv.org/abs/1904.01557][Analysing mathematical reasoning abilities of neural models]]. ~ D. Saxton,
  E. Grefenstette, F. Hill, P. Kohli. #MachineLearnig
+ [[https://github.com/jaalonso/Exercitium2018/raw/master/texto/Exercitium2018.pdf][Libro de soluciones de problemas de programación funcional con Haskell
  propuestos en Exercitum (versión del 6-abr-19)]]. #Haskell #Exercitium
+ [[https://dimjasevic.net/marko/2019/02/09/isomorphism-and-embedding/][Isomorphism and embedding]]. ~ Marko Dimjašević. #ITP #Agda #Math
+ [[https://www.dataschool.io/cloud-services-for-jupyter-notebook][Six easy ways to run your Jupyter Notebook in the cloud]]. #Jupyter
+ [[https://blog.statebox.org/fun-with-functors-95e4e8d60d87][Fun with functors]]. ~ Marco Perone. #FunctionalProgramming
  #CategoryTheory
+ [[https://www.cl.cam.ac.uk/~lp15/papers/Notes/Founds-FP.pdf][Foundations of functional programming]]. ~ L.C Paulson. #FunctionalProgramming
  #LambdaCalculus
+ [[https://www.cl.cam.ac.uk/teaching/1213/DiscMathII/DiscMathII.pdf][Set theory for Computer Science]]. ~ G. Winskel. #Logic #Math
+ [[https://www.cl.cam.ac.uk/teaching/1819/DataSci/notes0.pdf][Foundations of Data Science]]. ~ D. Wischik. #DataScience
+ [[https://www.cl.cam.ac.uk/teaching/1819/Types/handout.pdf][Type systems]]. ~ N. Krishnaswami. #TypeTheory
+ [[https://chrisdone.com/posts/web-engines][Web engines in Haskell]]. ~ Chris Done. #Haskell
  #FunctionalProgramming
+ [[https://github.com/chrisdone/vado][Vado: A demo web browser engine written in Haskell]]. ~ Chris Done. #Haskell
  #FunctionalProgramming
+ [[https://medium.com/cantors-paradise/the-nature-of-infinity-and-beyond-a05c146df02c][The nature of infinity and beyond (An introduction to Georg Cantor and his
  transfinite paradise)]]. ~ Jørgen Veisdal. #Logic #Math
+ [[https://medium.com/cantors-paradise/the-riemann-hypothesis-explained-fa01c1f75d3f][The Riemann Hypothesis, explained]]. ~ Jørgen Veisdal. #Math
+ [[https://arxiv.org/abs/1802.08437][Abstract completion, formalized]]. ~ N. Hirokawa, A. Middeldorp, C. Sternagel,
  S. Winkler. #ITP #IsabelleHOL
+ [[http://publications.lib.chalmers.se/records/fulltext/255039/255039.pdf][On initial categories with families (Formalization of unityped and simply
  typed CwFs in Agda)]]. ~ K. Brilakis. #Msc_Thesis #ITP #Agda
+ [[https://jashug.github.io/papers/ConstructingII.pdf][Constructing inductive-inductive types in cubical type theory]]. ~
  J. Hugunin. #ITP #Agda #Coq
+ [[https://medium.com/@samuel.fare/what-making-a-cup-of-tea-taught-me-about-functional-programming-a09909679924][What making a cup of tea taught me about functional programming]]. Sam
  Fare. #FunctionalProgramming
+ [[https://www.jstage.jst.go.jp/article/kantogakueneconomics/45/0/45_40/_pdf][Programming prospect theory in Prolog]]. ~ I. Kenryo. #Prolog #LogicProgramming
+ [[https://mmhaskell.com/blog/2019/4/8/generating-more-difficult-mazes][Generating more difficult mazes!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://www.techiediaries.com/julia-data-science-tutorial-dataframe-csv/][Julia Data Science Tutorial: Working with DataFrames and CSV]]. #JuliaLang
  #DataScience
+ [[https://www.isa-afp.org/entries/Binding_Syntax_Theory.html][A general theory of syntax with bindings in Isabelle/HOL]]. ~ L. Gheri. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1904.03241][HOList: An environment for machine learning of higher-order theorem proving
  (extended version)]]. ~ K. Bansal et als. #ITP #HOL_Light #MachineLearnig
+ [[https://blog.monic.co/a-gentle-introduction-to-symbolic-execution/][A gentle introduction to symbolic execution]]. ~ B. Schroeder,
  J. Burget. #Haskell #SMT
+ [[https://blog.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/][Logic, explainability and the future of understanding]]. ~ S. Wolfram. #Logic
+ [[https://blog.jle.im/entry/free-alternative-regexp.html][Applicative regular expressions using the free alternative]]. ~ Justin
  Le. #Haskell #FunctionalProgramming
+ [[https://cosmius.bitbucket.io/tkhe][To kata haskellen evangelion (Learn Haskell the easy way)]]. ~ Cosmia Fu. #eBook
  #Haskell #FunctionalProgramming
+ [[https://hal.archives-ouvertes.fr/hal-02086931/document][Short proof of Menger's Theorem in Coq (Proof Pearl)]]. ~ C. Doczkal. #ITP #Coq
  #Math
+ [[https://arxiv.org/abs/1904.01677][Hammering Mizar by learning clause guidance]]. ~ J. Jakubův, J. Urban. #ATP
  #Mizar #MachineLearnig
+ [[https://hal.inria.fr/hal-02088293/document][Quantitative continuity and computable analysis in Coq]]. ~ F. Steinberg,
  L. Thery, H. Thies. #ITP #Coq #Math
+ [[https://jaredcorduan.github.io/posts/2019-04-10--rubik-group.html][The Rubik's cube group]]. ~ Jared Corduan. #Haskell #FunctionalProgramming
  #Math
+ [[https://dimjasevic.net/marko/2019/04/08/become-a-better-haskeller-by-learning-about-inductive-types/][Become a better haskeller by learning about inductive types]]. ~ Marko
  Dimjašević. #Haskell #FunctionalProgramming
+ [[https://hplgit.github.io/primer.html/doc/pub/half/book.pdf][A primer on scientific programming with Python]]. ~ Hans Petter
  Langtangen. #eBook #Python #Programming
+ [[https://www.southampton.ac.uk/~fangohr/training/python/pdfs/Python-for-Computational-Science-and-Engineering.pdf][Introduction to Python for computational science and engineering (A beginner’s
  guide)]]. ~ Hans Fangohr. #eBook #Python #Programming
+ [[https://www.reddit.com/r/lisp/comments/bc83zt/lisp_used_to_generate_rhythms_for_a_contemporary][Lisp used to generate rhythms for a contemporary string trio]]. #Lisp
  #Programming #Music
+ [[https://www.ashwinnarayan.com/post/learning-haskell-google-code-jam/][Learning Haskell through Google Code Jam]]. ~ Ashwin Narayan. #Haskell
  #FunctionalProgramming
+ [[https://medium.com/@cdsmithus/new-in-codeworld-share-a-folder-as-a-gallery-bd1b17d36f19][New in CodeWorld: Share a folder as a gallery]]. ~ Chris Smith. #CodeWorld
  #Haskell
+ [[https://williamyaoh.com/posts/2019-04-11-cheatsheet-to-regexes-in-haskell.html][A cheatsheet to regexes in Haskell]]. ~ William Yao. #Haskell
+ [[https://arxiv.org/abs/1807.08058][Learning heuristics for automated reasoning through deep reinforcement
  learning]].  ~ G. Lederman et als. #ATP #DeepLearning
+ [[http://ltvanbinsbergen.nl/thesis/thesis.pdf][Executable formal specification of programming languages with reusable
  components]]. ~ L.T. van Binsbergen. #PhD_Thesis #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1802.06221][A new foundational crisis in mathematics, is it really happening?]] ~
  M. Džamonja. #Logic #Math #HoTT
+ [[https://mmhaskell.com/blog/2019/4/15/declaring-victory-and-starting-again][Declaring victory! (and starting again!)]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://medium.com/@avik.das/a-graphical-introduction-to-dynamic-programming-2e981fa7ca2?sk=37cd14642cf1a83eb0bb33d231442837][A graphical introduction to dynamic programming]]. ~ Avik Das. #Algorithms
  #Programming #Python
+ [[https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-3-of-n][Modern SAT solvers: fast, neat and underused (part 3 of N)]]. ~
  M. Hořeňovský. #Logic #SAT
+ [[https://github.com/wilfredinni/python-cheatsheet][Basic Cheat Sheet for Python (PDF, Markdown and Jupyter Notebook)]]. ~ Carlos
  Montecinos Geisse. #Python #Programming
+ [[https://www.technolush.com/blog/evolution-of-programming-languages][Evolution of programming languages]]. #Programming
+ [[https://doisinkidney.com/posts/2019-04-17-cubical-probability.html][Cubical Agda and probability monads]]. ~ Donnacha Oisín Kidney. #Agda
+ [[https://medium.com/javascript-scene/can-you-avoid-functional-programming-as-a-policy-7bd0570bcfb2][Can you avoid functional programming as a policy?]] ~ Eric
  Elliott. #FunctionalProgramming
+ [[https://shmish111.github.io/2019/04/13/recursion-schemes-patterns][Every day recursion schemes]]. ~ David Smith. #Haskell #FunctionalProgramming
+ [[https://128.84.21.199/abs/1904.08468][Towards evolutionary theorem proving for Isabelle/HOL]]. ~ Yutaka
  Nagashima. #ITP #IsabelleHOL #MachineLearning
+ [[https://ts.data61.csiro.au/publications/nicta_full_text/8465.pdf][Eisbach: A proof method language for Isabelle]]. ~ D. Matichuk, T. Murray,
  M. Wenzel. #ITP #IsabelleHOL
+ [[https://ts.data61.csiro.au/publications/papers/Matichuk:phd.pdf][Automation for proof engineering (Machine-checked proofs at scale)]]. ~
  D. Matichuk. #PhD_Thesis #ITP #IsabelleHOL
+ [[http://www.cogsys.wiai.uni-bamberg.de/teaching/ss07/hs_rc/slides/RoGII_lecture_scheele.pdf][Other classical reasoning methods in Isabelle: From tactics and tacticals to
  automated reasoning in Isabelle]]. ~ Stephan Scheele. #ITP #IsabelleHOL
+ [[https://www.theregister.co.uk/2019/04/18/microsoft_bosque_programming_language/][Microsoft debuts Bosque – a new programming language with no loops, inspired
  by TypeScript]]. ~ T. Clarbun. #FunctionalProgramming
+ [[https://www.microsoft.com/en-us/research/uploads/prod/2019/04/beyond_structured_report_v2.pdf][Regularized programming with the BOSQUE language (Moving beyond structured
  programming)]]. ~ Mark Marron. #FunctionalProgramming
+ [[https://arxiv.org/abs/1812.04088][Towards machine learning induction]]. ~ Yutaka Nagashima. #ITP
  #IsabelleHOL #MachineLearning
+ [[http://cl-informatik.uibk.ac.at/teaching/ss19/itp/content.php][Course: Interactive theorem proving using Isabelle/HOL]]. ~ Christian
  Sternagel. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1805.11799][Automated proof synthesis for propositional logic with deep neural networks]]. ~
  Taro Sekiyama, Kohei Suenaga. #ATP #MachineLearning
+ [[https://github.com/data61/PSL][PSL: proof strategy language for Isabelle/HOL]]. ~ Yutaka Nagashima. #ITP
  #IsabelleHOL
+ [[https://hal.laas.fr/hal-02088529/document][A certificate-based approach to formally verified approximations]]. ~
  F. Bréhard, A. Mahboubi, D. Pous. #ITP #Coq #Math
+ [[https://medium.com/@reinman/monoids-to-groupoids-492c35105113][Did Functional Programming get it wrong? (Why do monads feel so clumsy?)]]. ~
  reinman. #FunctionalProgramming
+ [[https://arxiv.org/abs/1904.06750.pdf][From theory to systems: a grounded approach to programming language
  education]]. ~ W. Crichton. #Teaching #Programming
+ [[https://cacm.acm.org/blogs/blog-cacm/236068-soundness-and-completeness-with-precision/fulltext][Soundness and completeness: with precision]]. ~ Bertrand Meyer. #CompSci
+ [[http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/mr.pdf][Just do it: Simple monadic equational reasoning]]. ~ Jeremy Gibbons and Ralf
  Hinze. #Haskell #FunctionalProgramming
+ [[https://fossbytes.com/microsofts-new-programming-language-bosque-keeps-your-code-simple][Microsoft’s new programming language ‘Bosque’ keeps your code simple]]. ~
  Manisha Priyadarshini #Programming #Bosque
+ [[https://jeremykun.com/2019/04/20/a-working-mathematicians-guide-to-parsing][A working mathematician’s guide to parsing]]. ~ Jeremy Kun | Math
  ∩ Programming #Programming #LaTeX
+ [[https://mmhaskell.com/blog/2019/4/15/gxv26jzw4n6989hbajhs2gos9b8utv][Serializing mazes!]] ~ James Bowen. #Haskell #FunctionalProgramming
+ [[https://rjlipton.wordpress.com/2019/04/21/pnp-proofs][P=NP proofs]]. ~ R.J. Lipton. #CompSci #Math
+ [[https://maex.me/2019/04/rewriting-functions-with-fold-and-reduce/][Rewriting functions with fold and reduce]]. ~ Max Strübing. #Programming
  #Haskell #JavaScript
+ [[https://arxiv.org/abs/1904.10414][The theorem prover museum (Conserving the system heritage of automated
  reasoning)]]. ~ M. Kohlhase. #ATP #ITP
+ [[https://byorgey.wordpress.com/2019/04/24/competitive-programming-in-haskell-basic-setup/][Competitive programming in Haskell: Basic setup]]. ~ Brent Yorgey. #Haskell
+ [[https://thecodeboss.dev/2018/06/declarative-programming-with-prolog-part-1-getting-started/][Declarative programming with Prolog]]. ~ Aaron Kraus. #Prolog #LogicProgramming
+ [[https://rjlipton.wordpress.com/2019/04/24/why-check-a-proof][Why check a proof?]] ~ R.J. Lipton. #CompSci
+ [[https://people.mpi-inf.mpg.de/~mfleury/paper/thesis_draft.pdf][Formalization of logical calculi in Isabelle/HOL]]. ~ M. Fleury. #PhD_Thesis
  #ITP #IsabelleHOL #Logic
+ [[https://people.mpi-inf.mpg.de/~mfleury/paper/optimizing_cdcl.pdf][A verified SAT solver framework including optimization and partial
  valuations]]. ~ M. Fleury, C. Weidenbach, D. Zimmer. #ITP #IsabelleHOL #Logic
+ [[https://medium.com/@ben_80237/continuous-improvement-with-hlint-code-smells-e490886558a1][Continuous improvement with hlint code smells]]. ~ Ben Weitzman. #Haskell 
+ [[https://github.com/aymannadeem/foldilocks][Demystifying folds with GHCi]]. ~ Ayman Nadeem. #Haskell
+ [[https://thoughtbot.com/blog/thinking-in-types][Thinking in types]]. ~ Pat Brisbin. #Haskell 
+ [[https://typeclasses.com/learn-haskell/from-other-languages][Transitioning to Haskell from other languages]]. ~ @typeclasses #Haskell #Java
  #JavaScript #Python
+ [[https://typeclasses.com/python/iterators][Python iterators]]. ~ @typeclasses #Python #Haskell 
+ [[https://typeclasses.com/python/decorators @typeclasses][Python function decorators]]. #Python #Haskell 
+ [[https://medium.com/@patxi/intro-to-higher-kinded-types-in-haskell-df6b719e7a69][Intro to Higher Kinded Types in Haskell]]. ~ Patxi Bocos. #Haskell
+ [[https://williamyaoh.com/posts/2019-04-25-lens-exercises.html][Exercises for understanding Lenses]]. ~ William Yao. #Haskell
+ [[https://mmhaskell.com/blog/2019/4/29/compile-driven-development-in-action-refactoring-to-arrays][Compile driven development in action: refactoring to arrays!]] ~ James
  Bowen. #Haskell
+ [[https://arxiv.org/abs/1904.12763v1][Logic for exact real arithmetic]]. ~ H. Schwichtenberg, F. Wiesnet. #Logic #Mayh
  #MinLog #Haskell

* Mayo 2019
+ [[https://arxiv.org/abs/1904.10759.pdf][Ordinal notations via simultaneous definitions]]. ~ F.N. Forsberg, C. Xu. #ITP
  #Agda #Logic #Math
+ [[https://arxiv.org/abs/1904.10570.pdf][A formalization of forcing and the unprovability of the continuum
  hypothesis]]. ~ J.M. Han, F. van Doorn. #ITP #LeanProver #Logic #Math
+ [[https://byorgey.wordpress.com/2019/04/30/code-style-and-moral-absolutes][Code style and moral absolutes]]. ~ Brent Yorgey. #Haskell
+ [[https://arxiv.org/abs/1905.00325][QKD (Quantum Key Distribution) algorithm in Isabelle: Bayesian calculation]]. 
  ~ Florian Kammüller. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1905.00276][Warshall's algorithm (survey and applications)]]. ~ Zoltán Kása. #Algorithms
+ [[https://arxiv.org/abs/1711.10455][Backprop as Functor: A compositional perspective on supervised learning]]. ~
  B. Fong, D.I. Spivak, R. Tuyéras. #MachineLearning #CategoryTheory
+ [[https://opensourc.es/blog/mip-tsp][MIP: Travelling Salesman]]. ~ Ole Kröger. #Algorithms #JuliaLang
+ [[https://opensourc.es/blog/minlp-tspn][MINLP: Travelling Salesman with Neighborhoods]]. ~ Ole Kröger. #Algorithms
  #JuliaLang
+ [[http://marco-lopes.com/articles/Currying-and-Partial-Application/][Currying and partial application]]. ~ M. Lopes. #Haskell #Scala
+ [[http://www3.risc.jku.at/publications/download/risc_5919/Paper.pdf][Formalization of Dubé's degree bounds for Gröbner bases in Isabelle/HOL]]. ~
  A. Maletzky. #ITP #IsabelleHOL #Math
+ [[http://oleg.fi/gists/posts/2019-04-28-tabular.html][Formatting tabular data]]. ~ Oleg Grenrus. #Haskell
+ [[https://aearnus.github.io/2019/04/26/good-symbolic-differentiation-requires-multidimensional-wobbliness][Good symbolic differentiation requires multidimensional wobbliness]]. #Haskell
  #Math
+ [[https://blog.poisson.chat/posts/2019-04-03-system-f-in-coq.html][Formalization of Reynolds's parametricity theorem in Coq]]. ~ Li-yao Xia. #ITP
  #Coq
+ [[http://www.cs.cmu.edu/~fp/talks/plmw19-talk.pdf][How to think about types: Insights from a personal journey]]. ~
  F. Pfenning. #Logic #Programming #CompSci 
+ [[https://aearnus.github.io/2019/04/26/good-symbolic-differentiation-requires-multidimensional-wobbliness][Good symbolic differentiation requires multidimensional wobbliness]]. ~
  @Aearnus. #Haskell #Math 
+ [[https://medium.com/barely-functional/do-we-need-effects-to-get-abstraction-7d5dc0edfbef][Do we need effects to get abstraction?]] ~ Eric Torreborre. #Haskell
+ [[https://www.well-typed.com/blog/2018/03/oop-in-haskell/][Object oriented programming in Haskell]]. ~ Edsko de Vries. #Haskell
+ [[https://medium.com/@olxc/catamorphisms-and-f-algebras-b4e91380d134][Catamorphisms and F-Algebras]]. ~ Alex Avramenko. #Haskell
+ [[https://chrispenner.ca/posts/hkd-options][Higher kinded option parsing]]. ~ Chris Penner. #Haskell
+ [[https://web.archive.org/web/20140222124650/http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/][The algebra of algebraic data types, part 1]]. ~ Chris Taylor #Haskell
+ [[http://www.philipzucker.com/lens-as-a-divisibility-relation-goofin-off-with-the-algebra-of-types/][Lens as a divisibility relation: Goofin’ off with the algebra of types]]. ~
  Philip Zucker. #Haskell
+ [[http://www.cs.us.es/~fsancho/?e=216][PageRank y el surfista aleatorio]]. ~ F. Sancho. #Algoritmos
  #IA
+ [[https://mmhaskell.com/blog/2019/5/6/making-arrays-mutable][Making arrays mutable!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1905.01735][Interaction with formal mathematical documents in Isabelle/PIDE]]. ~
  M. Wenzel. #ITP #IsabelleHOL
+ [[https://xenaproject.wordpress.com/2019/05/06/m1f-imperial-undergraduates-and-lean/][M1F, Imperial undergraduates, and Lean]]. ~ Kevin Buzzard. #ITP #LeanProver
  #Math
+ [[https://medium.com/@elizarov/functional-programing-is-on-the-rise-ebd5c705eaef][Functional programming is on the rise]]. ~ Roman Elizarov. 
  #FunctionalProgramming
+ [[https://programminglanguages.info/influence-network][An interactive network graph showing the connections of programming languages
  based on their influences relations]]. ~ Ramiro Gómez. #Programming
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol7/raw/master/Libro/Examenes_de_PF_con_Haskell_Vol7.pdf][Exámenes de programación funcional con Haskell. Vol. 7 (Curso 2015-16)]]. 
  #Haskell #ProgramaciónFuncional
+ [[http://aitp-conference.org/2019/abstract/paper%2014.pdf][Can neural networks learn symbolic rewriting?]] ~ B. Piotrowski, C Brown,
  J. Urban, C. Kaliszyk. #ATP #MachineLearning
+ [[http://aitp-conference.org/2019/abstract/AITP_2019_paper_34.pdf][Tactic learning for Coq]]. ~ L. Blaauwbroek. #ITP #Coq #MachineLearnig
+ [[http://aitp-conference.org/2019/abstract/paper%2026.pdf][Making set theory great again: The Naproche-SAD project]]. ~ S. Frerix,
  P. Koepke. #ITP #Math
+ [[http://aitp-conference.org/2019/abstract/invited%20paper%201.pdf][Experiments with connection method provers]]. ~ W. Bibel, J. Otten. #ATP
+ [[https://mathformachines.com/files/okcfp.pdf][An introduction to categories with Haskell and databases]]. ~
  R. Holbrook. #CategoryTheory #Haskell #Databases
+ [[https://blogs.oracle.com/developers/the-power-of-functional-programming][The power of functional programming]]. ~ Arvind Kumar GS. #FunctionalProgramming
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol8/raw/master/Libro/Examenes_de_PF_con_Haskell_Vol8.pdf][Exámenes de programación funcional con Haskell. Vol. 8 (Curso 2016-17)]]. 
  #Haskell #ProgramaciónFuncional
+ [[https://lance.fortnow.com/papers/files/thesis.pdf][Complexity-theoretic aspects of interactive proof systems]]. ~ Lance Jeremy
  Fortnow. #PhD_Thesis #ITP #ComputationalComplexity
+ [[http://aitp-conference.org/2019/abstract/AITP_2019_paper_8.pdf][Neural guidance for SAT solving]]. ~ S. Jaszczur, M. Łuszczyk,
  H. Michalewski. #ATP #SAT #MachineLearning
+ [[https://files.sketis.net/Isabelle_Workshop_2018/Isabelle_2018_paper_6.pdf][Using Isabelle/UTP for the verification of sorting algorithms (A case
  study)]]. ~ J.A. Bockenek, P. Lammich, Y. Nemouchi, B. Wolff. #ITP #IsabelleHOL
+ [[http://www.jonmsterling.com/pdfs/algebraic-type-theory-tutorial.pdf][Algebraic type theory and the gluing construction]]. ~ J. Sterling. #CompSci
  #TypeTheory
+ [[https://www.quantamagazine.org/the-subtle-art-of-the-mathematical-conjecture-20190507/][The subtle art of the mathematical conjecture]]. ~ R. Dijkgraaf. #Math
+ [[https://dev.to/gonzooo/api-constraints-a-la-carte-in-haskell-purescript-3aba][API constraints a'la carte in Haskell & PureScript]]. ~ R. Andersson. #Haskell
  #PureScript
+ [[https://blog.ch3m4.org/2019/04/16/que-es-un-coconut/][¿Qué es un coconut?]] ~ Chema Cortés. #Coconut #FunctionalProgramming #Python
+ [[https://blog.ch3m4.org/2019/05/02/coconut-primeros-pasos/][Coconut - Primeros pasos]]. ~ Chema Cortés. #Coconut #FunctionalProgramming
  #Python
+ [[https://blog.ch3m4.org/2019/05/07/monadas-con-coco/][Monadas con coco]]. ~ Chema Cortés. #Coconut #FunctionalProgramming #Python
+ [[https://qfpl.io/posts/fp-cheat-sheet][Functional Programming Cheat Sheet]]. ~ Tony Morris. #FunctionalProgramming
  #Haskell
+ [[https://doisinkidney.com/posts/2019-05-08-list-manipulation-tricks.html][Some tricks for list manipulation]]. ~ Donnacha Oisín Kidney. #Haskell
  #FunctionalProgramming
+ [[https://typeclasses.com/python/islice][Transition to Haskell from Python: Iterator slicing]]. ~ Chris Martin, Julie
  Moronuki. #Python #Haskell
+ [[https://typeclasses.com/python/iteration-to-infinity][Transition to Haskell from Python: Iteration to infinity]]. ~ Chris Martin,
  Julie Moronuki. #Python #Haskell
+ [[https://www.tweag.io/posts/2019-05-09-inline-js.html][Inline-JS: Seamless JavaScript/Haskell interop]]. ~ Shao Cheng. #Haskell
  #JavaScript
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol9/raw/master/Libro/Examenes_de_PF_con_Haskell_Vol9.pdf][Exámenes de programación funcional con Haskell. Vol. 9 (Curso 2017-18)]]. 
  #Haskell #ProgramaciónFuncional
+ [[https://medium.com/code-gin/logic-programming-a94fa0997eec][Understanding logic programming]]. #LogicProgramming #Python
+ [[https://arxiv.org/abs/1905.03334][SMT-based constraint answer set solver EZSMT+]]. ~ D. Shen, Y. Lierler. #ASP
  #CASP
+ [[https://kunigami.blog/2019/05/09/constructing-trees-from-a-distance-matrix/][Constructing trees from a distance matrix]]. ~ Guilherme Kunigami. #Algorithms
+ [[https://medium.com/syncedreview/alan-turing-institute-releases-ml-framework-written-in-julia-ac649f7c1f04][Alan Turing Institute releases ML framework written in Julia]]. #MachineLearning
  #JuliaLang
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol10/raw/master/Libro/Examenes_de_PF_con_Haskell_Vol10.pdf][Exámenes de programación funcional con Haskell. Vol. 10 (Curso 2018-19)]]. 
  #Haskell #ProgramaciónFuncional
+ [[http://www.cs.us.es/~fsancho/?e=217][Teoría de la probabilidad: Lo mínimo]]. ~ F. Sancho.  #Matemáticas
+ [[https://rjlipton.wordpress.com/2019/05/10/making-elections-safe/][Making elections safe (A new proof that MAJORITY is not in AC⁰)]]. ~
  R.J. Lipton. #CompSci
+ [[https://blog.klipse.tech/clojure/2019/05/10/java-is-confusing-clojure-is-simple.html][Java is confusing, Clojure is simple]]. ~ Yehonathan Sharvit. #Programming #Java
  #Clojure
+ [[https://medium.com/duomly-blockchain-online-courses/introduction-to-functional-programming-with-python-examples-83f33308856a][Introduction to functional programming with Python examples]]. ~ Radoslaw
  Fabisiak. #FunctionalProgramming #Python
+ [[https://mathigon.org/timeline/][Timeline of mathematics]]. #Math
+ [[https://mroman42.github.io/ctlc/ctlc.pdf][Category theory and lambda calculus]]. ~ Mario Román García. #LambdaCalculus
  #CategoryTheory #Haskell
+ [[https://github.com/mroman42/mikrokosmos][Mikrokosmos: a educational λ-calculus interpreter]]. ~ Mario Román
  García. #LambdaCalculus #Haskell
+ [[http://save.seecs.nust.edu.pk/pubs/2019/ICCCS_2019_1.pdf][Formalization of asymptotic notations in HOL4]]. ~ N. Iqbal et als. #ITP #HOL4
+ [[https://arxiv.org/abs/1905.01473.pdf][A denotational engineering of programming languages]]. ~ Andrzej Jacek
  Blikle. #eBook #Logic #CompSci
+ [[https://doisinkidney.com/posts/2019-05-11-concatenative-free.html][Concatenative programming; the free monoid of programming languages]]. ~
  Donnacha Oisín Kidney. #Haskell #FunctionalProgramming
+ [[http://casperbp.net/posts/2019-04-nondeterminism-using-a-free-monad/index.html][Interpreters with non-determinism using a free monad]]. ~ Casper Bach
  Poulsen. #Agda #Haskell
+ [[http://www.cs.utexas.edu/~moore/publications/milestones.pdf][Milestones from the pure lisp theorem prover to ACL2]]. ~ J Strother Moore. #ITP
  #ACL2
+ [[https://www.researchgate.net/profile/Christoph_Benzmueller/publication/332786587_IO_Logic_in_HOL/links/5cc9c196299bf120978f2f1b/I-O-Logic-in-HOL.pdf][I/O logic in HOL]]. ~ C- Benzmüller, A. Farjami, P. Meder, X. Parent. #ITP
  #IsabelleHOL #Logic
+ [[https://mmhaskell.com/blog/2019/5/13/quicksort-with-haskell][Quicksort with Haskell!]] ~ James Bowen. #Haskell #FunctionalProgramming
+ [[http://www.well-typed.com/blog/2019/05/integrated-shrinking/][Integrated versus manual shrinking]]. ~ Edsko de Vries. #Haskell
  #FunctionalProgramming
+ [[https://cvlad.info/functor-of][Functor-Of]]. ~ Vladimir Ciobanu. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1905.05500][Unifying semantic foundations for automated verification tools in
  Isabelle/UTP]]. ~ S. Foster et als. #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/LambdaAuth.html][Formalization of generic authenticated data structures in Isabelle/HOL]]. ~
  M. Brun, D. Traytel. #ITP #IsabelleHOL
+ [[https://byorgey.wordpress.com/2019/05/14/lightweight-efficiently-sampleable-enumerations-in-haskell/][Lightweight, efficiently sampleable enumerations in Haskell]]. ~ Brent
  Yorgey. #Haskell #FunctionalProgramming
+ [[https://doisinkidney.com/posts/2019-05-14-corecursive-implicit-queues.html][Implicit corecursive queues]]. ~ Donnacha Oisín Kidney. #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1905.05970][holpy: Interactive theorem proving in Python]]. ~ Bohua Zhan. #ITP #Logic
  #Python
+ [[http://qfpl.io/share/talks/ghc-language-extensions/][GHC language extensions]]. ~ Andrew McMiddlin. #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/laws/slides.pdf][Laws!]] ~ George Wilson. #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/appetite-for-dysfunction/][Appetite for dysfunction]]. ~ Andrew McMiddlin #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/reflexive-art/composeconf.html][Reflexive art]]. ~ Sean Chalmers. #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/comma-police/sv.pdf][Comma police: The design and implementation of a CSV library]]. ~ George
  Wilson. #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/state-machine-testing][State machine testing]]. ~ Andrew McMiddlin. #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/contravariant-functors/contravariant.pdf][Contravariant functors: The other side of the coin]]. ~ George Wilson. #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1406.4823][Notions of computation as monoids]]. ~ E. Rivas, M. Jaskelioff. #Haskell
  #CategoryTheory
+ [[https://hal.archives-ouvertes.fr/hal-02127698/document][Graph theory in Coq: Minors, treewidth, and isomorphisms]]. ~ C. Doczkal,
  D. Pous. #ITP #Coq #Math
+ [[http://qfpl.io/share/talks/cargo-culting-lenses/talk.html][Cargo culting lenses for fun & profit]]. ~ Sean Chalmers. #Haskell
  #FunctionalProgramming
+ [[http://qfpl.io/share/talks/your-first-haskell-app/][Your first Haskell app]]. ~ Andrew McMiddlin. #Haskell #FunctionalProgramming
+ [[http://qfpl.io/share/talks/typeclass-the-ultimate-ad-hoc/slides.pdf][Type class: The ultimate ad-hoc]]. ~ George Wilson. #Haskell
  #FunctionalProgramming
+ [[https://discourse.haskell.org/t/a-note-on-the-connections-between-the-foldable-methods/685][A note on the connections between the Foldable methods]]. ~ Daniel
  Mlot. #Haskell #FunctionalProgramming
+ [[https://github.com/kaygun/18-Fall-Math388E][Data science for fundamental sciences]]. Atabey Kaygun #DataScience 
+ [[https://rjlipton.wordpress.com/2019/05/18/an-app-proof/][An app proof]]. R.J. Lipton. #Math
+ [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.121.1890&rep=rep1&type=pdf][Techniques for embedding postfix languages in Haskell]]. ~ Chris
  Okasaki. #Haskell #FunctionalProgramming 
+ [[https://arxiv.org/abs/1905.07244][Isabelle technology for the Archive of Formal Proofs]]. ~ Makarius Wenzel. #ITP
  #IsabelleHOL
+ [[http://aperez4.blogspot.com/2019/05/la-geometria-se-hizo-arte-las-claves.html][La Geometría se hizo Arte: las claves secretas de Escher]]. ~ Antonio Pérez
  Sanz. #Matemáticas #Escher
+ [[http://andreipopescu.uk/pdf/ITP2015.pdf][A consistent foundation for Isabelle/HOL]]. ~ O. Kunčar, A. Popescu. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1905.06192][Mechanised assurance cases with integrated formal methods in Isabelle]]. ~
  Y. Nemouchi et als. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1905.07961][Guiding theorem proving by recurrent neural networks]]. ~ B. Piotrowski,
  J. Urban. #ATP #NeuralNetworks
+ [[https://soupi.github.io/rfc/pfgames/][Purely functional games (How I built a game in Haskell - pure functional
  style)]]. ~ Gil Mizrahi. #Haskell #FunctionalProgramming #Game
+ [[http://philsci-archive.pitt.edu/16024/][For cybersecurity, Computer Science must rely on strongly-typed actors]]. ~
  C. Hewitt. #Logic #CompSci
+ [[https://mmhaskell.com/blog/2019/5/20/running-from-enemies][Running from enemies!]] ~ James Bowen. #Haskell #FunctionalProgramming
+ [[https://themattchan.com/blog/2019-05-19-cps-and-embeddings.html][A correspondence between deep/shallow embeddings and CPS/first order
  evaluators]]. ~ Matthew Chan. #Haskell #FunctionalProgramming
+ [[https://themattchan.com/blog/2018-12-22-code-style.html][Thoughts on code style]]. ~ Matthew Chan. #Haskell #FunctionalProgramming
+ [[https://www.cs.ru.nl/bachelors-theses/2018/Timo_Maarse___4416295___Parsing_with_derivatives_in_Haskell.pdf][Parsing with derivatives in Haskell]]. ~ Timo Maarse. #Haskell
  #FunctionalProgramming
+ [[https://www.azavea.com/blog/2019/05/20/functional-api-development-haskell][Lessons in functional API development from Haskell’s servant and Http4s]]. ~
  James Santucci. #Haskell #FunctionalProgramming
+ [[https://ieeexplore.ieee.org/iel7/8465565/8488986/08489371.pdf][Formalization and certification of software for smart cities]]. ~ E.S. Grilo,
  B. Lopes. #ITP #Coq
+ [[https://link.springer.com/chapter/10.1007/978-3-030-19823-7_39][EduBAI: An educational platform for logic-based reasoning]]. ~ D. Arampatzis et
  als. #Teaching #Logic #ASP
+ [[http://www.di.uminho.pt/~jno/ps/pdbc_part.pdf][Program design by calculation]]. ~ J.N. Oliveira. #eBook #Haskell
  #FunctionalProgramming
+ [[https://riptutorial.com/ebook/haskell][Learning Haskell language eBook]]. #eBook #Haskell #FunctionalProgramming
+ [[https://byorgey.wordpress.com/2019/05/22/competitive-programming-in-haskell-scanner/][Competitive programming in Haskell: Scanner]]. ~ Brent Yorgey. #Haskell
  #FunctionalProgramming
+ [[https://blog.jez.io/profiling-in-haskell/][Profiling in Haskell for a 10x speedup]]. ~ Jake Zimmerman. #Haskell
  #FunctionalProgramming
+ [[https://blog.ploeh.dk/2019/05/20/maybe-catamorphism][Maybe catamorphism]]. ~ Mark Seemann. #Haskell #FunctionalProgramming
+ [[https://github.com/flypitch/flypitch-itp-2019/releases/download/1.0/flypitch-itp-2019.pdf][A formalization of forcing and the consistency of the failure of the continuum
  hypothesis]]. ~ Jesse Michael Han and Floris van Doorn. #ITP #LeanProver #Logic
+ [[https://github.com/flypitch/flypitch][Flypitch: A formal proof of the independence of the continuum hypothesis]]. ~
  Jesse Michael Han and Floris van Doorn. #ITP #LeanProver #Logic
+ [[https://arxiv.org/abs/1905.09381][Learning to prove theorems via interacting with proof assistants]]. ~ K. Yang,
  J. Deng. #ITP #Coq #MachineLearning
+ [[https://github.com/princeton-vl/CoqGym][CoqGym: A learning environment for theorem proving with the Coq proof
  assistant]]. ~ K. Yang, J. Deng. #ITP #Coq #MachineLearning
+ [[https://arxiv.org/abs/1905.09565][ENIGMAWatch: ProofWatch meets ENIGMA]]. ~ Z. Goertzel, J. Jakubův,
  J. Urban. #ATP #MachineLearnig
+ [[https://reasonablypolymorphic.com/blog/faking-fundeps/][Faking fundeps with typechecker plugins]]. #Haskell #FunctionalProgramming
+ [[https://www.johndcook.com/blog/applied-category-theory/][Applied category theory]]. ~ John D. Cook. #CategoryTheory
+ [[https://xenaproject.wordpress.com/2019/05/21/equality-part-1-definitional-equality/][Equality part 1: definitional equality]]. ~ Kevin Buzzard. #ITP #LeanProver
+ [[https://xenaproject.wordpress.com/2019/05/25/equality-part-2-syntactic-equality/][Equality part 2: syntactic equality]]. ~ Kevin Buzzard. #ITP #LeanProver
+ [[http://www.javiercasas.com/articles/codata-in-action][Codata in action, or how to connect Functional Programming and Object Oriented
  Programming]]. ~ J. Casas. #Haskell #FunctionalProgramming #CategoryTheory
+ [[https://serokell.io/blog/dimensions-and-haskell-introduction][Dimensions and Haskell: Introduction]]. ~ D. Rogozin. #Haskell
  #FunctionalProgramming #MachineLearnig #Math
+ [[https://arxiv.org/abs/1905.10006][Graph representations for Higher-Order Logic and theorem proving]]. ~ A. Paliwal
  et als. #ITP #ATP #MachineLearning
+ [[https://github.com/david-christiansen/pie-hs][Pie-hs: an implementation of Pie, the language from "The little typer", in
  Haskell]]. ~ D.T. Christiansen. #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/5/27/smarter-enemies-with-bfs][Smarter enemies with BFS!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://people.inf.ethz.ch/trayteld/papers/cade19-incompleteness/incompleteness.pdfw][A formally verified abstract account of Gödel's incompleteness theorems]]. ~
  A. Popescu, D. Traytel. #ITP #IsabelleHOL #Logic #Math
+ [[https://people.inf.ethz.ch/trayteld/papers/lambdaauth/lambdaauth.pdfw][Generic authenticated data structures, formally]]. ~ M. Brun, D. Traytel. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1905.10501][Learning to reason in large theories without imitation]]. ~ K. Bansal et
  als. #ATP #MachineLearning
+ [[http://pirlea.net/papers/toychain-thesis.pdfw][Toychain: Formally verified blockchain consensus]]. ~ G. Pîrlea. #ITP #Coq
  #Blockchain
+ [[https://arxiv.org/abs/1905.10728][Programming with applicative-like expressions]]. ~ J. Malakhovski,
  S. Soloviev. #Haskell #FunctionalProgramming
+ [[https://doisinkidney.com/posts/2019-05-28-linear-phases.html][Deriving a linear-time applicative traversal of a rose tree]]. ~ Donnacha Oisín
  Kidney. #Haskell #FunctionalProgramming
+ [[https://github.com/noschinl/cypw][CYP: Checker for "morally correct" induction proofs about Haskell programs]]. 
  #ITP #Haskell #FunctionalProgramming
+ [[http://www.cs.nott.ac.uk/~psztxa/publ/fomus19.pdfw][Naïve type theory]]. ~ T. Altenkirch. #Logic #Math #TypeTheory #HoTT
+ [[https://interstices.info/la-theorie-de-la-complexite-algorithmique][La théorie de la complexité algorithmique pour calculer efficacement]]. ~
  G. Lagarde #Algorithmes
+ [[https://arxiv.org/abs/1905.12149][SATNet: Bridging deep learning and logical reasoning using a differentiable
  satisfiability solver]]. ~ P.W. Wang et als. #ATP #SAT #MachineLearning
+ [[https://arxiv.org/abs/1905.13100][Towards finding longer proofs]]. ~ Z. Zombori et als. #ATP #MachineLearning
+ [[http://www.cs.nott.ac.uk/~psxmah/liquidate.pdf][Liquidate your assets (Reasoning about resource usage in Liquid Haskell)]]. ~
  M.A.T. Handley, N. Vazou, G. Hutton. #Haskell #LiquidHaskell
+ [[https://williamyaoh.com/posts/2019-05-27-string-interpolation-and-overlapping-instances.html][String interpolation and overlapping instances]]. ~ William Yao. #Haskell
  #FunctionalProgramming
+ [[http://bit.ly/2JOlNdc][Sobre cribas y matemáticas]]. ~ Juan Arias de Reyna. #Matemáticas

* Junio 2019
+ [[https://www.gaussianos.com/sheldon-tenia-razon-el-mejor-numero-es-el-73][Sheldon tenía razón: el mejor número es el 73]]. ~ M.A. Morales. #Matemáticas
+ [[http://group-mmm.org/~ayamada/DJTY2019.pdf][A verified implementation of the Berlekamp–Zassenhaus factorization
  algorithm]]. ~ J. Divasón et als. #ITP #IsabelleHOL #Math
+ [[http://uilis.unsyiah.ac.id/oer/files/original/aa4c33bd9eeba8b979b3033a615b60c8.pdf][First semester in numerical analysis with Julia]]. ~ G. Ökten. #eBook #JuliaLang
  #Math
+ [[https://www.reddit.com/r/haskell/comments/bwah9q/why_haskell_why_github_use_haskell_for_their/][Why Haskell - why GitHub use Haskell for their newly released Semantic
  package]]. #Haskell #FunctionalProgramming
+ [[https://www.isa-afp.org/entries/KD_Tree.html][Multidimensional binary search trees in Isabelle/HOL]]. ~ Martin Rau. #ITP
  #IsabelleHOL
+ [[https://www.cs.kent.ac.uk/people/staff/rnsr/docs/herbrand-jlc.pdf][Towards automated reasoning in Herbrand structures]]. ~ L. Cohen, R. Rowe,
  Y. Zohar. #Logic #ATP
+ [[http://www.cse.chalmers.se/~mista/assets/pdf/ast19.pdf][Generating random structurally rich algebraic data type values]]. ~ A. Mista,
  A. Russo. #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/6/3/fighting-back][Monday Morning Haskell: Fighting Back!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://github.com/alhassy/OCamlCheatSheet][Reference of basic commands to get comfortable with OCaml]]. ~ Musa
  Al-hassy. #OCaml
+ [[https://dl.acm.org/citation.cfm?id=3309508][Translation from problem to code in seven steps]]. ~ A.D. Hilton, G.M. Lipp,
  S.H. Rodger. #Teaching #Programming
+ [[https://www21.in.tum.de/~haslbema/documents/Haslbeck_Lammich-Refinement_with_Time.pdf][Refinement with time (Refining the run-time of algorithms in Isabelle/HOL)]]. ~
  M.P.L. Haslbeck, P. Lammich. #ITP #IsabelleHOL
+ [[https://hal.inria.fr/hal-01897468v2/document][Deriving proved equality tests in Coq-elpi: Stronger induction principles for
  containers in Coq]]. ~ Enrico Tassi. #ITP #Coq
+ [[http://alioth.uwb.edu.pl/~pakkarol/articles/CBCKKP-ITP2019.pdf][Higher-order Tarski Grothendieck as a foundation for formal proof]]. ~ C. Brown,
  C. Kaliszyk, K. Pąk. #ITP #IsabelleHOL #Logic
+ [[https://arxiv.org/abs/1904.11818][A certifying extraction with time bounds from Coq to call-by-value
  λ-calculus]]. ~ Y. Forster, F. Kunze. #ITP #Coq
+ [[https://members.loria.fr/SMerz/papers/itp2019.pdf][Formal proof of Tarjan’s strongly connected components algorithm in Why3, Coq,
  and Isabelle]]. ~ R. Chen et als. #ITP #Why3 #Coq #IsabelleHOL
+ [[https://arxiv.org/abs/1810.08380][Formalizing computability theory via partial recursive functions]]. ~
  M. Carneiro. #ITP #LeanProver
+ [[https://wickstrom.tech/programming/2019/06/02/property-based-testing-in-a-screencast-editor-case-study-3.html][Property-based testing in a screencast editor, case study 3: Integration
  testing]]. ~ Oskar Wickström. #Haskell #FunctionalProgramming
+ [[https://blog.ploeh.dk/2019/06/03/either-catamorphism/][Either catamorphism]]. Mark Seemann. #Haskell #FunctionalProgramming
+ [[https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md][Haskell style guide]]. ~ Johan Tibell. #Haskell #FunctionalProgramming 
+ [[https://doisinkidney.com/posts/2019-06-04-solving-puzzles-without-your-brain.html][Solving programming puzzles without using your brain]]. ~ Donnacha Oisín
  Kidney. #Python #Math
+ [[https://lean-forward.github.io/e-g/e-g.pdf][Formalizing the solution to the cap set problem]]. ~ S. Dahmen, J. Hölzl,
  R.Y. Lewis. #ITP #LeanProver
+ [[https://hal.inria.fr/hal-02088293/document][Quantitative continuity and computable analysis in Coq]]. ~ F. Steinberg,
  L. Thery, H. Thies. #ITP #Coq #Math
+ [[https://easychair.org/publications/preprint_download/GhvC][Hilbert meets Isabelle. (Formalisation of the DPRM theorem in Isabelle/HOL)]]. ~
  D. Aryal et als. #ITP #IsabelleHOL #Math
+ [[http://perso.ens-lyon.fr/florent.brehard/chebapprox/TOFILL][A certificate-based approach to formally verified approximations]]. ~
  F. Bréhard, A. Mahboubi, D. Pous. #ITP #Coq #Math
+ [[https://www.xuanruiqi.com/assets/succinct.pdf][Proving tree algorithms for succinct data structures]]. ~ R. Affeldt,
  J. Garrigue, X. Qi, K. Tanaka. #ITP #Coq
+ [[https://gupea.ub.gu.se/bitstream/2077/60174/1/gupea_2077_60174_1.pdf][Automatic refactoring for Agda]]. ~ K. Wibergh. #Msc_Thesis #ITP #Agda
+ [[https://dl.acm.org/citation.cfm?id=3309512][LP based integration of computing and science education in middle schools]]. ~
  Y. Zhang et als. #Teaching #LogicProgramming
+ [[https://wiki.ifs.hsr.ch/SemProgAnTr/files/FS19_Waelter_FP-Web-Mobile.pdf][Functional programming for Web and mobile (A review of the current state of
  the art)]]. ~ J. Wälter. #FunctionalProgramming
+ [[https://arxiv.org/abs/1905.13706][A role for dependent types in Haskell (Extended version)]]. ~ S. Weirich et
  als. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1906.03930][Formalization of the axiom of choice and its equivalent theorems]]. ~ T. Sun,
  W. Yu. #ITP #Coq #Logic #Math
+ [[https://github.com/styzystyzy/Axiomatic_Set_Theory. ~ T. Sun.][Formalization of axiomatic set theory in Coq]]. #ITP #Coq #Logic #Math
+ [[https://github.com/styzystyzy/Axiom_of_Choice][Formalization of the axiom of choice and its equivalent theorems in Coq]]. ~
  T. Sun. #ITP #Coq #Logic #Math
+ [[https://dl.acm.org/citation.cfm?id=3329959][TeIL: a type-safe imperative tensor intermediate language]]. ~ N.A. Rink,
  J. Castrillon. #ITP #Coq
+ [[https://hal.archives-ouvertes.fr/hal-02150167/document][Rapid prototyping formal systems in MMT: 5 case studies]]. ~ D. Müller,
  F. Rabe. #ITP #MMT #Logic
+ [[https://digitalcommons.library.umaine.edu/cgi/viewcontent.cgi%3Farticle%3D1536%26context%3Dhonors][Exploring semantic hierarchies to improve resolution theorem proving on
  ontologies]]. ~ S. Small. #ATP #Prover9
+ [[https://www.cloudseal.io/blog/2019-06-07-pure-programs][Pure programs: Pure functions aren't enough]]. ~ Ryan Newton. #Haskell
  #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/6/10/spring-cleaning-parameters-and-savign][Spring cleaning: Parameters and saving!]]. #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1906.03523][Inductive logic programming via differentiable deep neural logic networks]]. ~
  A. Payani, F. Fekri. #ILP #NeuralNetworks #MachineLearning
+ [[https://arxiv.org/abs/1904.08368][Relay: A high-level IR for Deep Learning]]. ~ J. Roesch et
  als. #FunctionalProgramming #MachineLearning
+ [[https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/][The inverse of a bijection]]. ~ Kevin Buzzard. #ITP #LeanProver #Math
+ [[https://captjakk.com/posts/2019-05-12-practical-intro-eff.html][A practical introduction to freer monads (Eff)]]. #Haskell
  #FunctionalProgramming
+ [[http://www.cs.cornell.edu/courses/cs3110/2019sp/textbook][Functional programming in OCaml]]. ~ Michael R. Clarkson. #eBook
  #FunctionalProgramming #OCaml
+ [[http://home.in.tum.de/~immler/documents/immler2018thesis.pdf][A verified ODE solver and Smale's 14th problem]]. ~ F. Immler. #PhD_Thesis #ITP
  #IsabelleHOL #Math
+ [[http://home.in.tum.de/~mansour/cv-and-website/papers/Greens_journal.pdf][An Isabelle/HOL formalisation of Green’s theorem]]. ~ M. Abdulaziz,
  L.C. Paulson. #ITP #IsabelleHOL #Math
+ [[http://home.in.tum.de/~mansour/cv-and-website/papers/diamBoundingFormalisationJAR.pdf][Formally verified algorithms for upper-bounding state space diameters]]. ~
  M. Abdulaziz, M. Norrish, C. Gretton. #ITP #HOL4
+ [[http://home.in.tum.de/~mansour/cv-and-website/papers/verifiedValidator.pdf][A formally verified validator for classical planning problems and solutions]]. ~
  M. Abdulaziz, P. Lammich. #ITP #IsabelleHOL
+ [[http://isabelle.in.tum.de/website-Isabelle2011/dist/Isabelle2011/doc/isar-overview.pdf][A tutorial introduction to structured Isar proofs]]. ~ T. Nipkow. #ITP #IsabelleHOL
+ [[https://github.com/stylewarning/cl-permutation][Permutations and permutation groups in Common Lisp]]. ~ Robert
  Smith. #CommonLisp #Math
+ [[http://tomasp.net/academic/drafts/cultures/cultures.pdf][Cultures of programming (Understanding the history of programming through
  controversies and technical artifacts)]]. ~ T. Petricek, #Programming
+ [[http://philomatica.org/wp-content/uploads/2019/06/rodin_kovalyov.pdf][Truth and justification in knowledge representation]]. ~ A. Rodin,
  S. Kovalyov. #KR #HoTT
+ [[https://www.isa-afp.org/entries/IMP2_Binary_Heap.html][Binary heaps for IMP2 in Isabelle/HOL]]. ~ S. Griebel. #ITP #IsabelleHOL
+ [[https://jamesrwilcox.com/InductionExercises.html][Exercises on generalizing the induction hypothesis]]. ~ James Wilcox. #ITP #Coq
+ [[https://typeclasses.com/monoid][Monoid]]. ~ Chris Martin, Julie Moronuki. #Haskell #FunctionalProgramming
+ [[https://semantic.org/post/empty-and-unit-types][Empty and unit types]]. ~ Ashley Yakeley. #Haskell #FunctionalProgramming
  #TypeTheory
+ [[https://blog.poisson.chat/posts/2019-06-09-free-monads-free-monads.html][Free monads of free monads]]. ~ Li-yao Xia. #Haskell #FunctionalProgramming
+ [[https://github.com/bawolk/hsp][hsp: Haskell command line text stream processor]]. #Haskell
  #FunctionalProgramming
+ [[https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/][Proofs are not programs]]. ~ Kevin Buzzard. #ITP #LeanProver #Math
+ [[https://www.msoos.org/2019/06/crystalball-sat-solving-data-gathering-and-machine-learning/][CrystalBall: SAT solving, data gathering, and machine learning]]. ~ Mate
  Soos. #SAT #MachineLearning
+ [[https://www.cs.mcgill.ca/~bpientka/papers/learn-ocaml-icfp19.pdf][Teaching the art of functional programming using automated grading (Experience
  report)]]. ~ A. Hameer, B. Pientka. #Teaching #FunctionalProgramming #OCaml
+ [[https://github.com/teaching-the-art-of-fp/learn-ocaml/tree/teaching-fp][Learn-OCaml: A Web application for learning OCaml]]. #Teaching
  #FunctionalProgramming #OCaml
+ [[https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors-slides.pdf][Selective applicative functors]]. ~ Andrey Mokhov. [Slides]
  #Haskell #FunctionalProgramming
+ [[http://www.hrpub.org/download/20190530/SA3-19613106.pdf][Composing monads for a musical performance]]. ~ N. Rossiter, M. Heather. #Music
  #CategoryTheory #Haskell
+ [[http://microsoft.com/en-us/research/uploads/prod/2019/03/ho-haskell-5c8bb4918a4de.pdf][Higher-order type-level programming in Haskell]]. ~ C. Kiss et als. #Haskell
  #FunctionalProgramming 
+ [[https://www.codefornerds.com/developing-an-intuition-for-reduce-in-javascript-through-haskell-monoids/][Developing an intuition for reduce in JavaScript through Haskell: Monoids]]. ~
  @codefornerds #JavaScript #Haskell #FunctionalProgramming
+ [[https://serokell.io/blog/parsing-typed-edsl][Parsing typed eDSL]]. ~ George Agapov. #Haskell #FunctionalProgramming
+ [[http://bit.ly/2IimNnX][Haskell quick syntax reference]]. ~ S.L. Nita, M. Mihailescu. #eBook #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1906.06251][Effective problem solving using SAT solvers]]. ~ C. Bright et als. #ATP #SAT 
+ [[http://talisker.inf.kcl.ac.uk/cgi-bin/repos.cgi/isabelle-cookbook/raw-file/tip/progtutorial.pdf][The Isabelle cookbook (A gentle tutorial for programming Isabelle/ML)]]. ~
  C. Urban et als. #ITP #IsabelleHOL
+ [[http://www3.risc.jku.at/publications/download/risc_5929/Paper.pdf][Gröbner bases and Macaulay matrices in Isabelle/HOL]]. ~ A. Maletzky. #ITP
  #IsabelleHOL #Math
+ [[http://www3.risc.jku.at/publications/download/risc_5919/Paper.pdf][Formalization of Dubé's degree bounds for Gröbner bases in Isabelle/HOL]]. ~
  A. Maletzky. #ITP #IsabelleHOL #Math
+ [[https://www.isa-afp.org/entries/Groebner_Macaulay.html][Gröbner bases, Macaulay matrices and Dubé's degree bounds in Isabelle/HOL]]. ~
  A. Maletzky. #ITP #IsabelleHOL #Math
+ [[https://www.isa-afp.org/entries/Nullstellensatz.html][Hilbert's Nullstellensatz in Isabelle/HOL]]. ~ A. Maletzky. #ITP #IsabelleHOL
+ [[https://digitalcommons.wpi.edu/mqp-all/7119][Formal verification of boolean unification algorithms with Coq]]. ~
  D. Richardson et als. #ITP #Coq
+ [[https://github.com/EgbertRijke/HoTT-Intro][Introduction to homotopy type theory]]. ~ E. Rijke. #HoTT #Logic #math #ITP
  #Agda 
+ [[https://arxiv.org/abs/1611.05990][Monte Carlo tableau proof search]]. ~ M. Färber, C. Kaliszyk, J. Urban. #ATP
  #Logic #MachineLearning
+ [[https://github.com/adjoint-io/auth-adt][Authenticated data structures, generically]]. #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/6/17/loading-games-and-changing-colors][Loading games and changing colors!]] ~ James Bowen #Haskell
  #FunctionalProgramming
+ [[http://www.javiercasas.com/articles/functional-programming-patterns-functional-core-imperative-shell][Patterns of functional programming: functional core - imperative shell]]. ~
  J. Casas. #Haskell #FunctionalProgramming
+ [[https://medium.com/@baseerhk/a-taste-of-functional-programming-in-kotlin-3b163b5c8101][A taste of functional programming in Kotlin]]. ~ Baseer
  Al-Obaidy. #FunctionalProgramming #Kotlin
+ [[https://blog.jle.im/entry/functor-combinatorpedia.html][The Functor Combinatorpedia]]. ~ Justin Le. #Haskell #FunctionalProgramming
+ [[https://www.slideshare.net/ScottWlaschin/the-functional-programming-toolkit-ndc-oslo-2019-150648710][The functional programming toolkit]]. ~ Scott Wlaschin. #FunctionalProgramming
+ [[https://www.slideshare.net/ScottWlaschin/the-power-of-composition][The power of composition (for beginners in FP)]]. ~ Scott
  Wlaschin. #FunctionalProgramming #Fsharp
+ [[https://www.slideshare.net/ScottWlaschin/functional-design-patterns-devternity2018][Functional design patterns]]. ~ Scott Wlaschin. #FunctionalProgramming #Fsharp
+ [[https://levelup.gitconnected.com/implementing-recursion-with-the-y-combinator-in-any-language-9e83fa369ca][Implementing recursion with the Y combinator in any language]]. ~ Michele
  Riva. #LambdaCalculus #JavaScript #Haskell #Java #Racket #Python #C
+ [[https://github.com/CypherpunkArmory/UserLAnd][UserLAnd: The easiest way to run a Linux distribution or application on
  Android]]. #Linux #Android
+ [[https://alhassy.github.io/InteractiveWayToC/][An interactive way to C]]. ~ Musa Al-hassy. #Programming #C #Emacs #Org_mode
+ [[http://www.howardism.org/Technical/Emacs/eshell-present.html][Presenting the Eshell]]. ~ Howard Abrams. #Emacs
+ [[https://williamyaoh.com/posts/2019-05-27-string-interpolation-and-overlapping-instances.html][String interpolation and overlapping instances]]. ~ William Yao. #Haskell
  #FunctionalProgramming
+ [[https://vadosware.io/post/countmin-sketch-in-haskell/][Count-Min sketch in Haskell]]. ~ Victor Adossi. #Haskell #FunctionalProgramming
+ [[https://github.com/theindigamer/not-a-blog/blob/5ee43179fe4b148bd8c61680112b4e9e048481fc/opinionated-haskell-guide-2019.md][An opinionated beginner’s guide to Haskell in mid 2019]]. ~ Varun
  Gandhi. #Haskell #FunctionalProgramming
+ [[http://neilmitchell.blogspot.com/2019/04/foldr-under-hood.html][foldr under the hood]]. ~ Neil Mitchell. #Haskell #FunctionalProgramming
+ [[https://typeclasses.com/python/itertools-zipping][Transition to Haskell from Python: Zipping]]. ~ Chris Martin,
  Julie Moronuki. #Python #Haskell
+ [[http://www3.risc.jku.at/publications/download/risc_5930/Paper.pdf][Theorema-HOL: Classical Higher-Order Logic in Theorema]]. ~ A. Maletzky.  #ITP
  #TheoremaHOL
+ [[https://copilot-language.github.io/copilot_tutorial.pdf][An introduction to Copilot]]. ~ F. Dedden et als. #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1906.06805][Neural theorem provers do not learn rules without exploration]]. ~ M. de Jong,
  F. Sha.  #ATP #MachineLearning
+ [[https://www.isa-afp.org/entries/Linear_Inequalities.html][Linear inequalities in Isabelle/HOL]]. ~ R. Bottesch, A. Reynaud,
  R. Thiemann. #ITP #IsabelleHOL #Math
+ [[https://medium.com/@daltonjlundy/verifying-fold-using-monoids-in-coq-766e9eaa3893][Verifying fold using Monoids in Coq]]. ~ Dalton Lundy. #ITP #Coq
  #FunctionalProgramming
+ [[https://gvolpe.github.io/blog/lessons-learned-while-writing-a-haskell-app/][Lessons learned while writing a Haskell application]]. ~ G. Volpe. #Haskell
  #FunctionalProgramming
+ [[https://github.com/adjoint-io/galois-field#readme][An efficient implementation of Galois fields]]. ~ Stephen Diehl. #Haskell
  #FunctionalProgramming #Math
+ [[https://argumatronic.com/posts/2019-06-21-algebra-cheatsheet.html][A brief guide to a few algebraic structures]]. ~ Julie Moronuki. #Math #Haskell
  #FunctionalProgramming
+ [[http://www.philipzucker.com/why-i-as-of-june-22-2019-think-haskell-is-the-best-general-purpose-language-as-of-june-22-2019/][Why I (as of June 22 2019) think Haskell is the best general purpose language
  (as of June 22 2019)]]. ~ Philip Zucker. #Haskell
  #FunctionalProgramming
+ [[http://hiphish.github.io/blog/2019/06/22/what-is-a-programmable-programming-language/][What is a programmable programming language? ~ A]]. Sanchez. #Programming #Lisp
+ [[https://mauriciotejada.com/introduccion-a-la-programacion-en-julia/][Introducción a la programación en Julia]]. ~ Mauricio M. Tejada. #JuliaLang
+ [[https://phys.org/news/2019-06-mathematical-proof-isnt-intellectual.html][A mathematical proof isn't just an intellectual exercise]]. ~ D. Holland. #Math
+ [[http://theconversation.com/en-busca-de-una-nueva-definicion-para-la-inteligencia-de-las-maquinas-118742][En busca de una nueva definición para la inteligencia de las máquinas]]. ~ Luis
  Ignacio Hojas Hojas. #IA
+ [[https://www.isa-afp.org/entries/Differential_Game_Logic.html][Differential game logic in Isabelle/HOL]]. ~ André Platzer. #ITP #IsabelleHOL
+ [[https://mmhaskell.com/blog/2019/6/24/taking-a-shortcut][Taking a shortcut!]] ~ James Bowen. #Haskell #FunctionalProgramming
+ [[https://jonathanabennett.github.io/blog/2019/06/20/python-and-emacs-pt.-1/][Python and Emacs Pt]]. 1. ~ Jonathan Bennett. #Emacs #Python
+ [[https://arxiv.org/abs/1906.08084][LiFtEr: Language to encode induction heuristics for Isabelle/HOL]]. ~
  Y. Nagashima. #ITP #IsabelleHOL
+ [[http://adam.chlipala.net/theses/cshao.pdf][A framework for specifying and formally verifying application security
  policies]]. ~ C. Shao. #Msc_Thesis #ITP #Coq
+ [[http://mizar.org/fm/fm27-2/field_1.pdf][On roots of polynomials over F(X)/<p>]]. ~ C. Schwarzweller. #ITP #Mizar #Math
+ [[https://blog.sigplan.org/2019/06/24/ai-safety-as-a-pl-problem/][AI safety as a PL problem]]. ~ Swarat Chaudhuri. #AI #FormalVerification
  #MachineLearning
+ [[https://typeclasses.com/python/data-classes][Transition to Haskell from Python: Data classes]]. ~ Chris Martin
 , Julie Moronuki. #Python #Haskell
+ [[https://reasonablypolymorphic.com/blog/typeholes/index.html][Implement with types, not your brain!]] #Haskell #FunctionalProgramming
+ [[http://dc.sigedep.exactas.uba.ar/media/academic/grade/thesis/tesis-gonzalez-final.pdf][Evaluación de implementaciones alternativas de colas concurrentes en Haskell]]. 
  ~ T.A: González. #Haskell
+ [[http://www.cs.nott.ac.uk/~pszgmh/clairvoyant.pdf][Call-by-need is clairvoyant call-by-value]]. ~ J. Hackett,
  G. Hutton. #FunctionalProgramming
+ [[https://alhassy.github.io/ElispCheatSheet][Elisp reference sheet (Quick reference to the core language of Emacs)]]. ~ Musa
  Al-hassy. #Programminf #Lisp #Elisp #Emacs
+ [[https://proofcraft.org/blog/isabelle-style.html][Gerwin's style guide for Isabelle/HOL. Part 1: Good proofs]]. ~ Gerwin
  Klein. #ITP #IsabelleHOL
+ [[https://proofcraft.org/blog/isabelle-style-part2.html][Gerwin's style guide for Isabelle/HOL. Part 2: Good style]]. ~ Gerwin
  Klein. #ITP #IsabelleHOL
+ [[http://www.cse.unsw.edu.au/~cs4161/18s2/lect.html][Course: Advanced topics in software verification]]. ~ Gerwin Klein, June
  Andronick, Christine Rizkallah, Miki Tanaka. #ITP #IsabelleHOL
+ [[https://www.tweag.io/posts/2019-06-27-cpp-considered-harmful.html][CPP considered harmful]]. ~ Mathieu Boespflug. #Haskell #FunctionalProgramming
+ [[https://medium.com/@erights/the-tragedy-of-the-common-lisp-why-large-languages-explode-4e83096239b9][The tragedy of the Common Lisp: Why large languages explode]]. ~ Mark
  Miller. #Programming
+ [[http://news.mit.edu/2019/toward-artificial-intelligence-that-learns-to-write-code-0614][Toward artificial intelligence that learns to write code]]. ~
  K. Martineau. #Programming #AI #DeepLearning
+ [[https://arxiv.org/abs/1902.06349.pdf][Learning to infer program sketches]]. ~ M. Nye et als. #Programming #AI
  #DeepLearning
+ [[https://www.tfp2019.org/resources/tfp2019-how-to-specify-it.pdf][How to specify it! (A guide to writing properties of pure functions)]]. ~ John
  Hughes.  #Haskell #FunctionalProgramming
+ [[https://dl.acm.org/citation.cfm?id=3314221.3314642][Gen: A general-purpose probabilistic programming system with programmable
  inference]]. ~ M.F. Cusumano-Towner et als. #AI #JuliaLang
+ [[https://www.isa-afp.org/entries/Priority_Search_Trees.html][Priority search trees im Isabelle/HOL]]. ~ P. Lammich, T. Nipkow. #ITP
  #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Prim_Dijkstra_Simple.html][Purely functional, simple, and efficient implementation of Prim and Dijkstra
  in Isabelle/HOL]]. ~ P. Lammich, T. Nipkow. #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Complete_Non_Orders.html][Complete non-orders and fixed points in Isabelle/HOL]]. ~ A. Yamada, and
  J. Dubut. #ITP #IsabelleHOL
+ [[http://www.andrew.cmu.edu/user/avigad/Papers/method.pdf][Mathematical method and proof]]. ~ Jeremy Avigad. #ITP #IsabelleHOL #Logic #Math
+ [[https://typeclasses.com/art/juliaset][A Julia set generator]]. ~ Chris
  Martin, Julie Moronuki. #Haskell #FunctionalProgramming

* Julio 2019
+ [[http://bit.ly/2ZZwFJp][Bar-Hillel theorem mechanization in Coq]]. ~ S. Bozhko, L. Khatbullina,
  S.Grigorev. #ITP #Coq
+ [[https://mybinder.org/v2/gh/jamesdbrock/learn-you-a-haskell-notebook/master?urlpath=lab/tree/learn_you_a_haskell/00-preface.ipynb][Jupyter adaptation of "Learn you a Haskell for great good!"]] ~ James
  Brock. #Haskell #FunctionalProgramming #Jupyter
+ [[http://www.cs.nott.ac.uk/~pszgmh/fowler.pdf][Property-based testing]]. ~ J. Fowler. #PhD_Thesis #Haskell
  #FunctionalProgramming
+ [[https://hcommons.org/deposits/download/hc:24984/CONTENT/util.pdf][An introduction to computer science research: selected papers with
  commentary]]. ~ Camille Akmut. #CompSci
+ [[http://www.chargueraud.org/research/2019/cycle_detect/cycle_detect.pdf][Formal proof and analysis of an incremental cycle detection algorithm]]. ~
  A. Guéneau, J.H. Jourdan, A. Charguéraud, F. Pottier. #ITP #Coq
+ [[https://www.ssrg.ece.vt.edu/papers/safecomp19.pdf][Formal verification of memory preservation of x86-64 binaries]]. ~
  J.A. Bockenek, F. Verbeek, P. Lammich, B. Ravindran. #ITP #IsabelleHOL
+ [[https://mmhaskell.com/blog/2019/7/1/gloss-review][Monday Morning Haskell: Gloss review!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://blog.sigplan.org/2019/07/01/secure-compilation][Secure compilation]]. ~ C. Hritcu et als. #Programming
+ [[https://arxiv.org/abs/1907.00205][The Ramanujan machine: Automatically generated conjectures on fundamental
  constants]]. ~ G. Raayoni et als. #MachineLearning #Math
+ [[https://arxiv.org/abs/1904.02809][Proving tree algorithms for succinct data structures]]. ~ R. Affeldt,
  J. Garrigue, X. Qi, K. Tanaka. #ITP #Coq
+ [[https://arxiv.org/abs/1907.01449][Formalizing the solution to the cap set problem]]. ~ S.R. Dahmen, J. Hölzl,
  R.Y. Lewis. #ITP #LeanProver
+ [[http://www.cs.bham.ac.uk/~mhe/agda-new/index.html][Various new theorems in constructive univalent mathematics written in Agda]]. ~
  Martin Escardo. #ITP #Agda #Math 
+ [[https://arxiv.org/abs/1906.11718v1][On solving word equations using SAT]]. ~ Joel D. Day et als. #ATP #SAT
+ [[https://chshersh.github.io/type-errors][A story told by type errors]]. ~ Dmitrii Kovanikov. #Haskell
  #FunctionalProgramming
+ [[http://penkovsky.com/categories/10-days-of-grad][10 days of neural networks in Haskell]]. Bogdan Penkovsky. #Haskell
  #FunctionalProgramming #NeuralNetworks
+ [[https://youtu.be/Nvw74z8uQVU][A taste of type theory]]. ~ Bartosz Milewski. #TypeTheory
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1907.01297][Neural network verification for the masses (of AI graduates)]]. ~
  E. Komendantskaya et als. #AI #Verification #ITP #Coq #ATP #SMT #Z3
  #NeuralNetworks
+ [[https://www.isa-afp.org/entries/MFOTL_Monitor.html][Formalization of a monitoring algorithm for metric first-order temporal
  logic]]. ~ J. Schneider, D. Traytel. #ITP #IsabelleHOL #Logic
+ [[https://competition.isabelle.systems/competitions/contest/11/][Proving for Fun: July 2019]]. #ITP #IsabelleHOL #Coq
+ [[http://mat.unb.br/~ayala/RiceThFormalization.pdf][Formalization of Rice's theorem over a functional language model]]. ~
  T.M.F. Ramos, A.A- Almeida, M. Ayala-Rincón. #ITP #PVS
+ [[http://www.cs.nott.ac.uk/~pszgmh/improving.pdf][Improving Haskell]]. ~ M.A.T. Handley, G. Hutton. #Haskell
  #FunctionalProgramming
+ [[https://byorgey.wordpress.com/2019/07/05/lightweight-invertible-enumerations-in-haskell/][Lightweight invertible enumerations in Haskell]]. ~ Brent Yorgey. #Haskell
  #FunctionalProgramming
+ [[http://www.cs.ox.ac.uk/publications/publication12590-abstract.html][Coding with asymmetric numeral systems]]. ~ J. Gibbons. #Haskell
  #FunctionalProgramming
+ [[https://kseo.github.io/posts/2016-06-01-learn-haskell-to-be-a-better-programmer.html][Learn Haskell to be a better programmer]]. ~ Kwang Yul Seo. #Haskell
  #FunctionalProgramming
+ [[https://engineering.linecorp.com/en/blog/cutting-through-the-smog-making-an-air-quality-bot-with-haskell/][Cutting through the smog: making an air quality bot with Haskell]]. ~
  A. Moreno. #Haskell #FunctionalProgramming
+ [[https://cs-syd.eu/posts/2019-06-28-microsmos][Microsmos: Writing a simple tree-editor with brick]]. ~ Tom Sydney
  Kerckhove. #Haskell #FunctionalProgramming
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?TFPIE2018.6][Examples and results from a BSc-level course on domain specific languages of
  mathematics]]. ~ P. Jansson, S.H. Einarsdóttir, C. Ionescu. #Haskell
  #FunctionalProgramming #Math
+ [[https://dspace.library.uu.nl/bitstream/handle/1874/380853/thesis.pdf][Generic diffing and merging of mutually recursive datatypes in Haskell]]. ~
  A. van Putten. #Msc_Thesis #Haskell #FunctionalProgramming
+ [[https://blog.sigplan.org/2019/07/03/s-stands-for-shock-the-european-funders-proposal-for-open-access][S Stands for Shock: The European funders’ proposal for Open Access]]. ~ Jeremy
  Gibbons.
+ [[https://www.cs.princeton.edu/~appel/papers/funspec_sub.pdf][Abstraction and subsumption in modular verification of C programs]]. ~
  A.W. Appel, L. Beringer. #ITP #Coq
+ [[https://dataspace.princeton.edu/jspui/bitstream/88435/dsp010r9676504/1/Cao_princeton_0181D_12718.pdf][Separation-logic-based program verification in Coq]]. ~ Qinxiang
  Cao. #PhD_Thesis #ITP #Coq
+ [[https://xenaproject.wordpress.com/2019/07/06/a-computer-generated-proof-that-nobody-understands/][A computer-generated proof that nobody understands]]. ~ Kevin Buzzard. #ATP
  #Math
+ [[http://dev.stephendiehl.com/fun/][Write you a Haskell (Building a modern functional compiler from first
  principles)]]. ~ Stephen Diehl. #Haskell #FunctionalProgramming
+ [[https://github.com/JKTKops/Write-You-a-Haskell-2][A continuation of Stephen Diehl's "Write you a Haskell"]].  #Haskell
  #FunctionalProgramming
+ [[https://www.researchgate.net/publication/334190273_Lemma_Discovery_for_Induction_A_Survey][Lemma discovery for induction: A survey]]. ~ Moa Johansson. #Haskell
+ [[https://arxiv.org/abs/1907.02836][From LCF to Isabelle/HOL]]. ~ L.C. Paulson, T. Nipkow, M. Wenzel. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1907.02594][Domain-specific language to encode induction heuristics]]. ~ Yutaka
  Nagashima. #ITP #IsabelleHOL
+ [[https://mmhaskell.com/blog/2019/7/8/preparing-for-simulation-player-ai][Preparing for simulation: Player AI]]. ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://odone.io/posts/2019-07-08-scripting-in-haskell-and-purescript.html][Scripting in Haskell and PureScript]]. ~ Riccardo Odone. #Haskell #PureScript
+ [[https://essay.utwente.nl/78694/][A formal proof of the termination of Zielonka's algorithm for solving parity
  games]]. ~ R. Abraham. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1711.06542][Mechanizing Principia Logico-Metaphysica in functional type theory]]. ~
  D. Kirchner, C. Benzmüller, E.N. Zalta. #ITP #IsabelleHOL
+ [[https://colinzwanziger.com/wp-content/uploads/2019/06/Mathematics_of_Language_2019.pdf][Dependently-typed Montague semantics in the proof assistant Agda-flat]]. ~
  C. Zwanziger. #ITP #Agda
+ [[https://www.researchgate.net/publication/332786587_IO_Logic_in_HOL][I/O logic in HOL]]. ~ C. Benzmüller, A. Farjami, P. Meder, X. Parent. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1907.04408][SAT solvers and computer algebra systems: A powerful combination for
  mathematics]]. ~ C. Bright, I. Kotsireas, V. Ganesh. #SAT #CAS #Math
+ [[https://functor.tokyo/blog/2019-07-11-announcing-world-peace][Open Sum Types in Haskell with world-peace]]. ~ Dennis Gosnell (Dennis
  Gosnell). #Haskell #FunctionalProgramming
+ [[https://dkalemis.wordpress.com/2014/03/22/trees-as-monads/][Trees as monads]]. ~ Dimitrios Kalemis. #Haskell #FunctionalProgramming 
+ [[https://crypto.stanford.edu/~blynn/lambda/][Lambda calculus]]. ~ Ben Lynn. #LambdaCalculus #Haskell #FunctionalProgramming
+ [[https://www.jair.org/index.php/jair/article/view/11524][REBA: A refinement-based architecture for knowledge representation and
  reasoning in robotics]]. ~ M. Sridharan, M. Gelfond, S. Zhang, J. Wyatt. #AI
  #KRR #ASP
+ [[https://www.jair.org/index.php/jair/article/view/11529][Dependency learning for QBF]]. ~ T. Peitl, F. Slivovsky, S. Szeider. #AI
+ [[https://blog.sigplan.org/2019/07/09/my-first-fifteen-compilers/][My first fifteen compilers]]. ~ Lindsey Kuper. #Programming #Compilers #Nanopass
+ [[https://lars.hupel.info/pub/isabelle-cakeml.pdf][A verified compiler from Isabelle/HOL to CakeML]]. ~ L. Hupel, T. Nipkow. #ITP
  #Isabelle/HOL
+ [[https://mpickering.github.io/papers/multi-stage-programs-in-context.pdf][Multi stage programming in context]]. ~ M. Pickering, N. Wu, C. Kiss. #Haskell
  #FunctionalProgramming
+ [[https://mpickering.github.io/papers/working-with-source-plugins.pdf][Working with source plugins]]. ~ M. Pickering, N. Wu, B. Németh. #Haskell
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1907.04065][Trustworthy graph algorithms]]. ~ M. Abdulaziz, K. Mehlhorn, T. Nipkow. #ITP
  #IsabelleHOL
+ [[http://minikanren.org/workshop/2019/minikanren19-final5.pdf][Certified semantics for miniKanren]]. ~ D. Rozplokhas, A. Vyatkin,
  D. Boulytchev. #ITP #Coq
+ [[https://hal.inria.fr/hal-02176456/document][(Co) inductive proof systems for compositional proofs in reachability logic]]. ~ V. Rusu, D. Nowak. #ITP #IsabelleHOL #Coq
+ [[https://blog.sigplan.org/2019/07/12/gradual-typing-theory-practice/][Gradual typing from theory to practice]]. ~ Sam Tobin-Hochstadt. #Programming
+ [[http://essay.utwente.nl/78785/1/VriesDe_BA_EEMCS.pdf][Walker: Automated assessment of Haskell code using syntax tree analysis]]. ~
  R.H. de Vries. #Haskell #FunctionalProgramming
+ [[https://peerj.com/articles/7223/][BioShake: a Haskell EDSL for bioinformatics workflows]]. ~ J. Bedő. #Haskell
  #FunctionalProgramming
+ [[https://omelkonian.github.io/data/publications/music-grammars.pdf][Music as language (Putting probabilistic temporal graph grammars to good
  use)]]. ~ O. Melkonian #Haskell #FunctionalProgramming #Music
+ [[https://arxiv.org/abs/1907.04134][A bridge anchored on both sides: Formal deduction in introductory CS, and code
  proofs in discrete math]]. ~ D.G. Wonnacott, P.M. Osera. #Logic #Math #ITP #Coq
  #Haskell
+ [[https://www.cister.isep.ipp.pt/docs/experimental_evaluation_of_formal_software_development_using_dependently_typed_languages/1534/view.pdf][Experimental evaluation of formal software development using dependently typed
  languages]]. ~ F. Tamasi. #ITP #Coq #Agda
+ [[https://treszkai.github.io/2019/07/13/haskell-eval][Evaluation of function calls in Haskell]]. ~ Laszlo Treszkai. #Haskell
  #FunctionalProgramming
+ [[https://doisinkidney.com/pdfs/bsc-thesis.pdf][Automatically and efficiently illustrating polynomial equalities in Agda]]. ~
  Donnacha Oisín Kidney. #Bachelor_Thesis #ITP #Agda
+ [[https://medium.com/@cdsmithus/building-and-debugging-frp-with-codeworld-and-reflex-a912083e66c1][Building and debugging FRP with CodeWorld and Reflex]]. ~ Chris Smith. #Haskell
  #CodeWorld
+ [[https://gist.github.com/javierdaza/4258b74e2eb7cfd4f55286061b592f37][El zen de Python: Explicado y con ejemplos]]. ~ Javier Daza. 
  #Programación #Python
+ [[https://medium.com/@Pythonidaer/a-brief-analysis-of-the-zen-of-python-2bfd3b76edbf][A brief analysis of “The zen of Python”]]. ~ Jonathan Hammond
  #Programming #Python
+ [[https://dl.acm.org/citation.cfm?id=3322004][Genetic algorithms as shrinkers in property-based testing]]. ~ F.Y. Lo,
  C.H. Chen, Y. Chen. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/10816/pdf/LIPIcs-ECOOP-2019-24.pdf][Julia's efficient algorithm for subtyping unions and covariant tuples]]. ~ B
  Chung, F. Zappa Nardelli, J. Vitek. #ITP #Coq #JuliaLang
+ [[https://www.cs.princeton.edu/~appel/papers/safe-closure.pdf][Closure conversion is safe for space]]. ~ Z. Paraskevopoulou, A.W. Appel. #ITP
  #Coq
+ [[https://mmhaskell.com/blog/2019/7/15/advanced-search-with-drilling][Advanced search with drilling!]] ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[https://write.as/dani/writing-a-phd-thesis-with-org-mode][Writing a PhD thesis with Org Mode]]. ~ Daniel Gomez. #Emacs #Org_mode
+ [[https://github.com/dangom/org-thesis][Writing a Ph.D. thesis with Org Mode (emplate repository)]]. ~ Daniel
  Gomez. #Emacs #Org_mode
+ [[http://joostkremers.github.io/ebib][ebib: A BibTeX database manager for Emacs]]. #Emacs #LaTeX
+ [[https://rjlipton.wordpress.com/2019/07/16/summer-reading-in-theory/][Summer reading in theory]]. R.J. Lipton, K.W. Regan. #CompSci
+ [[https://www.tweag.io/posts/2019-07-17-codestatistics.html][Revelations from repetition: Source code headers in Haskell and Python]]. ~
  S. Carstens, M. Meschede. #Haskell #Python
+ [[https://www.gaussianos.com/una-interesante-introduccion-a-la-logica-difusa][Una interesante introducción a la lógica difusa]]. ~ Carlos Bejines. #Lógica
  #Matemáticas
+ [[https://www.isa-afp.org/entries/FOL_Seq_Calc1.html][A sequent calculus for first-order logic in Isabelle/HOL]]. ~ Andreas Halkjær
  From. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1907.07885][Formal verification of trading in financial markets]]. #ITP #Coq 
+ [[https://ro-che.info/articles/2019-07-19-decompose-contt][Decompose ContT]]. ~ Roman Cheplyaka. #Haskell #FunctionalProgramming
+ [[https://serokell.io/blog/dimensions-haskell-singletons][Dimensions and Haskell: Singletons in action]]. ~ R. Stryungis,
  D. Rogozin. #Haskell #FunctionalProgramming
+ [[https://towardsdatascience.com/elements-of-functional-programming-in-python-1b295ea5bbe0][Elements of functional programming in Python]]. ~ Parul Pandey. #Python
  #FunctionalProgramming
+ [[http://eprints.whiterose.ac.uk/148557/1/UTP2019.pdf][Hybrid relations in Isabelle/UTP]]. ~ S.D. Foster. #ITP #IsabelleHOL
+ [[http://lcs.ios.ac.cn/~znj/papers/CAV2019b.pdf][Formal verification of quantum algorithms using quantum Hoare logic]]. ~ J. Liu
  et als. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1907.05523][Towards a verified model of the Algorand consensus protocol in Coq]]. ~
  M.A. Alturki, J. Chen, V. Luchangco, B. Moore. #ITP #Coq
+ [[http://www.mat.unb.br/ayala/C_NominalUnif_PVS.pdf][A certified functional nominal C-unification]]. ~ M. Ayala-Rincón et als. #ITP
  #PVS
+ [[http://www.staff.science.uu.nl/~swier004/publications/2019-icfp-tim.pdf][A predicate transformer semantics for effects (Functional pearl)]]. ~
  W. Swierstra, T. Baanen. #ITP #Agda
+ [[https://richarde.dev/papers/2019/kind-inference/kind-inference.pdf][Kind inference for datatypes]]. ~ N. Xie, R.A. Eisenberg,
  B.C.D.S. Oliveira. #Haskell #FunctionalProgramming
+ [[http://www.staff.science.uu.nl/~swier004/publications/2019-tyde-cas.pdf][Generic enumerators]]. ~ C. van der Rest, W. Swierstra, M. Chakravarty. #Haskell
  #FunctionalProgramming
+ [[http://www.vex.net/~trebla/haskell/IO.xhtml][Haskell I/O tutorial]]. ~ Albert Y. C. Lai. #Haskell #FunctionalProgramming 
+ [[https://stackabuse.com/mathematical-proof-of-algorithm-correctness-and-efficiency/][Mathematical proof of algorithm correctness and efficiency]]. ~ Vladimir
  Batoćanin. #CompSci #Algorithms
+ [[https://ro-che.info/articles/2019-07-22-associativity-of-fmap][A curious associativity of the <$> operator]]. ~ Roman Cheplyaka. #Haskell
  #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/7/22/analyzing-our-parameters][Analyzing our parameters]]. ~ James Bowen #Haskell #FunctionalProgramming
+ [[https://kowainik.github.io/posts/membrain][Insane in the Membrain]]. ~ Veronika Romashkina. #Haskell #FunctionalProgramming
+ [[http://homepage.divms.uiowa.edu/~astump/cedille/lola19.pdf][Rediscovering constructive type theory with Cedille]]. ~ Aaron Stump. #Haskell
  #Cedille 
+ [[https://cacm.acm.org/careers/238281-making-it-easier-to-program-and-protect-the-web/fulltext][Making it easier to program and protect the Web]]. #CompSci
+ [[http://lisp-univ-etc.blogspot.com/2019/07/programming-algorithms-book.html]["Programming Algorithms" Book]]. ~ Vsevolod Dyomkin. #Programming #Lisp
  #Algorithms
+ [[https://www.marsja.se/how-to-use-binder-python-for-reproducible-research/][How to use Binder and Python for reproducible research]]. ~ Erik Marsja. #Binder
  #Docker #Jupyter #Python
+ [[https://arxiv.org/abs/1907.07794][Generating correctness proofs with neural networks]]. ~ A. Sanchez-Stern et
  als. #ITP #NeuralNetworks
+ [[https://arxiv.org/abs/1907.10674][Towards a smart contract verification framework in Coq]]. ~ D. Annenkov,
  B. Spitters. #ITP #Coq
+ [[https://dev.to/riccardoodone/building-a-blog-in-haskell-with-yesod-using-a-database-41ip][Building a blog in Haskell with Yesod–using a database]]. ~ R. Odone. #Haskell
  #FunctionalProgramming
+ [[https://dev.to/erwald/euclidean-rhythms-and-haskell-5ecj][Euclidean rhythms and Haskell]]. ~ Erich Grunewald. #Haskell
  #FunctionalProgramming
+ [[https://github.com/bollu/blaze/blob/75c4ab5c17bda3b751f0d328b19064a2ce1eccfe/notebooks/tutorial.ipynb][A weekend replication of STOKE, a stochastic superoptimiser]]. #Haskell
  #FunctionalProgramming
+ [[https://github.com/hadolint/hadolint][Haskell Dockerfile linter: A smarter Dockerfile linter that helps you build
  best practice Docker images]]. #Docker #Haskell #FunctionalProgramming
+ [[https://queuea9.wordpress.com/2019/07/25/in-praise-of-strong-fp/][In praise of strong FP]]. ~ Aaron Stump. #FunctionalProgramming
+ [[https://github.com/Bodigrim/poly][Fast polynomial arithmetic in Haskell]]. #Haskell #FunctionalProgramming
+ [[https://www.theatlantic.com/magazine/archive/2019/08/henry-kissinger-the-metamorphosis-ai/592771/][The AI metamorphosis]]. ~ Henry A. Kissinger, Eric Schmidt, Daniel
  Huttenlocher. #AI
+ [[https://www.lemonde.fr/blog/binaire/2019/07/26/demonstrations-mathematiques-et-programmes-informatiques/][Langages des maths, langages de l’informatique]]. #Math #CompSi
+ [[https://www.quantamagazine.org/mathematician-solves-computer-science-conjecture-in-two-pages-20190725/][Decades-old computer science conjecture solved in two pages]]. ~ Erica
  Klarreich. #Math #CompSci
+ [[https://www.irif.fr/~sozeau/research/publications/drafts/Coq_Coq_Codet.pdf][Coq Coq Codet! (Towards a Verified Toolchain for Coq in MetaCoq)]]. ~ M. Sozeau
  et als. #ITP #Coq
+ [[https://www.degruyter.com/downloadpdf/j/forma.2019.27.issue-2/forma-2019-0020/forma-2019-0020.xml][Formalization of the MRDP theorem in the Mizar system]]. ~ K. Pąk. #ITP #Mizar
  #Math
+ [[https://www.degruyter.com/view/j/forma.2019.27.issue-2/forma-2019-0017/forma-2019-0017.xml][Partial correctness of a factorial algorithm]]. ~ A. Jaszczak,
  A. Korniłowicz. #ITP #Mizar
+ [[https://www.degruyter.com/downloadpdf/j/forma.2019.27.issue-2/forma-2019-0015/forma-2019-0015.xml][Natural addition of ordinals]]. ~ S. Koch. #ITP #Mizar #Math
+ [[https://cris.vub.be/files/46086326/paper.pdf][Modular effects in Haskell through effect polymorphism and explicit dictionary
  applications]]. ~ D. Devriese. #Haskell #FunctionalProgramming
+ [[http://www.cs.ox.ac.uk/ACT2019/preproceedings/Genovese%2520Gryzlov%2520Herold%2520Knispel%2520Perone%2520Post%2520and%2520Videla.pdf][idris-ct: A library to do category theory in Idris]]. ~ F. Genovese et
  als.. #Idris #CategoryTheory
+ [[https://www.isa-afp.org/entries/Szpilrajn.html][Szpilrajn extension theorem in Isabelle/HOL]]. ~ P. Zeller. #ITP #IsabelleHOL
  #Math
+ [[https://observablehq.com/@bryangingechen/fibonacci-formalized-1-some-sums][Fibonacci formalized 1: some sums]]. ~ Bryan Gin-ge Chen. #ITP #LeanProver #Math
+ [[http://www.timphilipwilliams.com/posts/2019-07-25-minecraft.html][Generating castles for Minecraft using Haskell]]. ~ Tim Philip
  Williams. #Haskell #FunctionalProgramming
+ [[https://cs-syd.eu/posts/2019-07-28-cursors-forest][Cursors, part 6: The forest cursor]]. ~ Tom Sydney Kerckhove. #Haskell
  #FunctionalProgramming
+ [[https://summer.haskell.org/news/2019-07-26-testing-bipartiteness.html][Testing bipartiteness with monad transformers]]. ~ Vasily Alferov. #Haskell
  #FunctionalProgramming
+ [[https://medium.com/@cdsmithus/solving-a-puzzle-in-haskell-8216a683555][Solving a puzzle in Haskell]]. ~ Chris Smith. #Haskell #FunctionalProgramming
  #CodeWorld
+ [[https://kodimensional.dev/recordwildcards][The power of RecordWildCards]]. ~ Dmitrii Kovanikov. #Haskell
  #FunctionalProgramming
+ [[http://lisp-univ-etc.blogspot.com/2019/07/crash-course-in-lisp.html][Programming algorithms: A crash course in Lisp]]. ~ Vsevolod
  Dyomkin. #CommonLisp
+ [[https://dspace.library.uu.nl/bitstream/handle/1874/382131/thesis.pdf][Formalizing extended UTxO and BitML calculus in Agda]]. ~ O Melkonian. #ITP
  #Agda
+ [[https://arxiv.org/abs/1907.11501][Extensional higher-order paramodulation in Leo-III]]. ~ A. Steen,
  C. Benzmüller. #ITP #Leo_III
+ [[https://www.manning.com/books/functional-programming-in-scala][Functional programming in Scala]]. ~ P. Chiusano, R. Bjarnason. #eBook
  #FunctionalProgramming #Scala
+ [[https://arxiv.org/abs/1803.06494][Attack trees in Isabelle]]. ~ F. Kammüller. #ITP #IsabelleHOL
+ [[https://typeclasses.com/news/2019-07-phrasebook][Introducing the Haskell Phrasebook]]. ~ Chris Martin. #Haskell
  #FunctionalProgramming
+ [[https://typeclasses.com/phrasebook][The Haskell Phrasebook]]. ~ Chris Martin, Julie Moronuki. #Haskell
  #FunctionalProgramming
+ [[https://bor0.wordpress.com/2019/07/30/arithmetic-on-algebraic-data-types/][Arithmetic on algebraic data types]]. ~ Boro Sitnikovski. #Haskell
  #FunctionalProgramming #Math
+ [[https://www.nature.com/articles/d41586-019-02310-3][Julia: come for the syntax, stay for the speed]]. ~ J.M. Perkel. #Programming
  #JuliaLang
+ [[http://revue.sesamath.net/spip.php?article1248][Les algorithmes du nouveau lycée technologique, en Python]]. ~ Alain
  Busser. #Programming #Python

* Agosto 2019
+ [[https://www.isa-afp.org/entries/TESL_Language.html][A formal development of a polychronous polytimed coordination language]]. ~
  H. Nguyen Van, F. Boulanger, B. Wolff. #ITP #IsabelleHOL
+ [[http://www.tyconmismatch.com/papers/itp2019_ll1.pdf][A verified LL(1) parser generator]]. ~ S. Lasser et als. #ITP #Coq
+ [[https://www-ps.informatik.uni-kiel.de/~sad/haskell2019-preprint.pdf][Verifying effectful Haskell programs in Coq]]. ~ J. Christiansen, S. Dylus,
  N. Bunkenburg. #ITP #Coq #Haskell
+ [[https://chrisdone.com/posts/clientside-programming-haskell/][Client-side web programming in Haskell: A retrospective]] ~ Chris Done. #Haskell
  #FunctionalProgramming
+ [[https://www.ahri.net/2019/07/practical-event-driven-and-sourced-programs-in-haskell/][Practical event driven & sourced programs in Haskell]]. ~ Adam Piper. #Haskell
  #FunctionalProgramming
+ [[https://serokell.io/blog/haskell-love-story][Haskell: A functional love story]]. ~ Ilya Peresadin. #Haskell
  #FunctionalProgramming
+ [[https://ocharles.org.uk/blog/posts/2018-12-25-fast-downward.html][Solving planning problems with Fast Downward and Haskell]]. ~ Ollie
  Charles. #Haskell #AI
+ [[https://www.tweag.io/posts/2019-08-01-codestatistics-umap.html][Code line patterns: Creating maps of Stackage and PyPi]]. ~ Simeon Carstens,
  Matthias Meschede. #Haskell #Python
+ [[https://elpais.com/elpais/2019/07/29/ciencia/1564394653_192603.html][Los intereses comerciales marcan el futuro de la inteligencia artificial]]. ~
  Javier Salas. #IA
+ [[https://xenaproject.wordpress.com/2019/08/01/imo-2019-q1/][IMO 2019 Q1]]. ~ Kevin Buzzard. #ITP #LeanProver #Math
+ [[https://well-typed.com/blog/2019/08/exploring-cloud-builds-in-hadrian/][Exploring cloud builds in Hadrian]]. ~ David Eichmann. #Haskell
+ [[https://blog.sigplan.org/2019/07/31/program-synthesis-in-2019/][Program synthesis in 2019]]. ~ James Bornholt. #ProgramSynthesis
  #FormalVerification #ATP
+ [[https://dorchard.blog/2019/08/02/considering-the-order-of-results-when-computing-cartesian-product-short/][Considering the order of results when computing Cartesian product]]. ~ Dominic
  Orchard. #Haskell #FunctionalProgramming
+ [[https://www.researchgate.net/profile/Angeliki_Koutsoukou-Argyraki/publication/334549483_FORMALISING_MATHEMATICS_-IN_PRAXIS_A_MATHEMATICIAN%27S_VERY_FIRST_EXPERIENCES_WITH_ISABELLEHOL/links/5d30f782299bf1547cc25f63/FORMALISING-MATHEMATICS-IN-PRAXIS-A-MATHEMATICIANS-VERY-FIRST-EXPERIENCES-WITH-ISABELLE-HOL.pdf][Formalising Mathematics-in praxis; A mathematician's very first experiences
  with Isabelle/HOL]]. ~ A. Koutsoukou-Argyraki. #ITP #IsabelleHOL #Math
+ [[https://www.ps.uni-saarland.de/Publications/documents/Schaefer_2019_Engineering.pdf][Engineering formal systems in constructive type theory]]. ~
  S. Chafar. #PhD_Thesis #ITP #Coq
+ [[https://arxiv.org/abs/1907.11354][Lazy stream programming in Prolog]]. ~ P- Tarau, J. Wielemaker,
  T. Schrijvers. #Prolog #LogicProgramming
+ [[https://medium.com/permutive/optimized-docker-builds-for-haskell-76a9808eb10b][Optimized Docker builds for Haskell Stack]]. ~ Tim Spence. #Haskell #Docker
+ [[https://kth.diva-portal.org/smash/get/diva2:1338661/FULLTEXT01.pdf][Comparing verification of list functions in LiquidHaskell and Idris]]. ~
  A. Westerberg, G. Ung. #Haskell #LiquidHaskell #Idris #FunctionalProgramming
+ [[https://elpais.com/elpais/2019/08/01/ciencia/1564654546_001863.html][Dos debates sobre la inteligencia artificial]]. ~ Javier Sampedro. #IA
+ [[https://www.technologyreview.com/s/614057/china-squirrel-has-started-a-grand-experiment-in-ai-education-it-could-reshape-how-the/][China has started a grand experiment in AI education. It could reshape how the
  world learns]]. ~ Noah Sheldon. #AI #Education
+ [[https://dl.acm.org/citation.cfm?id=3341690][Equations reloaded (high-level dependently-typed functional programming and
  proving in Coq)]]. ~ M. Sozeau, C. Mangin. #ITP #Coq
+ [[https://dl.acm.org/citation.cfm?id=3341706][Higher-order type-level programming in Haskell]]. ~ C. Kiss, T. Field,
  S. Eisenbach, S. Peyton Jones. #Haskell #FunctionalProgramming
+ [[https://vaibhavsagar.com/blog/2019/07/04/functional-devops/index.html][Functional DevOps in a Dysfunctional World]]. ~ Vaibhav Sagar. #Haskell #Nix
+ [[https://coq.discourse.group/t/survey-of-category-theory-in-coq/371][Survey of category theory in Coq]]. #ITP #Coq #Math
+ [[https://www.cs.mcgill.ca/~dto4/projects/gsoc-02-acc.html][Using the Accelerate library to implement Chebyshev functions]]. #Haskell
  #FunctionalProgramming #Math
+ [[https://justtesting.org/post/186788963306/functional-blockchain-contracts][Functional Blockchain Contracts]]. ~ Manuel Chakravarty. #Haskell #Blockchain
+ [[https://blog.frankel.ch/exercises-programming-style/13/][Exercises in programming style: FP & I/O]]. ~ Nicolas Fränkel. #Programming
+ [[http://lisp-univ-etc.blogspot.com/2019/08/programming-algorithms-data-structures.html][Programming algorithms: Data structures]]. ~ Vsevolod Dyomkin. #Programming
  #Lisp #Algorithms
+ [[https://www.birkey.co/2019-08-04-why-emacs.html][Why Emacs]]. ~ Kasim Tuman. #Emacs
+ [[http://bit.ly/31pCRLl][Selected problems from the International Mathematical Olympiad 2019 in
  Isabelle/HOL]]. ~ Manuel Eberl. #ITP #IsabelleHOL #Math
+ [[http://bit.ly/31mOfaZ][Moving towards ML: Evaluation functions]]. ~ James Bowen. #Haskell
  #FunctionalProgramming
+ [[http://bit.ly/2Kh2sk0][Building a better brain]]. ~ James Bowen. #Haskell #FunctionalProgramming
+ [[http://bit.ly/2M4YFIB][Communicating concurrent Kleene algebra for distributed systems
  specification]]. ~ Maxime Buyse. #AFP #ITP #IsabelleHOL #Math
+ [[http://bit.ly/2Kz8kE8][Verifying finality for Blockchain systems]]. ~ Karl Palmskog et als. #ITP #Coq
  #Blockchain
+ [[http://bit.ly/2KtZNCx][10 years seL4: Still the best, still getting better]]. ~ Gernot Heiser. #ITP
  #IsabelleHOL
+ [[http://bit.ly/2M78khY][A Haskell implementation of Conway's Game of Life, viewable on the console, no
  external libs]]. #Haskell #FunctionalProgramming
+ [[http://bit.ly/2KtVcQN][Formally justified and modular Bayesian inference for probabilistic
  programs]]. ~ Adam Michał Ścibior. #PhD_Thesis #Haskell #FunctionalProgramming
+ [[http://bit.ly/2M4ZG3k][Una implementación en Haskell de un lenguaje funcional no determinista]]. ~
  Manuel Velasco Suárez. #TFG #Haskell #FunctionalProgramming
+ [[http://bit.ly/2KzaxPW][A formally verified HOL algebra for dynamic reliability block diagrams]]. ~
  Y. Elderhalli, O. Hasan, S. Tahar. #ITP #HOL4
+ [[http://bit.ly/33c9Ft4][What does it mean for a program analysis to be sound?]] ~ Ilya Sergey. | SIGPLAN
  Blog #CompSci #Program_analysis
+ [[http://bit.ly/2ThrpyL][How Monoids are useful in programming?]] ~ @tsoding #Haskell
+ [[https://blog.jle.im/entry/simple-tcpip-services-servant.html][Dead-simple TCP/IP services using servant]]. ~ Justin Le. #Haskell #I1M2016
+ [[https://haskell-explained.gitlab.io/blog/posts/2019/07/31/polysemy-is-cool-part-2/index.html][Polysemy is fun! - Part 2]]. ~ Raghu Kaippully. #Haskell #FunctionalProgramming
+ [[http://bit.ly/2TdPPsS][The Ramanujan Machine: Automatically generated conjectures on fundamental
  constants]]. ~ Gal Raayoni et als. #MachineLearning #Math
+ [[http://www.ramanujanmachine.com][The Ramanujan Machine: Using algorithms to discover new mathematics]]. 
  #MachineLearning #Math
+ [[http://bit.ly/2Tekia7][Monte Carlo Tree Search in NetLogo]]. ~ F. Sancho. #NetLogo #IA 
+ [[https://dl.acm.org/citation.cfm?id=3341704][Dependently typed Haskell in industry (experience report)]]. ~ David Thrane
  Christiansen et als. #Haskell #FunctionalProgramming
+ [[https://thomashoneyman.com/articles/practical-profunctor-lenses-optics/][Practical profunctor lenses & optics in PureScript]]. ~ Thomas
  Honeyman. #PureScript
+ [[http://krin.gs/publication/nogatz-linter-iclp19/nogatz-linter-iclp19.pdf][Prolog coding guidelines: Status and tool support]]. ~ F. Nogatz, P. Körner,
  S. Krings. #Prolog #LogicProgramming
+ [[https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007007][Ten simple rules for writing and sharing computational analyses in Jupyter
  Notebooks]]. ~ A. Rule et als. #OpenScience #Jupyter
+ [[https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker][Building Haskell Apps with Docker]]. ~ Deni Bertovic . #Haskell #Docker
+ [[https://freecontent.manning.com/basic-text-processing-in-functional-style/][Basic text processing in functional style]]. ~ Vitaly Bragilevsky. #Haskell
  #FunctionalProgramming
+ [[http://bit.ly/2OPRNkR][Intro to Web Prolog for erlangers]]. ~ T. Lager #Prolog #LogicProgramming
+ [[https://odone.io/posts/2019-08-12-building-a-blog-in-haskell-with-yesod%E2%80%93returning-JSON.html][Building a blog in Haskell with Yesod–Returning JSON]]. ~ Riccardo Odone
  #Haskell
+ [[https://thorstenball.com/blog/2019/04/09/learn-more-programming-languages/][Learn more programming languages, even if you won't use them]]. ~ Thorsten Ball
  #Programming
+ [[http://lisp-univ-etc.blogspot.com/2019/08/programming-algorithms-arrays.html ~ Vsevolod Dyomkin.][Programming algorithms: Arrays]]. #Programming #CommonLisp
+ [[https://dash.harvard.edu/bitstream/handle/1/14226096/DICK-DISSERTATION-2015.pdf?sequence=6&isAllowed=y][After Math: (Re)configuring minds, proof, and computing in the postwar United
  States]]. ~ Stephanie Aleen Dick. #PhD_Thesis #ATP #Logic #Math
+ [[https://cris.vub.be/files/46086440/pearl.pdf][Pearl: How to do proofs? (Practically proving properties about effectful
  programs’ results)]]. ~ K. Jacobs, A. Nuyts, D. Devriese. #ITP #Agda
  #FunctionalProgramming
+ [[http://philsci-archive.pitt.edu/16326/][Deep Learning: A philosophical introduction]]. ~ C. Buckner. #DeepLearning
+ [[https://github.com/cdepillabout/pretty-simple ][pretty-simple: pretty-printer for Haskell data types that have a Show
  instance]]. ~ Dennis Gosnell. #Haskell #FunctionalProgramming
+ [[http://academic.udayton.edu/SaverioPerugini/papers/access/CSC2019/CSC2019Perugini.pdf][An introduction to declarative programming in CLIPS and Prolog]]. ~ J.L. Watkin,
  A.C. Volk, S. Perugini. #DeclarativeProgramming #CLIPS #Prolog
+ [[https://vaibhavsagar.com/blog/2019/08/11/ihaskell-nix-docker/][Easy IHaskell Docker images with Nix]]. ~ Vaibhav Sagar. #Haskell #Docker #Nix
+ [[https://blog.shaynefletcher.org/2019/08/partitions-of-set.html][Partitions of a set]]. Shayne Fletcher. #Haskell #FunctionalProgramming
+ [[https://boxbase.org/entries/2019/aug/12/explaining-lambda-calculus-to-developer/][Explaining lambda calculus to a front-end web developer]]. ~ Henri Tuhola
  #LambdaCalculus
+ [[https://www.isa-afp.org/entries/Laplace_Transform.html][Laplace transform in Isabelle/HOL]]. Fabian Immler. #ITP #IsabelleHOL #Math
+ [[https://download.atlantis-press.com/article/125914883.pdf][WordNet and Prolog: why not?]] ~ P. Julian-Iranzo, F. Saenz-Perez. #Prolog
  #LogicProgramming
+ [[https://samgrayson.me/2019-08-06-monads-as-a-programming-pattern/][Monads as a programming pattern]]. ~ Samuel Grayson. #Programming
  #Monads
+ [[http://mightybyte.github.io/monad-challenges][The monad challenges (A set of challenges for jump starting your understanding
  of monads)]]. ~ Doug Beardsley. #Haskell #Monads
+ [[http://mightybyte.net/purity-types-monads/purity-types-monads.html][Coding and reasoning with purity, strong types, and monads]]. ~ Doug Beardsley
  (mightybyte). #Haskell #Monads
+ [[https://kowainik.github.io/posts/2018-06-21-haskell-build-tools][Haskell: Build tools]]. ~ Kowainik. #Haskell #Cabal #Stack
+ [[https://www.snoyman.com/blog/2019/08/haskell-kata-with-try-file-lock][Haskell kata: withTryFileLock]]. ~ M. Snoyman. #Haskell #FunctionalProgramming
+ [[http://www.morgenthum.tech/articles/write-haskell-game][How to write a game in Haskell from scratch]]. ~ Mario Morgenthum. #Haskell
  #Game
+ [[https://typeclasses.com/python][Transition to Haskell from Python]]. ~ Chris Martin, Julie Moronuki. #Python
  #Haskell
+ [[https://github.com/rudymatela/express][Dynamically-typed Haskell expressions involving applications and variables]]. ~
  Rudy Matela. #Haskell #FunctionalProgramming
+ [[https://github.com/Ebanflo42/Persistence][A topological data analysis library for Haskell]]. ~ Eben Kadile. #Haskell
  #FunctionalProgramming #Math #Topology
+ [[https://github.com/cdepillabout/pretty-simple][Pretty-printer for Haskell data types that have a Show instance]]. ~ Dennis
  Gosnell. #Haskell #FunctionalProgramming
+ [[https://www.isa-afp.org/entries/Adaptive_State_Counting.html][Formalisation of an adaptive state counting algorithm in Isabelle/HOL]]. ~
  Robert Sachtleben. #ITP #IsabelleHOL
+ [[https://github.com/emina/rosette][Rosette: a solver-aided programming language that extends Racket with language
  constructs for program synthesis, verification, and more]]. ~ Emina
  Torlak. #Programming #Racket #Rosette #DSL #SAT #SMT
+ [[https://github.com/devonhollowood/search-algorithms][Haskell library containing common graph search algorithms]]. ~ Devon
  Hollowood. #Haskell #FunctionalProgramming #Algorithms
+ [[https://infoscience.epfl.ch/record/268824][Verified functional programming]]. ~ N. Voirol. #PhD_Thesis
  #FunctionalProgramming #Scala
+ [[https://content.sciendo.com/view/journals/forma/27/2/article-p133.xml][On monomorphisms and subfields]]. ~ C. Schwarzweller. #ITP #Mizar #Math
+ [[https://arxiv.org/abs/1908.05294][Undecidability of D_< and its decidable fragments]]. ~ J. Hu, O. Lhoták. #ITP
  #Agda
+ [[https://hustmphrrr.github.io/blog/2019/compare-dots.html][Comparison between different definitions of Dependent Object Types (DOTs)]]. ~
  J. Hu. #ITP #Agda
+ [[https://blog.toggl.com/programming-languages-explained-with-music-comic/][Programming languages explained with music]]. ~ Emma Murray. #Programming 
+ [[https://github.com/farliz/emacs-academia][Una serie de videos que te mostrarán de forma práctica y simple, cómo utilizar
  Emacs para la producción de documentos académicos]]. #Emacs
+ [[https://arxiv.org/abs/1802.08437][Abstract completion, formalized]]. ~ N. Hirokawa et als. #ITP #IsabelleHOL
+ [[http://pxtp.gforge.inria.fr/2019/papers/PxTP_2019_paper_5.pdf][Verifying bit-vector invertibility conditions in Coq]]. ~ B. Ekici et als. #ITP
  #Coq
+ [[http://math.andrej.com/2019/08/21/derivations-as-computations/][Derivations as computations]]. ~ Andrej Bauer. #ITP #Andromeda
+ [[https://github.com/Andromedans/andromeda][Andromeda: A minimalist implementation of type theory, suitable for
  experimentation]]. ~ Andrej Bauer #ITP #Andromeda
+ [[http://www.stochasticlifestyle.com/the-essential-tools-of-scientific-machine-learning-scientific-ml/][The essential tools of Scientific Machine Learning (Scientific ML)]]. ~
  Christopher Rackauckas. #MachineLearning #JuliaLang
+ [[https://www.microsiervos.com/archivo/ordenadores/historia-desarrollo-software-logica-lenguajes-codigo.html][La historia del desarrollo de software en dos minutos: un siglo de lógica,
  lenguajes y código]]. ~ @Alvy #Programación #Historia
+ [[https://blog.acolyer.org/2019/08/23/learning-to-prove-theorems-via-interacting-with-proof-assistants/][Learning to prove theorems via interacting with proof assistants]]. ~ Adrian
  Colyer. #ITP #MachineLearning
+ [[https://alhassy.github.io/TypedLisp/][Typed Lisp, a primer]]. ~ Musa Al-hassy. #Lisp #Haskell #FunctionalProgramming
+ [[https://github.com/srid/rib][Rib: a Haskell library for writing your own static site generator]]. ~ Sridhar
  Ratnakumar. #Haskell #FunctionalProgramming
+ [[https://blog.sigplan.org/2019/08/22/from-programs-to-deep-models-part-1/][From programs to deep models (Part 1)]]. ~ Eran Yahav. #Programming
  #MachineLearning
+ [[https://serokell.io/blog/haskell-history][Haskell. History of a community-powered language]]. ~ Denis Oleynikov, Gints
  Dreimanis. #Haskell #FunctionalProgramming #History
+ [[https://github.com/jagajaga/FP-Course-ITMO][Haskell ITMO course at CTD]]. ~ Dmitry Kovanikov, Arseniy Seroka. #Haskell
  #FunctionalProgramming
+ [[https://github.com/haskell/rfcs][Haskel': Discussion about proposed changes to the Haskell programming
  language]]. #Haskell #FunctionalProgramming
+ [[https://chrisdone.com/posts/static-smart-constructors/][Static smart constructors with double splices]]. ~ Chris Done
  #Haskell #FunctionalProgramming
+ [[https://www.metalevel.at/trs/][Prolog implementation of the Knuth-Bendix completion procedure]]. ~ Markus
  Triska. #Prolog #LogicProgramming
+ [[https://semantic-domain.blogspot.com/2019/08/new-draft-paper-survey-on-bidirectional.html][New draft paper: Survey on bidirectional typechecking]]. ~ Neel
  Krishnaswami. #FunctionalProgramming
+ [[https://en.wikipedia.org/wiki/Comparison_of_functional_programming_languages][Comparison of functional programming languages]]. ~ Wikipedia. 
  #FunctionalProgramming
+ [[https://wiki.haskell.org/Let_vs._Where][Haskell: let vs]]. where. #Haskell #FunctionalProgramming
+ [[https://youtu.be/seVSlKazsNk][Point-free or die: Tacit programming in Haskell and beyond]]. ~ Amar Shah
  #Haskell #FunctionalProgramming
+ [[https://www.parsonsmatt.org/2016/10/26/grokking_fix.html][Grokking fix]]. ~ Matt Parsons. #Haskell #FunctionalProgramming
+ [[https://www.researchgate.net/publication/335335097_Verifying_an_Incremental_Theory_Solver_for_Linear_Arithmetic_in_IsabelleHOL][Verifying an incremental theory solver for linear arithmetic in
  Isabelle/HOL]]. ~ R. Bottesch, M.W. Haslbeck, R. Thiemann. #ITP #IsabelleHOL
+ [[http://andreipopescu.uk/pdf/Goedel_CADE_2019.pdf][A formally verified abstract account of Gödel’s incompleteness theorems]]. ~
  A. Popescu, D. Traytel. #ITP #IsabelleHOL #Logic
+ [[https://ore.exeter.ac.uk/repository/handle/10871/38402][Isabelle/DOF. (User and implementation manual)]]. ~ A.D. Brucker, B. Wolff. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1908.06479][Studying algebraic structures using Prover9 and Mace4]]. ~ R. Arthan,
  P. Oliva. #ATP #Prover9 #Mace4 #Math
+ [[https://github.com/wimmers/munta][MUNTA: Fully verified model checker for timed automata]]. ~ Simon Wimmer. #ITP
  #IsabelleHOL
+ [[https://arxiv.org/abs/1908.06478][Type-based resource analysis on Haskell]]. ~ F. Siglmüller. #Haskell
  #FunctionalProgramming #Algorithms
+ [[https://stackoverflow.com/questions/5889696/difference-between-data-and-newtype-in-haskell][Difference between `data` and `newtype` in Haskell]]. #Haskell
  #FunctionalProgramming
+ [[https://youtu.be/hIZxTQP1ifo][Type Classes vs. the World]]. ~ Edward Kmett. #Haskell #FunctionalProgramming
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?PxTP2019.4][Verifying bit-vector invertibility conditions in Coq]]. ~ Burak Ekici et
  als. #ITP #Coq
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?PxTP2019.6][Reconstructing veriT proofs in Isabelle/HOL]]. ~ M. Fleury, H.J. Schurr. #ITP
  #IsabelleHOL #SMT #veriT
+ [[https://www.infoq.com/presentations/ai-ml-functional-programming/?utm_source=twitter.com&utm_medium=social&utm_campaign=presentation-computer-mathematics--ai-a][Computer mathematics, AI and functional programming]]. ~ Moa Johansson. #ATP
  #ITP #Math #Haskell #FunctionalProgramming
+ [[https://github.com/moajohansson/IsaHipster][IsaHipster: Theory exploration for Isabelle using HipSpec]]. ~ Moa
  Johansson. #ITP #IsabelleHOL #Haskell
+ [[https://github.com/caotic123/Kei][Kei: A small and expressive dependently typed language]]. ~ Tiago
  Campos. #Haskell #FunctionalProgramming
+ [[https://mpardalos.xyz/posts/customizable_datatypes.html][Customizable datatypes]]. #Haskell #FunctionalProgramming
+ [[http://r6.ca/blog/20110808T035622Z.html][A very general method of computing shortest paths]]. ~ Russell
  O’Connor. #Haskell #FunctionalProgramming
+ [[https://twanvl.nl/blog/haskell/simple-reflection-of-expressions][Simple reflection of expressions]]. ~ Twan van Laarhoven. #Haskell
  #FunctionalProgramming
+ [[http://hackage.haskell.org/package/simple-reflect-0.3.3][simple-reflect: Simple reflection of expressions containing variables]]. ~ Twan
  van Laarhoven. #Haskell #FunctionalProgramming
+ [[https://apfelmus.nfshost.com/articles/monoid-fingertree.html][Monoids and finger trees]]. ~ Heinrich Apfelmus. #Haskell #FunctionalProgramming
+ [[http://comonad.com/reader/wp-content/uploads/2009/07/AllAboutMonoids.pdf][All about monoids]]. ~ Edward Kmett. #Haskell #FunctionalProgramming
+ [[https://pbrisbin.com/posts/applicative_functors/][Applicative functors]]. ~ Pat Brisbin. #Haskell #FunctionalProgramming
+ [[https://hackernoon.com/advantages-of-functional-programming-for-blockchain-protocols-1ca2d4ac1033][Advantages of functional programming for Blockchain
  protocols]]. #FunctionalProgramming #Blockchain
+ [[https://www.researchgate.net/publication/241132399_La_incidencia_filosofica_de_la_programacion_logica][La incidencia filosófica de la programación lógica]]. ~ Luís Moniz
  Pereira. #ProgramaciónLógica #Lógica #IA
+ [[https://arxiv.org/abs/1904.11281][Deductive proof of Ethereum smart contracts using Why3]]. ~ Z. Nehai,
  F. Bobot. #FormalVerification #Why3
+ [[https://mmhaskell.com/blog/2019/8/19/q-learning-primer][Q-learning primer]]. ~ James Bowen. #Haskell #FunctionalProgramming
+ [[https://cs-syd.eu/posts/2016-07-24-overcoming-boolean-blindness-evidence][Overcoming boolean blindness with evidence]]. ~ Tom Sydney Kerckhove. #Haskell
  #FunctionalProgramming
+ [[https://youtu.be/iuwUUlDfHcw][Teaching Haskell for understanding]]. ~ Julie Moronuki. #Haskell
  #FunctionalProgramming
+ [[https://xtendo.org/monad][The monad fear]]. #Haskell #FunctionalProgramming
+ [[http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf][Monads for functional programming]]. ~ Philip Wadler. #Haskell
  #FunctionalProgramming
+ [[http://adit.io/posts/2013-06-10-three-useful-monads.html][Three useful monads]]. #Haskell #FunctionalProgramming
+ [[https://www.mjoldfield.com/atelier/2014/08/monads-reader.html][Monads in Haskell: Reader]]. ~ Martin Oldfield. #Haskell #FunctionalProgramming
+ [[http://brandon.si/code/the-state-monad-a-tutorial-for-the-confused/][The State monad: A tutorial for the confused?]] ~ Brandon Simmons. #Haskell
  #FunctionalProgramming
+ [[http://www.haskellforall.com/2012/12/the-continuation-monad.html][The continuation monad]]. ~ G. Gonzalez. #Haskell
  #FunctionalProgramming
+ [[http://blog.ielliott.io/continuations-from-the-ground-up/][Continuations from the ground up]]. ~ Isaac Elliott. #Haskell
  #FunctionalProgramming
+ [[http://matryoshka.gforge.inria.fr/pubs/fernandez_burgos_bsc_thesis.pdf][Formalization of sorting algorithms in Isabelle/HOL]]. ~ Marco Pierre Fernandez
  Burgos. #BSc_Thesis #ITP #IsabelleHOL
+ [[https://github.com/marco10507/formalization-of-sorting-algorithms][Formalization of sorting algorithms in Isabelle/HOL (Code)]]. ~ Marco Pierre Fernandez
  Burgos. #ITP #IsabelleHOL
+ [[https://link.springer.com/content/pdf/10.1007%2F978-3-030-29436-6_30.pdf][Certified equational reasoning via ordered completion]]. ~ C. Sternagel,
  S. Winkle. #ITP #IsabelleHOL
+ [[http://matryoshka.gforge.inria.fr/pubs/blans_bsc_thesis.pdf][Homotopy type theory: Synthetic homotopy theory and proof verification]]. ~
  M. Blans. #BSc_Thesis #ITP #Agda #HoTT
+ [[https://arxiv.org/abs/1908.07776][Free theorems simply, via dinaturality]]. ~ J. Voigtländer. #Haskell
  #FunctionalProgramming
+ [[https://gvolpe.github.io/blog/functional-dependencies-and-type-families/][Functional dependencies & type families]]. ~ Gabriel Volpe #Haskell
  #FunctionalProgramming
+ [[https://www.newfrenzy.org/best-practices-for-using-functional-programming-in-python/][Best practices for using functional programming in Python]]. ~ Tara
  Smith. #Python #FunctionalProgramming
+ [[https://github.com/graninas/automatic-whitebox-testing-showcase][Automatic white-box testing with free monads]]. ~ Alexander Granin
  #Haskell #FunctionalProgramming
+ [[https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/][Abstraction, intuition, and the "monad tutorial fallacy"]]. ~ Brent
  Yorgey. #Haskell #FunctionalProgramming
+ [[http://blog.sigfpe.com/2007/04/trivial-monad.html][The trivial monad]]. ~ Dan Piponi. #Haskell #FunctionalProgramming
+ [[https://two-wrongs.com/a-gentle-introduction-to-monad-transformers][A gentle introduction to monad transformers]]. #Haskell #FunctionalProgramming
+ [[https://github.com/sandrolovnicki/pLam][pLam: An interpreter for learning and exploring pure λ-calculus]]. ~ Sandro
  Lovnički. #LambdaCalculus #Haskell #FunctionalProgramming
+ [[https://stackoverflow.com/questions/44965/what-is-a-monad][What is a monad?]] #Haskell #FunctionalProgramming
+ [[https://gist.github.com/jhrr/61727c9934c53f0f06b2][Programming with effects]]. ~ Graham Hutton. #Haskell #FunctionalProgramming
+ What is a monad? ~ Graham Hutton. https://youtu.be/t1e8gqXLbsU #Haskell #FunctionalProgramming
+ [[https://eduph.github.io/ANNandSC/][Artificial neural networks and simplicial complexes]]. ~ Eduardo
  Paluzo. #NeuralNetworks #Math
+ [[http://www.ps.uni-saarland.de/Publications/documents/Kaiser_2019_Thesis.pdf][Formal verification of the equivalence of system F and the pure type system
  L2]]. ~ Jonas Kaiser. #PhD_Thesis #ITP #Coq
+ [[https://dl.acm.org/citation.cfm?id=3342605][Deferring the details and deriving programs]]. ~ Liam O’Connor. #ITP #Agda
+ [[https://dl.acm.org/citation.cfm?id=3342606][Tic tac types: a gentle introduction to dependently typed programming
  (functional pearl)]]. ~ S. Innes, N. Wu. #FunctionalProgramming #Idris #Haskell
+ [[https://nicksanford.io/posts/2018-08-06-haskell-pyramid.html][Haskell pyramid]]. ~ Nick Sanford. #Haskell #FunctionalProgramming
+ [[https://haskell-explained.gitlab.io/blog/posts/2019/08/27/pattern-synonyms][PatternSynonyms for expressive code]]. ~ Raghu Kaippully. #Haskell
  #FunctionalProgramming
+ [[https://wiki.haskell.org/Humor/LearningCurve][The Haskell learning curve]]. #Haskell #FunctionalProgramming
+ [[https://free.cofree.io/2019/08/21/mu-nu/][Fixed points and non-fixed points of Haskell functors]]. ~ Ziyang Liu. #Haskell
  #FunctionalProgramming
+ [[https://free.cofree.io/2017/12/27/free/][Free monoids and free monads, free of category theory]]. ~ Ziyang Liu. #Haskell
  #FunctionalProgramming
+ [[https://free.cofree.io/2019/07/31/beautiful-bridges/][Solving the "Beautiful bridges" problem, algebraically]]. ~ Ziyang Liu. #Haskell
  #FunctionalProgramming
+ [[https://medium.com/@djoepramono/that-simple-guide-that-could-help-you-get-started-with-haskell-8af1681c7ef7][That guide that could help you get started with Haskell]]. ~ Djoe Pramono
  #Haskell #FunctionalProgramming
+ [[http://builds.openlogicproject.org/courses/set-theory/][Set theory: An open introduction]]. ~ Tim Button. #eBook #SetTheory #Logic #Math
+ [[https://mvanier.livejournal.com/3917.html][Yet another monad tutorial]]. ~ Mike Vanier. #Haskell #FunctionalProgramming
+ [[https://github.com/SKolodynski/IsarMathLib][IsarMathLib: a library of formalized mathematics for Isabelle/ZF]]. ~ Slawomir
  Kolodynski. #ITP #IsabelleZF #Math
+ [[http://isarmathlib.org/][IsarMathLib: A library of formalized mathematics for Isabelle/ZF theorem
  proving environment]]. ~ Slawomir Kolodynski. #ITP #IsabelleZF #Math
+ [[https://open.library.ubc.ca/media/download/pdf/24/1.0380600/3][Automated reasoning in first-order real vector spaces]]. ~ C. Kwan. #MSc_Thesis
  #ITP #ACL2 #Math
+ [[http://www.staff.science.uu.nl/~swier004/publications/2019-jfp-submission.pdf][Functional pearl: Heterogeneous random-access lists]]. ~ W. Swierstra. 
  #FunctionalProgramming #Agda
+ [[https://docs.google.com/presentation/d/1bSANLVcGnfVIFjicj81Uo_MYQhsF0FZi_EF-NEKFecE/edit?usp=sharing][The Haskell pyramid]]. ~ Lucas Di Cioccio. #Haskell #FunctionalProgramming
+ [[http://lisp-univ-etc.blogspot.com/2019/08/programming-algorithms-key-values.html][Programming algorithms: Key-values]]. ~ Vsevolod Dyomkin. #Programming
  #CommonLisp #Algorithms
+ [[https://github.com/bbatsov/emacs-lisp-style-guide][A community-driven Emacs Lisp style guide]]. ~ Bozhidar Batsov. #Programming
  #Emacs #Lisp
+ [[https://github.com/soupi/minimal-haskell-emacs][A minimal Emacs configuration for Haskell programming]]. ~ Gil Mizrahi
  #Emacs #Haskell #FunctionalProgramming
+ [[https://medium.com/@miguelsaddress/funtores-aplicativos-y-m%C3%B3nadas-en-im%C3%A1genes-21ab0e60fe23][Funtores, aplicativos y mónadas en imágenes]]. ~ Miguel Á. Moreno
  #Haskell #ProgramaciónFuncional
+ [[https://sahandsaba.com/understanding-sat-by-implementing-a-simple-sat-solver-in-python.html][Understanding SAT by implementing a simple SAT solver in Python]]. ~ Sahand
  Saba. #Python #Logic
+ [[https://github.com/cdepillabout/post-about-nix-and-haskell/blob/master/2019-08-03-q-and-as-about-nix-for-haskellers.md][Questions and answers about Nix for haskellers]]. #Hakell #Nix

* Septiembre de 2019
   
+ [[https://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-el-curso-2018-19/][Resumen de lecturas compartidas durante el curso 2018-19]]. #GLC
+ [[https://www.isa-afp.org/entries/Jacobson_Basic_Algebra.html][A case study in basic algebra]]. ~ Clemens Ballarin. #ITP #IsabelleHOL #Math
+ [[https://typeslogicscats.gitlab.io/posts/functor-applicative-monad.html][Functor, applicative, and monad]]. ~ TypesLogicsCats #FunctionalProgramming #OCaml #Haskell
+ [[https://github.com/mstksg/emd][Empirical mode decomposition and Hilbert-Huang transform in pure Haskell]]. ~ Justin Le (@mstk). #Haskell #FunctionalProgramming #Math
+ [[https://topology-tool-kit.github.io/][TTK: The Topology ToolKit (Topological data analysis and visualization)]]. ~ Julien Tierny (@JulienTierny) et als. #MachineLearning #DataScience #Python
+ [[https://github.com/conal/talk-2018-deep-learning-rebooted][A functional reboot for deep learning]]. ~ Conal Elliott (@conal). #MachineLearning #DeepLearning #FunctionalProgramming #Haskell
+ [[http://conal.net/papers/essence-of-ad][The simple essence of automatic differentiation]]. ~ Conal Elliott (@conal). #MachineLearning #DeepLearning #FunctionalProgramming #Haskell
+ [[https://github.com/guibou/PyF][PyF: Haskell quasiquoter for string formatting]]. ~ Guillaume Bouchard. #Haskell #FunctionalProgramming
+ [[http://web.cecs.pdx.edu/~mpj/pubs/springschool.html][Functional programming with overloading and higher-order polymorphism]]. ~ Mark P. Jones. #Haskell #FunctionalProgramming
+ [[https://www.well-typed.com/blog/2019/09/announcing-the-optics-library/][Announcing the optics library]]. ~ Adam Gundry. #Haskell #FunctionalProgramming
+ [[https://odone.io/posts/2019-09-02-merging-io-and-either-into-one-monad.html][Merging IO and Either into one monad]]. ~ Riccardo Odone (@RiccardoOdone). #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1908.11105][FunSeqSet: Towards a purely functional data structure for the linearisation case of dynamic trees problem]]. ~ J.C. Saenz-Carrasco. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1908.10926][Performance analysis of zippers]]. ~ Vı́t Šefl. #Haskell #FunctionalProgramming
+ [[http://fm.csl.sri.com/SSFT15/Timeline.pages.pdf][A timeline for logic, λ-calculus, and programming language theory]]. ~ Dana S. Scott #Logic #LambdaCalculus #Programming #ITP #CompSci
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?FROM2019.1.pdf][Verifying the DPLL algorithm in Dafny]]. ~ C.C. Andrici, Ş. Ciobâcă. #Logic #SAT #FormalVerification #Dafny
+ [[https://project.inria.fr/from2019/files/2019/08/from2019_full.pdf][(Co)inductive proof systems for compositional proofs in reachability logic]]. ~ V. Rusu, D. Nowak. #ITP #IsabelleHOL #Coq
+ [[https://mmhaskell.com/blog/2019/8/26/making-a-learning-model][Making a learning model]]. ~ James Bowen (@james_OWA). #Haskell #FunctionalProgramming
+ [[https://confengine.com/functional-conf-2018/proposal/6774/high-performance-haskell][High performance Haskell]]. ~ Harendra Kumar. #Haskell #FunctionalProgramming
+ [[https://alicja.dev/zines/haskell_functors][Functors and lifting]]. ~ Alicja Raszkowska (@mamrotynka). #Haskell #FunctionalProgramming
+ [[https://www.researchgate.net/publication/335583243_From_LCF_to_IsabelleHOL][From LCF to Isabelle/HOL]]. ~ L. Paulson, T. Nipkow, M. Wenzel. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1909.01414][From type theory to setoids and back]]. ~ Erik Palmgren. #ITP #Agda
+ [[http://www.philipzucker.com/relational-algebra-with-fancy-types/][Relational algebra with fancy types]]. ~ Philip Zucker (@SandMouth). #Haskell #FunctionalProgramming
+ [[https://www.tweag.io/posts/2019-09-06-why-haskell-is-important.html][Why Haskell is important]]. ~ Mark Karpov. #Haskell #FunctionalProgramming
+ [[https://people.csail.mit.edu/asolar/SynthesisCourse/TOC.htm][Introduction to program synthesis]]. ~ Armando Solar-Lezama. 
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11081/pdf/LIPIcs-ITP-2019-26.pdf][Ornaments for proof reuse in Coq]]. ~ Talia Ringer et als. #ITP #Coq
+ [[https://imo-grand-challenge.github.io][IMO (International Mathematical Olympiad) grand challenge]]. #AI #Math #ITP #LeanProver
+ [[https://github.com/IMO-grand-challenge/formal-encoding][Formal encoding of IMO (International Mathematical Olympiad) problems]]. ~ Daniel Selsam. #AI #Math #ITP #LeanProver
+ [[http://www.andrew.cmu.edu/user/avigad/Talks/london.pdf][Automated reasoning for the working mathematician]]. ~ Jeremy Avigad. #ITP #ATP #Math
+ [[https://github.com/avigad/arwm][Automated reasoning for the working mathematician: notes on some experiments with the use of automation in Isabelle]]. ~ Jeremy Avigad. #ITP #IsabelleHOL
+ [[https://www.hillelwayne.com/post/theorem-prover-showdown][The great theorem prover showdown]]. ~ Hillel (@hillelogram). #ITP
+ [[https://github.com/levjj/esverify-theory/][Formalism and proofs for esverify]]. ~ Christopher Schuster. #ITP #LeanProver
+ [[https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF][Formalização de algoritmos de criptografia em um assistente de provas interativo]]. ~ Guilherme Gomes Felix da Silva. #MSc_Thesis #ITP #LeanProver
+ [[https://blogs.scientificamerican.com/cross-check/okay-maybe-proofs-arent-dying-after-all][Okay, maybe proofs aren't dying after all]]. ~ John Horgan. #Math
+ [[https://github.com/slasser/vermillion][LL(1) parser generator verified in Coq]]. #ITP #Coq
+ [[https://www.nowpublishers.com/article/Details/PGL-045][QED at large: A survey of engineering of formally verified software]]. ~ Talia Ringer et als. #ITP #FormalVerification
+ [[http://wwwf.imperial.ac.uk/~buzzard/one_off_lectures/msr.pdf][The future of mathematics?]] ~ Kevin Buzzard. #Math #ITP #LeanProver
+ [[https://www.math.u-psud.fr/~pmassot/enseignement/math114/][Introduction aux mathématiques formalisées]]. ~ Patrick Massot. #Math #ITP #LeanProver
+ [[https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md][100 theorems for Lean]]. ~ Floris van Doorn. #ITP #LeanProver #Math
+ [[https://web.cs.wpi.edu/~dd/unif.pdf][A Coq formalization of boolean unification]]. ~ Daniel J. Dougherty. #ITP #Coq
+ [[http://cpp2017.mpi-sws.org/Paulson.pdf ][Porting HOL Light’s multivariate analysis library: Some lessons]]. ~ Lawrence C. Paulson. #ITP #IsabelleHOL
+ [[https://esb-dev.github.io/mat/nsc.pdf][Natürliches Schließen in Coq (Ein einführendes Tutorial)]]. ~ Burkhardt Renz. #Logic #ITP #Coq
+ [[https://stacks.stanford.edu/file/druid:jt562cf4590/dselsam_dissertation_final-augmented.pdf][Neural networks and the satisfiability problem]]. ~ Daniel Selsam. #PhD_Thesis #Logic #SAT #NeuralNetworks
+ [[https://github.com/dselsam/neurosat][NeuroSAT: Learning a SAT solver from single-bit supervision]]. ~ Daniel Selsam. #Logic #SAT #NeuralNetworks
+ [[https://lexi-lambda.github.io/blog/2019/09/07/demystifying-monadbasecontrol/][Demystifying MonadBaseControl]]. ~ Alexis King (@lexi_lambda). #Haskell #FunctionalProgramming
+ [[https://www.researchgate.net/publication/335312902_Logic_Algebra_and_Geometry_at_the_Foundation_of_Computer_Science][Logic, algebra, and geometry at the foundation of computer science]]. ~ T. Hoare, A. Mendes, J.F. Ferreira. #Math #CompSci
+ [[http://www.cs.us.es/~fsancho/?e=221][Breve historia de la Inteligencia Artificial]]. ~ F. Sancho (@sanchocaparrini). #IA #Historia
+ [[https://sf.snu.ac.kr/compcertm/][CompCertM: CompCert with lightweight modular verification and multi-language linking]]. ~ Youngju Song et als. #ITP #Coq
+ [[http://lamb-the-lambda.com/haskell/2019/09/07/five-cartesian.html][Five ways to compute the cartesian product with Haskell]]. ~ Andrew Ribeiro (@AndrewJRibeiro). #Haskell #FunctionalProgramming
+ [[https://blogs.dropbox.com/tech/2019/09/our-journey-to-type-checking-4-million-lines-of-python/][Our journey to type checking 4 million lines of Python]]. ~ Jukka Lehtosalo. #Python
+ [[http://informatica.blogs.uoc.edu/2019/09/09/ia-hombres-maquinas][IA: hombres y máquinas]]. ~ José Ramón Rodríguez. #IA
+ [[https://cse.buffalo.edu/~rapaport/Papers/phics.pdf][Philosophy of Computer Science]]. ~ William J. Rapaport. #CompSci #Philosophy
+ [[https://www.nytimes.com/2019/09/06/opinion/ai-explainability.html][How to build Artificial Intelligence we can trust]]. ~ Gary Marcus (@GaryMarcus). #AI
+ [[https://mmhaskell.com/blog/2019/9/2/running-training-iterations][Running training iterations]]. | Monday Morning Haskell. ~ James Bowen (@james_OWA). #Haskell #FunctionalProgramming
+ [[http://r6.ca/blog/20171010T001746Z.html][Functor-oriented programming]]. ~ Russell O’Connor. #Haskell #FunctionalProgramming
+ [[https://odone.io/posts/2019-09-09-fun-with-typeclasses.html][Fun with Typeclasses]]. ~ Riccardo Odone (@RiccardoOdone). #Haskell #FunctionalProgramming
+ [[https://www.isa-afp.org/entries/Hybrid_Systems_VCs.html][Verification components for hybrid systems in Isabelle/HOL]]. ~ Jonathan Julian Huerta y Munive. #ITP #IsabelleHOL #Math
+ [[https://www.isa-afp.org/entries/Fourier.html][Fourier series in Isabelle/HOL]]. ~ Lawrence C Paulson. #ITP #IsabelleHOL #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11088/pdf/LIPIcs-ITP-2019-33.pdf][The DPRM theorem in Isabelle]]. ~ J. Bayer et als. #ITP #IsabelleHOL #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11076/pdf/LIPIcs-ITP-2019-21.pdf][Virtualization of HOL4 in Isabelle]]. ~ F. Immler, J. Rädle, M. Wenzel. #ITP #IsabelleHOL #HOL4
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11068/pdf/LIPIcs-ITP-2019-13.pdf][Formal proofs of Tarjan's strongly connected components algorithm in Why3, Coq and Isabelle]]. ~ R. Chen et als. #ITP #IsabelleHOL #Coq #Why3
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11059/pdf/LIPIcs-ITP-2019-4.pdf][A verified compositional algorithm for AI planning]]. ~ M. Abdulaziz, C. Gretton, M. Norrish. #ITP #HOL4 #AI
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11060/pdf/LIPIcs-ITP-2019-5.pdf][Proving tree algorithms for succinct data structures]]. ~ R. Affeldt et als. #ITP #Coq
+ [[https://her.esy.fun/slides/Intro-to-FP-with-Haskell.html][Introduction à la programmation fonctionnelle avec Haskell]]. ~ Yann Esposito (@yogsototh). #Haskell #FunctionalProgramming
+ [[https://falacias.escepticos.es][Falacias lógicas explicadas gráficamente]]. #Lógica
+ [[https://rationalwiki.org/wiki/Pseudomathematics][Pseudomathematics]]. #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11061/pdf/LIPIcs-ITP-2019-6.pdf][Data types as quotients of polynomial functors]]. ~ J. Avigad, M. Carneiro, S. Hudon. #ITP #LeanProver
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11062/pdf/LIPIcs-ITP-2019-7.pdf][Primitive Floats in Coq]]. ~ G. Bertholon, E. Martin-Dorel, P. Roux. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11063/pdf/LIPIcs-ITP-2019-8.pdf][A certificate-based approach to formally verified approximations]]. ~ F. Bréhard, A. Mahboubi, D. Pous. #ITP #Coq #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11064/pdf/LIPIcs-ITP-2019-9.pdf][Higher-order Tarski Grothendieck as a foundation for formal proof]]. ~ C.E. Brown, C. Kaliszyk, K. Pak. #ITP #IsabelleHOL
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11065/pdf/LIPIcs-ITP-2019-10.pdf][Generic authenticated data structures, formally]]. ~ M. Brun, D. Traytel. #ITP #IsabelleHOL
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11066/pdf/LIPIcs-ITP-2019-11.pdf][A verified and compositional translation of LTL to deterministic Rabin automata]]. ~ J. Brunner, B. Seidl, S. Sickert. #ITP #IsabelleHOL
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11067/pdf/LIPIcs-ITP-2019-12.pdf][Formalizing computability theory via partial recursive functions]]. ~ M. Carneiro. #ITP #LeanProver
+ [[https://github.com/ChrisPenner/astar-monad][A smart A* search monad transformer which supports backtracking user-state]]. ~ Chris Penner (@chrislpenner). #Haskell #FunctionalProgramming #AI
+ [[https://slides.com/volpegabriel/why-types-matte][Why types matter]]. ~ Gabrieλ Volpe (@volpegabriel87).r#/ #Haskell #FunctionalProgramming
+ [[https://nikita-volkov.github.io//refined/][Announcing the refinement types library]]. ~ Nikita Volkov (@NikitaYVolkov). #Haskell #FunctionalProgramming
+ [[http://lisp-univ-etc.blogspot.com/2019/09/programming-algorithms-hash-tables.html ][Programming algorithms: Hash-tables]]. ~ Vsevolod Dyomkin. #Programming #CommonLisp #Algorithms
+ [[https://kite.com/blog/python/functional-programming/][Best practices for using functional programming in Python]]. ~ Amandine Lee (@momandine). #Python #FunctionalProgramming
+ [[https://artint.info/][Artificial Intelligence: Foundations of computational agents, second edition]]. ~ David Poole, Alan Mackworth. #eBook #AI
+ [[https://blog.sigplan.org/2019/09/12/program-verification-has-it-lost-its-punch/]["Program Verification": Has it lost its punch?]] ~ Nikhil Swamy. #FormalVerification
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11069/pdf/LIPIcs-ITP-2019-14.pdf][First-order guarded coinduction in Coq]]. ~ L. Czajka. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11070/pdf/LIPIcs-ITP-2019-15.pdf][Formalizing the solution to the cap set problem]]. ~ S.R. Dahmen, J. Hölzl, R.Y. Lewis. #ITP #LeanProver #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11071/pdf/LIPIcs-ITP-2019-16.pdf][Nine chapters of analytic number theory in Isabelle/HOL]]. ~ M. Eberl. #ITP #IsabelleHOL #Math
+ [[https://t.co/Otgbgo8xxG?amp=1][Nine chapters of analytic number theory in Isabelle/HOL (Slides)]]. ~ Manuel Eberl (@pruvisto). #ITP #IsabelleHOL #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11072/pdf/LIPIcs-ITP-2019-17.pdf][A certifying extraction with time bounds from Coq to call-by-value lambda calculus]]. ~ Y. Forster, F. Kunze. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11073/pdf/LIPIcs-ITP-2019-18.pdf][Formal proof and analysis of an incremental cycle detection algorithm]]. ~ A. Guéneau et als. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11074/pdf/LIPIcs-ITP-2019-19.pdf][A formalization of forcing and the unprovability of the continuum hypothesis]]. ~ J.M. Han, F. van Doorn. #ITP #LeanProver
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11075/pdf/LIPIcs-ITP-2019-20.pdf][Refinement with time (Refining the run-time of algorithms in Isabelle/HOL)]]. ~ M.P.L. Haslbeck, P. Lammich. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1909.05618][Predicate transformer semantics for hybrid systems: Verification components for Isabelle/HOL]]. ~ J.J. Huerta y Munive, G. Struth. #ITP #IsabelleHOL
+ [[https://sicp.comp.nus.edu.sg/sicpjs.pdf][Structure and interpretation of computer programs (JavaScript adaptation)]]. ~ H. Abelson et als. #eBook #Programming #JavaScript
+ [[https://alva.re/wp-content/uploads/2019/07/elle_preprint_072019.pdf][Elle: Foundationally verified compilation for Ethereum]]. ~ M.M. Alvarez. #ITP #IsabelleHOL #Ethereum
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11077/pdf/LIPIcs-ITP-2019-22.pdf][Generating verified LLVM from Isabelle/HOL]]. ~ P. Lammich. #ITP #IsabelleHOL
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11080/pdf/LIPIcs-ITP-2019-25.pdf][Binary-compatible verification of filesystems with ACL2]]. ~ M.P. Mehta, W.R. Cook. #ITP #ACL2
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11082/pdf/LIPIcs-ITP-2019-27.pdf][Verifying that a compiler preserves concurrent value-dependent information-flow security]]. ~ R. Sison, T. Murray. #ITP #IsabelleHOL
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11083/pdf/LIPIcs-ITP-2019-28.pdf][Quantitative continuity and computable analysis in Coq]]. ~ F. Steinberg, L. Théry, H. Thies. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11084/pdf/LIPIcs-ITP-2019-29.pdf][Deriving proved equality tests in Coq-Elpi: Stronger induction principles for containers in Coq]]. ~ E. Tassi. #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11085/pdf/LIPIcs-ITP-2019-30.pdf][Complete non-orders and fixed points]]. ~ A. Yamada, J. Dubut. #ITP #IsabelleHOL #Math
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11086/pdf/LIPIcs-ITP-2019-31.pdf][Verified decision procedures for modal logics]]. ~ M. Wu, R. Goré. #ITP #LeanProver #Logic
+ [[https://www.welcometothejungle.co/fr/articles/btc-deep-learning-clojure-haskell][The beauty of functional languages in Deep Learning — Clojure and Haskell]]. ~ Jun Wu. #Clojure #Haskell #FunctionalProgramming #DeepLearning
+ [[https://blog.poisson.chat/posts/2019-09-13-reverse.html][Making Haskell run fast: the many faces of reverse]]. ~ Li-yao Xia. #Haskell #FunctionalProgramming #ITP #Coq
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11090/pdf/LIPIcs-ITP-2019-35.pdf][Declarative proof translation]]. ~ C. Kaliszyk, K. Pak. #ITP #IsabelleHOL #Mizar
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11091/pdf/LIPIcs-ITP-2019-36.pdf][Formalization of the domination chain with weighted parameters]]. ~ D.E. Severín. #ITP #Coq #Math
+ [[https://arxiv.org/abs/1909.01414][From type theory to setoids and back]]. ~ E. Palmgren. #ITP #Agda
+ [[https://www21.in.tum.de/~eberlm/pubs/sds_isabelle.html][Verifying randomised social choice]]. ~ M. Eberl (@pruvisto). #ITP #IsabelleHOL
+ [[http://www.andrew.cmu.edu/user/avigad/Papers/mutilated.pdf][A formalization of the mutilated chessboard problem in Lean]]. ~ Jeremy Avigad. #ITP #LeanProver
+ [[http://www.jens-otten.de/tutorial_tableaux19/][How to build an automated theorem prover]]. ~ Jens Otten. #Logic #ATP #Prolog
+ [[https://www.mat.ufrn.br/cade-27/wp-content/uploads/2019/09/tutorial-RL.pdf][Building theorem provers using rewriting logic]]. ~ Carlos Olarte. #Logic #ATP #Maude
+ [[https://www.mat.ufrn.br/cade-27/wp-content/uploads/2019/09/2019CN-CADE.pdf][Machine-oriented reasoning]]. ~ Cláudia Nalon. #Logic #ATP
+ [[http://jens-otten.de/tutorial_cade19][Build your own first-order prover]]. ~ Jens Otten. #Logic #ATP #Prolog
+ [[http://cl-informatik.uibk.ac.at/users/swinkler/arcade/pdfs/2.pdf][Stronger higher-order automation: A report on the ongoing Matryoshka project]]. ~ Jasmin Blanchette et als. #ITP #ATP
+ [[http://fmv.jku.at/papers/HeuleKieslBiere-NFM19.pdf][Clausal proofs of mutilated chessboards]]. ~ M.J.H. Heule, B. Kiesl, A. Biere. #ATP #PR
+ [[https://morgenthum.dev/articles/why-prefer-fp][Why I prefer functional programming]]. ~ Mario Morgenthum. #Haskell #FunctionalProgramming
+ [[https://www.bbvaopenmind.com/tecnologia/mundo-digital/lenguaje-programacion-parte-1/][¿Qué es un lenguaje de programación? (Parte 1)]]. ~ Alejandro Serrano (@trupill). #Programación
+ [[https://www.bbvaopenmind.com/tecnologia/mundo-digital/la-torre-de-babel-informatica-de-los-lenguajes-de-programacion/][La Torre de Babel informática de los lenguajes de programación]]. ~ Alejandro Serrano (@trupill). #Programación
+ [[http://profs.sci.univr.it/~bonacina/talks/SSFT2019OrdBasedStrat-slides.pdf][Overview of automated reasoning and ordering-based strategies]]. ~ Maria Paola Bonacina. #Logic #ATP
+ [[https://staff.aist.go.jp/reynald.affeldt/coq2019/coqws2019-steinberg-thies-slides.pdf][Computable analysis, exact real arithmetic and analytic functions in Coq]]. ~ F. Steinberg, H. Thies. #ITP #Coq #Math
+ [[https://staff.aist.go.jp/reynald.affeldt/coq2019/coqws2019-tabareau-slides.pdf][Not a single proof assistant for all, but proof assistants for everyone]]. ~ Nicolas Tabareau. #ITP #Coq
+ [[https://basics.sjtu.edu.cn/~yuxin/publications/Coqprob.pdf][Formalisation of probabilistic testing semantics in Coq]]. ~ Y. Deng, J.F. Monin. #ITP #Coq
+ [[https://odone.io/posts/2019-09-16-mars-rover-kata-in-haskell.html][Mars Rover Kata in Haskell]]. ~ Riccardo Odone (@RiccardoOdone). #Haskell #FunctionalProgramming
+ [[https://vitez.me/building-lenses][Building lenses (Implementing basic Haskell lenses in twenty exercises)]]. ~ Mitchell Vitez. #Haskell #FunctionalProgramming
+ [[https://williamyaoh.com/posts/2019-09-16-time-cheatsheet.html][A cheatsheet to the time library]]. ~ William Yao (@williamyaoh). #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/9/16/adding-random-exploration][Monday Morning Haskell: Adding random exploration]]. ~ James Bowen (@james_OWA). #Haskell #FunctionalProgramming
+ [[https://basics.sjtu.edu.cn/~yuxin/teaching/Coq/fpintro2019.pdf][Functional programming in Coq]]. ~ Yuxin Deng. #FunctionalProgramming #ITP #Coq #LambdaCalculus
+ [[http://www.cs.yale.edu/homes/piskac/papers/2019HallahanETALquasiquoter.pdf][G2Q: Haskell constraint solving]]. ~ W.T. Hallahan, A. Xue, R. Piskac. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1909.04160][Structural and semantic pattern matching analysis in Haskell]]. ~ P. Kalvoda, T.S. Kerckhove. #Haskell #FunctionalProgramming
+ [[https://www.stackbuilders.com/news/from-type-theory-to-haskell-in-10-minutes][From type theory to Haskell in 10 minutes]]. ~ Matt Campbell. #Haskell #LambdaCalculus #TypeTheory
+ [[https://maxhallinan.com/posts/2019/09/17/what-is-datatype-generic-programming/][What is datatype-generic programming?]] ~ Max Hallinan. #Haskell #FunctionalProgramming
+ [[https://github.com/EggBaconAndSpam/eggbaconandspam.github.io/blob/master/posts/2019-09-16-Seekable-Parsers.md][Seekable parsers in Haskell]]. ~ Frederik Ramcke. #Haskell #FunctionalProgramming
+ [[https://www.logicmatters.net/2019/09/17/j-donald-monk-lectures-on-set-theory/][J. Donald Monk, Mathematical logic and lectures on set theory]]. #eBook #Logic #Math
+ [[https://www.gwern.net/The-Existential-Risk-of-Mathematical-Error][The existential risk of Math errors]]. ~ Gwern Branwen. #Math 
+ [[https://arxiv.org/abs/1906.06251][Effective problem solving using SAT solvers]]. ~ Curtis Bright et als. #SAT_solving
+ [[http://dx.doi.org/10.4204/EPTCS.306.8][Prolog coding guidelines: Status and tool support]]. ~ F. Nogatz, P. Körner, S. Krings. #Prolog #LogicProgramming
+ [[https://arxiv.org/abs/1909.07479][On correctness of an n queens program]]. ~ W. Drabent. #Prolog #LogicProgramming
+ [[https://www.isa-afp.org/entries/Generic_Join.html][Formalization of multiway-join algorithms in Isabelle/HOL]]. ~ Thibault Dardinier. #ITP #IsabelleHOL
+ [[https://chrispenner.ca/posts/slick-template][Slick 1.0 Release - Now with a quick and easy template!]] ~ Chris Penner (@chrislpenner). #Haskell #FunctionalProgramming
+ [[https://occasionallycogent.com/prolog_fundamentals_catchup/index.html][Prolog fundamentals catchup]]. ~ James Norman Vladimir Cash (@jamesnvc). #Prolog #LogicProgramming
+ [[http://www.pathwayslms.com/swipltuts/html/index.html][Tutorial: Creating Web applications in SWI-Prolog]]. ~ Anne Ogborn. #Prolog #LogicProgramming
+ [[https://prologhub.pl/functional-prolog-map-filter-and-reduce/][Functional Prolog: map, filter and reduce]]. ~ Paul Brown. #Prolog #LogicProgramming
+ [[https://www.bbvaopenmind.com/tecnologia/inteligencia-artificial/la-deuda-de-la-inteligencia-artificial-con-el-matematico-godel/][La deuda de la Inteligencia Artificial con el matemático Gödel]]. ~ Javier Muñoz de la Cuesta. #Lógica #IA
+ [[https://github.com/sheyll/newtype-zoo][A zoo of Haskell newtype wrappers]]. ~ Sven Heyll. #Haskell #FunctionalProgramming
+ [[http://donyaquick.com/interesting-music-in-four-lines-of-code/][Interesting music in four lines of code]]. ~ Donya Quick. #Haskell #FunctionalProgramming
+ [[https://shemesh.larc.nasa.gov/people/cam/publications/vscode-pvs-draft.pdf][An integrated development environment for the Prototype Verification System (PVS)]]. ~ P. Masci, C.A. Muñoz. #ITP #PVS
+ [[https://arxiv.org/abs/1909.05464][A formal semantics of Findel (Financial Derivatives Language) in Coq]]. ~ A. Arusoaie #ITP #Coq
+ [[https://repository.tudelft.nl/islandora/object/uuid:229b0db1-06e9-4cbd-9e90-e2e16bd162bb][Formal verification of upper bounds on translative packing densities]]. ~ I. Mulder. #MSc_Thesis #ITP #Coq
+ [[https://www.tweag.io/posts/2019-09-20-monad-bayes-1.html][Probabilistic programming with Monad‑Bayes. Part 1: first steps]]. ~ S. Bhat, S. Carstens, M. Meschede. #Haskell #FunctionalProgramming
+ [[https://serokell.io/blog/learning-haskell][Learning Haskell: A resource guide]]. ~ Denis Oleynikov. #Haskell #FunctionalProgramming
+ [[https://bartoszmilewski.com/2019/09/20/the-power-of-adjunctions/][The power of adjunctions]]. ~ Bartosz Milewski. #CategoryTheory #Programming
+ [[https://chrispenner.ca/posts/lens-regex-pcre][Optics + Regex: Greater than the sum of their parts]]. ~ Chris Penner (@chrislpenner). #Haskell #FunctionalProgramming
+ [[https://svenkeidel.de/papers/analysis-components.pdf][Sound and reusable components for abstract interpretation]]. ~ S. Keidel, S. Erdweg. #Haskell #FunctionalProgramming via @Iceland_jack
+ [[http://jhc.sjtu.edu.cn/uploadfile/2019/0905/20190905014559847.pdf][Certifying graph-manipulating C programs via localizations within data structures]]. ~ Shengyi Wang et als. #ITP #Coq
+ [[https://staticanalysis.org/tapas2019/talks/TAPAS_2019_paper_16.pdf][Leveraging highly automated theorem proving for certification]]. ~ Deni Raco et als. #ITP #IsabelleHOL
+ [[https://iris-project.org/pdfs/2019-sosp-perennial-final.pdf][Verifying concurrent, crash-safe systems with Perennial]]. ~ Tej Chajed et als. #ITP #Coq
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?ICLP2019.26][Lazy stream programming in Prolog]]. ~ Paul Tarau, Jan Wielemaker, Tom Schrijvers. #Prolog #LogicProgramming
+ [[https://www.isa-afp.org/entries/Linear_Programming.html][Linear programming in Isabelle/HOL]]. ~ Julian Parsert and Cezary Kaliszyk. #ITP #IsabelleHOL #Math
+ [[http://www.philipzucker.com/linear-algebra-of-types/][Linear algebra of types]]. ~ Philip Zucker (@SandMouth). #Haskell #FunctionalProgramming #Math
+ [[http://www.cs.us.es/~fsancho/?e=223][Introducción a la Lógica]]. ~ F. Sancho (@sanchocaparrini). #Lógica
+ [[http://www.cs.us.es/~fsancho/?e=222][Brevísima historia de la Lógica]]. ~ F. Sancho (@sanchocaparrini). #Lógica
+ [[https://mmhaskell.com/blog/2019/9/23/tweaks-fixes-and-some-results][Monday morning Haskell: Tweaks, fixes, and some results]]. ~ James Bowen (@james_OWA). #Haskell #FunctionalProgramming #AI
+ [[https://svejcar.dev/posts/2019/09/23/haskell-on-raspberry-pi-4/][Haskell on Raspberry PI 4]]. ~ Vaclav Svejcar. #Haskell #FunctionalProgramming #Raspberry
+ [[https://odone.io/posts/2019-09-23-refactoring-the-mars-rover-kata-in-haskell.html.][Refactoring the Mars Rover Kata in Haskell]]. ~ Riccardo Odone (@RiccardoOdone). #Haskell #FunctionalProgramming
+ [[https://realpython.com/emacs-the-best-python-editor][Emacs - The best Python editor?]] ~ Kyle Purdon (@PurdonKyle). #Emacs #Python
+ [[https://www21.in.tum.de/~traytel/papers/rv19-verimon/verimon.pdf][A formally verified monitor for metric first-order temporal logic]]. ~ J. Schneider et als. #ITP #IsabelleHOL
+ [[http://people.inf.ethz.ch/trayteld/papers/atva19-adaptive/aom.pdf][Adaptive online first-order monitoring]]. ~ J. Schneider et als #ITP #IsabelLEHOL
+ [[https://philpapers.org/go.pl?id=BLUIFP&u=https%3A%2F%2Fphilpapers.org%2Farchive%2FBLUIFP.pdf][Isabelle for philosophers]]. ~ Ben Blumson. #ITP #IsabelleHOL #Logic
+ [[https://www.kestrel.edu/home/people/coglio/rlp.pdf][Ethereum’s recursive length prefix in ACL2]]. ~ Alessandro Coglio. #ITP #ACL2 #Ethereum
+ [[http://www.well-typed.com/blog/2019/09/eventful-ghc/][Eventful GHC (debugging / profiling Haskell via the GHC eventlog)]]. ~ Alp Mestanogullari (@alpmestan). #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1909.11342][A formal proof of Hensel's lemma over the p-adic integers]]. ~ Robert Y. Lewis. #ITP #LeanProver #Math
+ [[http://homepage.divms.uiowa.edu/~viswanathn/qual.pdf][Comparison of proof producing systems in SMT solvers]]. ~ Arjun Viswanathan. #ATP #SMT
+ [[http://www.cs.us.es/~fsancho/?e=224][Lógica de primer orden: una introducción informal]]. F. Sancho (@sanchocaparrini). #Lógica
+ [[https://cacm.acm.org/news/239748-number-theorist-fears-all-published-math-is-wrong/fulltext][Number theorist fears all published Math is wrong]]. ~ Mordechai Rorvig. #Math #ITP #AI
+ [[https://blog.ploeh.dk/2019/09/23/unit-testing-wai-applications/][Unit testing wai applications]]. ~ Mark Seemann (@ploeh). #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1909.10451][Efficient stochastic programming in Julia]]. ~ M. Biel, M. Johansson. #Programming #JuliaLang
+ [[https://www.theoj.org/jose-papers/jose.00029/10.21105.jose.00029.pdf][Mikrokosmos: an educational lambda calculus interpreter]]. ~ M. Román. #LambdaCalculus #Haskell
+ [[http://lisp-univ-etc.blogspot.com/2019/09/programming-algorithms-trees.html][Programming algorithms: Trees]]. ~ Vsevolod Dyomkin. #Programming #CommonLisp #Algorithms
+ [[https://bonotake.github.io/deep%20learning%20and%20cs/2019/08/02/origin-of-differentiable-programming.html][Where did “differentiable programming” come from?]] ~ Takeo Imai (@bonotake). #DeepLearning
+ [[https://arxiv.org/abs/1909.12582][Towards Coq-verified Esterel semantics and compiling]]. ~ G. Berry, L. Rieg. #ITP #Coq
+ [[https://www.researchgate.net/publication/333918631_Quantum_Computing_in_Haskell][Quantum computing in Haskell]]. ~ Christopher Wright. #BSc_Thesis #Haskell #FunctionalProgramming

* Octubre de 2019

+ [[https://xavierleroy.org/courses/EUTypes-2019][Proving the correctness of a compiler]]. ~ Xavier Leroy. #ITP #Coq
+ [[https://github.com/kbuzzard/xena][Lean Library currently studying for a degree at Imperial College]]. ~ Kevin Buzzard. #ITP #LeanProver #Math
+ [[https://mullikine.github.io/posts/macro-tutorial/][Didactic emacs-lisp macro example (ie. a tutorial)]]. ~ Shane Mulligan (@mullikine). #Emacs #Lisp
+ [[http://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html][Tutorial for the lens library.]] #Haskell #FunctionalProgramming
+ [[https://git.imp.fu-berlin.de/leo-iii/compmeta_pub/raw/master/exercises/resources/Isabelle_ND_cheatsheet.pdf][Mapping of ND proof templates to Isabelle formalization]]. ~ A. Steen. #ITP #IsabelleHOL #Logic
+ [[https://umazalakain.info/static/thesis.pdf][Type-checking session-typed π-calculus with Coq]]. ~ Uma Zalakain. #MSc_Thesis #ITP #Coq
+ [[https://gist.github.com/AndrasKovacs/1f57b66108e7d61351d3a61a642ef066][Constructing finitary inductive types from natural numbers]]. ~ Andras Kovacs (@andrasKovacs6). #ITP #Agda #Math
+ [[https://www.cs.toronto.edu/~hector/pcr.pdf][Programming cognitive robots]]. ~ Hector J. Levesque. #eBook #AI #DeclarativeProgramming #Schem #Racket
+ [[https://prologhub.pl/homoiconic-prolog-explain-yourself/][Homoiconic Prolog: Explain yourself!]] ~ Paul Brown. #Prolog #LogicProgramming
+ [[https://doisinkidney.com/posts/2019-10-02-what-is-good-about-haskell.html][What is good about Haskell?]] ~ Donnacha Oisín Kidney (@oisdk). #Haskell #FunctionalProgramming
+ [[https://github.com/winitzki/sofp/raw/master/sofp-src/sofp.pdf][The science of functional programming (A tutorial, with examples in Scala)]]. ~ Sergei Winitzki. #eBook #FunctionalProgramming #Scala
+ [[https://www.researchgate.net/publication/335106273_Computer_Science_and_Metaphysics_A_Cross-Fertilization][Computer science and metaphysics: A cross-fertilization]]. ~ Christoph Benzmüller et als. #ITP #Isabelle-HOL
+ [[https://dodisturb.me/posts/2019-10-03-Verifying-the-Titular-Properties-of-a-Leftist-Heap.html][Verifying the titular properties of a leftist heap]]. ~ Mistral Contrastin (@madgen_). #Haskell #FunctionalProgramming #Algorithms
+ [[https://www.andrew.cmu.edu/user/avigad/Papers/learning_logic_and_proof.pdf][Learning logic and proof with an interactive theorem prover]]. ~ J. Avigad. #ITP #LeanProver #Logic
+ [[http://bit.ly/2oTPtwA][Proof technology in mathematics research and teaching]]. #eBook #ATP #ITP #Math
+ [[https://www.repository.cam.ac.uk/bitstream/handle/1810/280564/SchematicProof.pdf?sequence=1&isAllowed=y][A common type of rigorous proof that resists Hilbert’s programme]]. ~ A. Bundy, M.A. Jamnik. #Logic #Math
+ [[https://arxiv.org/abs/1909.09137][Bayesian optimisation with Gaussian processes for premise selection]]. ~ Agnieszka Słowik et als. #ATP #Vampire #MachineLearning
+ [[https://williamyaoh.com/posts/2019-10-05-you-are-already-smart-enough.html][You are already smart enough to write Haskell]]. ~ William Yao (@williamyaoh). #Haskell #FunctionalProgramming
+ [[https://hal.archives-ouvertes.fr/hal-01912885/document][Didactical issues at the interface of mathematics and computer science]]. ~ V. Durand-Guerrier, A. Meyer, S. Modeste. #Math #ComSci
+ [[https://www.geeksforgeeks.org/10-famous-bugs-in-the-computer-science-world][10 famous bugs in the computer science world]]. #CompSci #Programming
+ [[https://dkalemis.wordpress.com/2013/11/23/the-correspondence-between-monads-in-category-theory-and-monads-in-haskell][The correspondence between monads in category theory and monads in Haskell]]. ~ D. Kalemis (@dkalemis). #Haskell #FunctionalProgramming #CategoryTheory
+ [[https://github.com/alhassy/AgdaCheatSheet][AgdaCheatSheet: Basics of the dependently-typed functional language Agda]]. ~ Musa Al-hassy. #ITP #Agda
+ [[http://matryoshka.gforge.inria.fr/pubs/fischer_msc_thesis.pdf][Verification of GPU program optimizations in Lean]]. ~ B. Fischer. #MSc_Thesis #ITP #LeanProver
+ [[http://bit.ly/30SLltT][A promising path towards autoformalization and general Artificial Intelligence]]. ~ Christian Szegedy. #AI #PLN #ITP
+ [[https://homes.cs.washington.edu/~thickstn/docs/lean.pdf][Number theory in a proof assistant]]. ~ John Thickstun. #ITP #LeanProver #Math
+ [[http://prl.korea.ac.kr/~pronto/home/papers/oopsla19.pdf][Automatic and scalable detection of logical errors in functional programming assignments]]. ~ Dowon Song et als. #OCaml #FunctionalProgramming
+ [[https://link.springer.com/article/10.1007/s10817-019-09534-y][An assertional proof of red–black trees using Dafny]]. ~ Ricardo Peña. #Dafny
+ [[https://www.cl.cam.ac.uk/~jrh13/spisa19/paper_10.pdf][GRIFT: A richly-typed, deeply-embedded RISC-V semantics written in Haskell]]. ~ Benjamin Selfridge. #Haskell #FunctionalProgramming
+ [[http://www.cs.us.es/~fsancho/?e=226][NetLogo: Grafos]]. F. Sancho (@sanchocaparrini). #NetLogo
+ [[https://ahmet-celik.github.io/papers/CELIK-DISSERTATION-2019.pdf][Proof engineering for large-scale verification projects]]. ~ Ahmet Celik. #PhD_Thesis #ITP #Coq
+ [[https://www.tweag.io/posts/2019-10-11-ormolu-first-release.html][Ormolu: a formatter for Haskell source code]]. ~ Mark Karpov, Utku Demir. #Haskell #FunctionalProgramming
+ [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-91908-9_15.pdf][The next 7000 programming languages]]. ~ Robert Chatley, Alastair Donaldson, and Alan Mycroft. #Programming
+ [[https://www.quantamagazine.org/with-category-theory-mathematics-escapes-from-equality-20191010/][With category theory, mathematics escapes from equality]]. ~ Kevin Hartnett. #Math #CategoryTheory
+ [[ftp://ftp.cs.princeton.edu/techreports/2019/011.pdf][Verified extraction for Coq]]. ~ Olivier Savary Bélanger. #PhD_Thesis #ITP #Coq
+ [[http://casperbp.net/store/from-definitional-interpreter-to-symbolic-executor.pdf][From definitional interpreter to symbolic executor]]. ~ Adrian D. Mensing et als. #Haskell #FunctionalProgramming
+ [[https://byorgey.wordpress.com/2019/10/12/competitive-programming-in-haskell-reading-large-inputs-with-bytestring/][Competitive programming in Haskell: reading large inputs with ByteString]]. ~ Brent Yorgey. #Haskell #FunctionalProgramming
+ [[https://maslinux.es/openlibra-un-enorme-banco-de-libros-con-licencia-libre/][OpenLibra: Un enorme banco de libros con licencia libre]]. #OpenLibra
+ [[http://www.cs.us.es/~fsancho/?e=228][Planificación: Fundamentos (y NetLogo)]]. ~ Fernando Sancho (@sanchocaparrini). #IA #NetLogo
+ [[https://arxiv.org/abs/1903.03425][The ethics of AI ethics (An evaluation of guidelines)]]. ~ Thilo Hagendorff. #AI
+ [[http://neilmitchell.blogspot.com/2019/10/monads-as-graphs.html][Monads as graphs]]. ~ Neil Mitchell. #Haskell #FunctionalProgramming 
+ [[http://prologhub.pl/prolog-forwards-and-backwards/][Prolog: forwards and backwards]]. ~ Paul Brown. #Prolog #LogicProgramming 
+ [[http://prologhub.pl/hello-tau-prolog/][Hello, Tau Prolog!]] ~ Paul Brown. #Prolog #LogicProgramming 
+ [[https://leanprover-community.github.io/papers/mathlib-paper.pdf][The Lean mathematical library]]. ~ The mathlib Community. #ITP #LeanProver #Math
+ [[http://www.philipzucker.com/functors-and-vectors/][Functors, vectors, and quantum circuits]]. ~ Philip Zucker (@SandMouth). #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1910.03740][The resolution of Keller's conjecture]]. ~ J. Brakensiek, M. Heule, J. Mackey. #ATP #SAT #Math via @ozanerdem
+ [[https://blog.sigplan.org/2019/10/14/how-to-design-co-programs/][How to design co-programs]]. ~ Jeremy Gibbons. #Haskell #FunctionalProgramming
+ [[https://www.isa-afp.org/entries/Clean.html][Clean: An abstract imperative programming language and its theory]]. ~ F. Tuong, B. Wolff. #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Aristotles_Assertoric_Syllogistic.html][Aristotle's assertoric syllogistic in Isabelle/HOL]]. ~ Angeliki Koutsoukou-Argyraki (@AngelikiKoutso1). #ITP #IsabelleHOL #Logic
+ [[https://chrispenner.ca/posts/wc][Beating C with 80 lines of Haskell: wc]]. ~ Chris Penner (@chrislpenner). #Haskell #FunctionalProgramming
+ [[https://jaspervdj.be/posts/2019-10-15-flip-partial-application.html][Partial application using flip]]. ~ Jasper Van der Jeugt (@jaspervdj). #Haskell #FunctionalProgramming
+ [[https://ruc.udc.es/dspace/handle/2183/24095][Un procesador de expresiones epistémicas en programas lógicos]]. ~ Javier Garea Cidre. #TFG #LogicProgramming #ASP
+ [[https://www.isa-afp.org/entries/Sigma_Commit_Crypto.html][Sigma protocols and commitment schemes]]. ~ David Butler, Andreas Lochbihler. #ITP #IsabelleHOL
+ [[https://blog.sigplan.org/2019/10/17/what-type-soundness-theorem-do-you-really-want-to-prove/][What type soundness theorem do you really want to prove?]] ~ Derek Dreyer et als. #CompSci #TypeTheory
+ [[http://neilmitchell.blogspot.com/2019/10/improving-rebindable-syntax.html][Improving rebindable syntax]]. ~ Neil Mitchell. #Haskell #FunctionalProgramming
+ [[https://www.slideshare.net/paulszulc/painless-haskell][Painless Haskell]]. ~ Paweł Szulc (@rabbitonweb). #Haskell #FunctionalProgramming
+ [[https://www.microsoft.com/en-us/research/blog/the-inner-magic-behind-the-z3-theorem-prover/][The inner magic behind the Z3 theorem prover]]. ~ Nikolaj Bjørner, Leonardo de Moura. #ATP #SMT #Z3
+ [[http://math.jhu.edu/~eriehl/lambda.pdf][A categorical view of computational effects]]. ~ Emily Riehl (@emilyriehl). #CategoryTheory #FunctionalProgramming
+ [[https://www.slideshare.net/lauramcastro/so-i-used-erlang-is-my-system-as-scalable-as-they-say-itd-be][So I used Erlang ... is my system as scalable as they say it'd be?]] ~ Laura M. Castro (@lauramcastro). #Erlang #FunctionalProgramming
+ [[https://arosien.github.io/talks/better-testing][Writing programs that write tests: better testing with Scala]]. ~ Adam Rosien (@arosien). #Scala #FunctionalProgramming
+ [[https://serokell.io/blog/top-software-written-in-haskell][Software written in Haskell: Stories of success]]. ~ Yulia Gavrilova, Gints Dreimanis. #Haskell #FunctionalProgramming
+ [[https://mml-book.github.io/book/mml-book.pdf][Mathematics for machine learning]]. ~ Marc Peter Deisenroth, A Aldo Faisal, Cheng Soon Ong. #eBook #MachineLearning #Math
+ [[https://github.com/haroldcarr/presentations/raw/master/2019-10-18-lambda-world-cadiz-recursion-schemes.pdf][Refactoring recursion]]. ~ Harold Carr (@haroldcarr). #Haskell #FunctionalProgramming
+ [[http://marcosh.github.io/presentations/2019/10/18/fun-with-categories.html][Fun with categories]]. ~ Marco Perone (@marcoshuttle). #CategoryTheory #Idris #FunctionalProgramming
+ [[http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html][The sandwich theorem]]. ~ Kevin Buzzard. #ITP #LeanProver #Math
+ [[https://www.cs.umd.edu/~mwh/papers/hietala19voqc.html][A verified optimizer for quantum circuits]]. ~ Kesha Hietala et als. #ITP #Coq
+ [[https://ucsd-progsys.github.io/liquidhaskell-blog/2019/10/20/why-types.lhs/][Liquid types vs. Floyd-Hoare logic]]. ~ Ranjit Jhala (@RanjitJhala). #LiquidHaskell #Haskell #FunctionalProgramming
+ [[https://kaygun.tumblr.com/post/183562822804/pr%C3%BCfer-encodingdecoding-of-a-tree-in-common-lisp][Prüfer encoding/decoding of a tree in Common Lisp]]. ~ Atabey Kaygun (@Atabey_Kaygun). #CommonLisp #Algorithms
+ [[http://www.cs.cmu.edu/~mheule/15816-f19/schedule.html][Course: Advanced topics in logic (Automated reasoning and satisfiability)]]. ~ Marijn Heule and Ruben Martins. #ATP #SAT
+ [[https://arxiv.org/abs/1910.08416][Programming and symbolic computation in Maude]]. ~ F. Durán et als. #ITP #Maude
+ [[https://leanprover-community.github.io/papers/mathlib-paper.pdf][The Lean mathematical library]]. ~ The mathlib Community. #ITP #LeanProver #Math
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?LFMTP2019.5][Rapid prototyping formal systems in MMT: 5 case studies]]. ~ Dennis Müller, and Florian Rabe. #ITP #MMT #Logic
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?LFMTP2019.6][A weakly initial algebra for higher-order abstract syntax in Cedille]]. ~ Aaron Stump. #ITP #Cedille
+ [[https://dev.to/drbearhands/haskell-for-madmen-setup-4cj9][Haskell for madmen: Setup]]. #Haskell #FunctionalProgramming
+ [[https://dev.to/drbearhands/haskell-for-madmen-hello-monad-3926][Haskell for madmen: Hello, monad!]] #Haskell #FunctionalProgramming
+ [[https://github.com/albohlabs/awesome-haskell][A curated list of amazingly awesome Haskell articles and talks for beginners]]. ~ Daniel Pfefferkorn (@albohlabs). #Haskell #FunctionalProgramming
+ [[https://github.com/kensanata/ggg/][Gmail Gnus GPG Guide (GGGG)]]. ~ Alex Schroeder. #Emacs #Gmail #Gnus #GPG
+ [[https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf][Logical verification in Lean]]. ~ A. Bentkamp, J. Blanchette, J. Hölzl. #eBook #ITP #LeanProver #Logic #FunctionalProgramming
+ [[https://podcasts.apple.com/se/podcast/337-provable-security-podcast-series-episode-2-automated/id1122785133?i=1000453779171&l=en][Automated Reasoning in the Cloud with John Harrison]]. #ATP
+ [[http://www.lix.polytechnique.fr/~dale/papers/icdcit-2019.pdf][A distributed and trusted web of formal proofs]]. ~ Dale Miller. #Logic #ITP #ATP
+ [[https://hal.archives-ouvertes.fr/hal-02317118/document][A first step in the translation of Alloy to Coq]]. ~ Salwa Souaf, Frédéric Loulergue. #ITP #Coq #Alloy
+ [[http://chalkdustmagazine.com/features/can-computers-prove-theorems/][Can computers prove theorems?]] ~ Kevin Buzzard (@XenaProject). #ITP #LeanProver #Math
+ [[https://www.cs.vu.nl/~jbe248/lv2017/notes.pdf][Logical verification (Course notes)]]. ~ F. van Raamsdonk. #eBook #ITP #Coq #Logic
+ [[https://medium.com/@cdsmithus/applicative-without-currying-f4c3bd9f1552][Applicative without currying]]. ~ Chris Smith (@cdsmithus). #Haskell #FunctionalProgramming
+ [[https://iohk.io/en/research/library/papers/system-f-in-agdafor-fun-and-profit/][System F in Agda, for fun and profit]]. ~ J. Chapman, R. Kireev, C. Nester, P. Wadler. #ITP #Agda
+ [[https://eprint.iacr.org/2019/1185.pdf][Formalising Σ-protocols and commitment schemes using CryptHOL]]. ~ D. Butler, A. Lochbihler, D. Aspinall, A. Gascón. #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/VerifyThis2019.html][VerifyThis 2019 (Polished Isabelle solutions)]]. ~ P. Lammich, S. Wimmer. #ITP #IsabelleHOL
+ [[https://www21.in.tum.de/teaching/fpv/WS1920/slides.pdf][Functional programming and verification]]. ~ T. Nipkow. #Haskell #FunctionalProgramming
+ [[https://cacm.acm.org/magazines/2019/11/240390-deepxplore/fulltext][DeepXplore: Automated whitebox testing of deep learning systems]]. ~ K. Pei, Y. Cao, J. Yang, S. Jana. #DeepLearning
+ [[https://engineering.fb.com/security/simon-marlow/][Simon Marlow, Simon Peyton Jones, and Satnam Singh win Most Influential ICFP Paper Award]]. #Hsakell #FunctionalProgramming
+ [[https://xenaproject.wordpress.com/2019/10/24/chalkdust-and-the-natural-number-game/][Chalkdust, and the natural number game!]] ~ Kevin Buzzard (@XenaProject). #ITP #LeanProver #Math
+ [[https://www.mi.fu-berlin.de/inf/groups/ag-ki/publications/Aqvists-Logic/Aqvist-farjami.pdf][Åqvist's dyadic deontic logic E in HOL]]. ~ C. Benzmüller, A. Farjami, X. Parent. #ITP #IsabelleHOL #Logic
+ [[https://arxiv.org/pdf/1904.03917][Fifty years of Hoare's Logic]]. K.R. Apt, E.R. Olderog. #Logic #Verification #CompSci
+ [[http://lisp-univ-etc.blogspot.com/2019/10/programming-algorithms-graphs.html][Programming algorithms: Graphs]]. ~ Vsevolod Dyomkin. #CommonLisp #Algorithms 
+ [[https://blog.poisson.chat/posts/2019-10-25-infinite-types-existential-newtype.html][Infinite types and existential newtypes]]. ~ Li-yao Xia. #Haskell #FunctionalProgramming
+ [[https://www.newton.ac.uk/seminar/20170710143015301][Proof assistants: from symbolic logic to real mathematics?]] ~ Lawrence C Paulson #ITP #Logic #Math
+ [[https://en.wikipedia.org/wiki/List_of_software_bugs][List of software bugs]]. ~ Wikipedia #Programming
+ [[https://arxiv.org/abs/1910.11797][Deep reinforcement learning in HOL4]]. ~ T. Gauthier #ITP #HOL4 #DeepLearning
+ [[https://www.cl.cam.ac.uk/~jrh13/papers/cacm.pdf][Formally verified Mathematics]]. ~ J. Avigad, J. Harrison. #ITP #Math
+ [[https://hal.inria.fr/hal-00809448/document][Les assistants de preuve, ou comment avoir confiance en ses démonstrations]]. ~ J. Narboux. #ITP #Coq
+ [[https://www.reddit.com/r/math/comments/dnc0jj/imo_grand_challenge_automated_problem_solving/][IMO Grand Challenge (Automated problem solving)]]. #ITP #Math #IMO
+ [[https://arxiv.org/abs/1910.10703][Metamath Zero: The cartesian theorem prover]]. ~ M. Carneiro #ITP #MetamathZero
+ [[http://jeff560.tripod.com/set.html][Earliest uses of symbols of set theory and logic]]. ~ J. Miller #Logic #Math
+ [[https://openreview.net/pdf?id=rJxd7vsWPS][Dex: array programming with typed indices]]. ~ D. Maclaurin et als #Haskell #FunctionalProgramming
+ [[https://github.com/google-research/dex-lang][Dex: a research language for array processing in the Haskell/ML family]]. #Haskell #FunctionalProgramming
+ [[http://bit.ly/2hp4IUz][The Zen of Haskell]]. ~ #Haskell
+ [[https://notxor.nueva-actitud.org/blog/2019/06/30/gestionar-bibliografia-con-emacs/][Gestionar bibliografía con Emacs]]. #Emacs
+ [[https://arxiv.org/abs/1910.12320][Formalising perfectoid spaces]]. ~ K. Buzzard, J. Commelin, P. Massot. #ITP #LeanProver #Math
+ [[https://blog.poisson.chat/posts/2019-10-26-reasonable-continuations.html][The reasonable effectiveness of the continuation monad]]. ~ Li-yao Xia. #Haskell #FunctionalProgramming
+ [[https://blog.poisson.chat/posts/2019-10-27-continuation-submonads.html][A monad is just a submonad of the continuation monad, what's the problem?]] ~ Li-yao Xia. #Haskell #FunctionalProgramming
+ [[https://www.researchgate.net/publication/336838722_Computer-supported_Exploration_of_a_Categorical_Axiomatization_of_Modeloids][Computer-supported exploration of a categorical axiomatization of modeloids]]. ~ L. Tiemens, D.S. Scott, C. Benzmüller, M. Benda. #ITP #IsabelleHOL
+ [[https://hal.archives-ouvertes.fr/hal-02333553v1/document][Completeness of an axiomatization of graph isomorphism via graph rewriting in Coq]]. ~ C. Doczkal, D. Pous. #ITP #Coq
+ [[https://hal.inria.fr/tel-02333396/file/thesis.pdf][Formalisation tools for classical analysis (A case study in control theory)]]. ~ D. Rouhling. #PhD_Thesis #ITP Coq #Math
+ [[https://hal.archives-ouvertes.fr/hal-02086931/document][Short proof of Menger’s Theorem in Coq (Proof Pearl)]]. ~ C. Doczkal. #ITP #Coq #Math
+ [[https://www.microsiervos.com/archivo/internet/wayback-machine-conservar-paginas-enlaces-outlinks.html][La Wayback Machine ahora permite conservar páginas de forma fiable junto con todas las páginas a las que enlazan]]. ~ @Alvy. #Internet
+ [[https://www.johndcook.com/blog/2019/10/29/computing-pi-with-bc/][Computing pi with bc]]. ~ John D. Cook. #Math #CompSci

* Noviembre de 2019

+ [[http://www.philipzucker.com/neural-networks-with-weighty-lenses-dioptics/][Neural Networks with Weighty Lenses (DiOptics?)]] ~ Philip Zucker (@SandMouth). #Haskell #NeuralNetworks #FunctionalProgramming
+ [[https://mitibmwatsonailab.mit.edu/research/publications/paper/download/The-Future-of-Work-How-New-Technologies-Are-Transforming-Tasks.pdf][The future of work: How new technologies are transforming tasks]]. ~ M. Fleming et als. #AI #ML
+ [[https://jkeuhlen.com/2019/10/19/Compile-Your-Comments-In-Ghcid.html][Compile your comments in ghcid]]. ~ Jake Keuhlen. #Haskell #FunctionalProgramming
+ [[https://mbuffett.com/scraping-goodreads-sitemaps-with-haskell/][Scraping Goodreads Sitemaps with Haskell]]. ~ Marcus Buffett. #Haskell #FunctionalProgramming
+ [[https://maxhallinan.com/posts/2019/10/22/how-does-the-continuation-monad-work/][How does the continuation monad work?]] ~ Max Hallinan. #PureScript #FunctionalProgramming
+ [[https://copilot-language.github.io/][Copilot: A stream DSL for writing embedded C programs]]. ~ Lee Pike (@pike7464). #Haskell #FunctionalProgramming
+ [[https://www.technologyreview.es/s/11589/esta-ia-resuelve-un-antiguo-problema-matematico-mucho-mas-rapido][Esta IA resuelve un antiguo problema matemático mucho más rápido]]. #IA
+ [[https://blog.ploeh.dk/2019/10/28/a-basic-haskell-solution-to-the-robot-journeys-coding-exercise/][A basic Haskell solution to the robot journeys coding exercise]]. ~ Mark Seemann (@ploeh). #Haskell #FunctionalProgramming
+ [[http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/][The natural number game (version 1.06)]]. ~ K. Buzzard, M. Pedramfar. #ITP #LeanProver #Math
+ [[https://github.com/philzook58/learnxinyminutes-docs/blob/master/coq.html.markdown][Learn Coq in Y minutes tutorial]]. ~ Philip Zucker (@SandMouth). #ITP #Coq
+ [[https://youtu.be/bL6dL1fUTxY][No Garden of Eden: Adventures in Teaching Haskell to Kids]]. ~ Peter Berger (@peterb). #Haskell #FunctionalProgramming
+ [[http://www.cs.cornell.edu/courses/cs4860/2019fa/lectures/L2-A-Story-of-Logic.pdf][The story of Logic]]. ~ Robert L. Constable. #Logic #Math #ITP
+ [[http://www.cs.cornell.edu/courses/cs4860/2019fa/lectures/L5-Comp-Foundations-of-Math.pdf][Computational foundations of Mathematics]]. ~ Robert L. Constable. #Logic Math #CompSci #ITP #Nuprl
+ [[https://arxiv.org/abs/1906.06469][Approximate normalization for gradual dependent types]]. ~ J. Eremondi, É. Tanter, R. Garcia. #GDTL
+ [[https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/][A review of the Lean theorem prover]]. ~ Thomas Hales. #ITP #LeanProver
+ [[https://www.microsiervos.com/archivo/ia/inteligencia-artificial-notas-sobresalientes-examenes-ciencias.html][La inteligencia artificial capaz de puntuar con notas sobresalientes en los exámenes de ciencias]]. ~ @Alvy. #IA 
+ [[https://arxiv.org/abs/1909.01958][From 'F' to 'A' on the N.Y. Regents Science Exams: An Overview of the Aristo Project]]. ~ P. Clark et als. #AI 
+ [[https://arxiv.org/abs/1911.00399][An implementation of Homotopy Type Theory in Isabelle/Pure]]. ~ J. Chen. #MSc_Thesis #ITP #IsabellePure #HoTT 
+ [[https://arxiv.org/abs/1911.00385][A formal proof of PAC learnability for decision stumps]]. ~ J. Tassarotti, J.B. Tristan, K. Vajjha. #ITP #LeanProver
+ [[https://doisinkidney.com/posts/2019-11-02-how-to-binary-random-access-list.html][How to do binary random-access lists simply]]. ~ Donnacha Oisín Kidney (@oisdk). #Agda #FunctionalProgramming #ITP
+ [[http://www.well-typed.com/blog/2019/11/unrolling-data-with-backpack/][Unrolling data with Backpack]]. ~ Oleg Grenrus. #Haskell #FunctionalProgramming
+ [[https://plato.stanford.edu/archives/fall2019/entries/category-theory][Category Theory]]. ~ Jean-Pierre Marquis. #CategoryTheory. 
+ [[https://arxiv.org/abs/1910.13975][A brief tour of logic and optimization]]. ~ J. Hooker. #Logic #Optimization 
+ [[https://www.isa-afp.org/entries/ZFC_in_HOL.html][Zermelo Fraenkel Set Theory in Higher-Order Logic]]. ~ Lawrence C. Paulson. #ITP #IsabelleHOL #Logic #Math
+ [[https://arxiv.org/abs/1910.13554][Differential Hoare logics and refinement calculi for hybrid systems with Isabelle/HOL]]. ~ S. Foster, G. Struth. #ITP #IsabelleHOL
+ [[https://hal.archives-ouvertes.fr/hal-02333564/document][CoqTL: A Coq DSL for rule-based model transformation]]. ~ Z. Cheng, M. Tisi, R. Douence. #ITP #Coq
+ [[http://www.academia.edu/download/59970953/IRJET-V6I553520190709-100880-1y6qr3f.pdf][Recent trends in STM Haskell]]. ~ P. Tiwari, S. Meenu. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1911.00580][Introduction to univalent foundations of mathematics with Agda]]. ~ Martín Hötzel Escardó. #ITP #Agda HoTT
+ [[https://www.ps.uni-saarland.de/Publications/documents/ForsterStark_2019_CoqALaCarte.pdf][Coq à la carte (A practical approach to modular syntax with binders)]]. ~ Y. Forster, K. Stark. #ITP #Coq
+ [[https://bartoszmilewski.com/2019/11/06/fixed-points-and-diagonal-arguments/][Fixed points and diagonal arguments]]. ~ Bartosz Milewski (@BartoszMilewski). #Haskell #Math
+ [[https://lisp-journey.gitlab.io/pythonvslisp/][Python VS Common Lisp, workflow and ecosystem]]. #Python #CommonLisp
+ [[https://yairchu.github.io/posts/sum-type-encodings.html][The four simple ways to encode sum-types]]. ~ Yair Chuchem (@yairchu). #Haskell #FunctionalProgramming
+ [[https://bor0.wordpress.com/2019/11/06/proving-groupoids-with-idris/][Proving groups with Idris]]. ~ Boro Sitnikovski## (@BSitnikovski). #Idris #FunctionalProgramming #ITP
+ [[http://prologhub.pl/predicates-vs-functions/][Predicates vs functions]]. ~ Paul Brown. #Prolog #LogicProgramming
+ [[https://elpais.com/elpais/2019/11/06/ciencia/1573042148_224789.html][Qué es la teoría de categorías y cómo se ha convertido en tendencia]]. ~ John Baez (@johncarlosbaez). #Teoría_de_categorías #Lógica #Matemáticas #Computación
+ [[http://bit.ly/2pXFffg][El problema de Collatz]]. ~ Juan Arias de Reyna. #Matemáticas
+ [[https://www.tweag.io/posts/2019-11-08-monad-bayes-2.html][Probabilistic programming with Monad‑Bayes, Part 2: Linear regression]]. ~ S. Bhat, M. Meschede. #Haskell #FunctionalProgramming
+ [[https://www.ps.uni-saarland.de/Publications/documents/ForsterEtAl_2019_VerifiedTMs.pdf][Verified programming of Turing machines in Coq]]. ~ Y. Forster, F. Kunze, M. Wuttke. #ITP #Coq
+ [[https://es.cs.uni-kl.de/publications/datarsg/Pete19.pdf][Intuitionistic logic: a view of its evolution]]. ~ A.K. Peters. #Logic #CompSci
+ [[https://ir.canterbury.ac.nz/handle/10092/17558][Minimal logic and automated proof verification]]. ~ L. Warren. #PhD_Thesis #ITP #Agda #Logic 
+ [[https://www.methodist.edu/wp-content/uploads/2019/01/mr2018_shane.pdf][Figurate numbers: a historical survey of an ancient mathematics]]. ~ D. Shane. #Math #History
+ [[https://k-bx.github.io/articles/propositions-as-types-missing-links.html][Propositions as types: some missing links]]. ~ Kostiantyn Rybnikov (@ko_bx). #Agda #ITP #Math
+ [[https://bor0.wordpress.com/2019/11/09/formalizing-expresiveness-of-line-editors/][Formalizing expressiveness of line editors]]. ~ Boro Sitnikovski. #ITP #Coq
+ [[https://youtu.be/UebPmYcI13M][Commanding Emacs from Coq]]. #ITP #Coq #Emacs
+ [[https://rjlipton.wordpress.com/2019/11/11/goldbach-a-curious-conjecture/][Goldbach: a curious conjecture]]. ~ R.J. Lipton, K.W. Regan. #Math
+ [[https://github.com/i-am-tom/haskell-exercises][GHC exercises (A little course to learn about some of the more obscure GHC extensions)]]. ~ Tom Harding (@am_i_tom). #Haskell #FunctionalProgramming
+ [[http://www.philipzucker.com/linear-relation-algebra-of-circuits-with-hmatrix/][Linear relation algebra of circuits with HMatrix]]. ~ Philip Zucker (@SandMouth). #Haskell #FunctionalProgramming
+ [[https://markkarpov.com/post/smart-constructors-that-cannot-fail.html][Smart constructors that cannot fail]]. ~ Mark Karpov (@mrkkrp). #Haskell #FunctionalProgramming
+ [[https://marcosh.github.io/post/2019/11/11/named-typeclasses-in-haskell.html][Named typeclasses in Haskell]]. ~ Marco Perone (@marcoshuttle). #Haskell #FunctionalProgramming
+ [[https://dl.acm.org/citation.cfm?id=3359759][Source-free machine-checked validation of native code in Coq]]. ~ K.W. Hamlen, D.Fisher, G.R. Lundquist. #ITP #Coq
+ [[https://arxiv.org/abs/1910.11724][Embracing a mechanized formalization gap]]. ~ A. Spector-Zabusky, J. Breitner, Y. Li, S. Weirich #ITP #Coq #Haskell via @scottfleischman
+ [[https://github.com/jtassarotti/coq-proba][A probability theory library for the Coq theorem prover]]. ~ J. Tassarotti. #ITP #Coq #Math 
+ [[https://www.researchgate.net/publication/337005820_Formalizing_the_Dependency_Pair_Criterion_for_Innermost_Termination][Formalizing the dependency pair criterion for innermost termination]]. ~ A. Alves Almeida, M. Ayala-Rincón. #ITP #PVS
+ [[https://arxiv.org/abs/1712.04375][Computational logic: its origins and applications]]. ~ L.C. Paulson. #Logic #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1804.07860][Formalising mathematics in simple type theory]]. ~ L.C. Paulson. #Logic #Math #ITP #IsabelleHOL
+ [[https://doisinkidney.com/posts/2019-11-15-small-proof-fin-inj.html][A small proof that fin is injective]]. ~ Donnacha Oisín Kidney (@oisdk). #ITP #Agda
+ [[https://www.declanoller.com/2019/11/15/variational-autoencoders-in-haskell-or-how-i-learned-to-stop-worrying-and-turn-my-friends-into-dogs/][Variational autoencoders in Haskell, or: how I learned to stop worrying and turn my friends into dogs]]. ~ @heyitdeclan #Haskell #FunctionalProgramming via @SandMouth
+ [[https://logtalk.org/2019/11/13/many-worlds-design-pattern.html][The "many worlds" design pattern]]. ~ Paulo Moura. #LogicProgramming
+ [[https://prologhub.pl/facts-and-fluents-vs-constants-and-variables/][Facts and fluents vs constants and variables]]. ~ Paul Brown. #Prolog #LogicProgramming 
+ [[https://logtalk.org/2019/11/14/abstracting-user-interaction.html][Abstracting user interaction]]. ~ Paulo Moura. #LogicProgramming
+ [[http://uu.diva-portal.org/smash/get/diva2:1369286/FULLTEXT01.pdf][Monads in Haskell and category theory]]. ~ Samuel Grahn. #Haskell #FunctionalProgramming #CategoryTheory
+ [[http://uu.diva-portal.org/smash/get/diva2:1369180/FULLTEXT01.pdf][Cofree traversable functors]]. ~ L. Waern. #Haskell #FunctionalProgramming #CategoryTheory 
+ [[http://www3.risc.jku.at/publications/download/risc_5936/AXolotlPaper.pdf][AXolotl: A self-study tool for first-order logic]]. ~ David M. Cerna. #Logic
+ [[https://kwarc.info/people/frabe/students/muller_phd.pdf][Mathematical knowledge management across formal libraries]]. ~ D. Müller. #PhD_Thesis #MKM #ITP #PVS
+ [[https://taylor.fausak.me/2019/11/16/haskell-survey-results][2019 state of Haskell survey results]]. ~ Taylor Fausak (@taylorfausak). #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1911.06643][Forgetting to learn logic programs]]. ~ Andrew Cropper. #ILP #LogicProgramming
+ [[https://geekingfrog.com/blog/post/swappable-db][Swap the DB based on a config file]]. ~ Grégoire Charvet. #Haskell #FunctionalProgramming
+ [[https://ozanerdem.github.io/jekyll/update/2019/11/17/representation-in-sat.html][Encoding problems in boolean satisfiability]]. ~ Ozan Erdem (@ozanerdem). #Logic #SAT_solving 
+ [[https://github.com/adjoint-io/galois-fft][Finite field polynomial arithmetic based on fast Fourier transforms]]. ~ Stephen Diehl (@smdiehl). #Haskell #FunctionalProgramming #Math
+ [[https://ondahostil.wordpress.com/2019/10/16/mi-entorno-de-trabajo/][Mi entorno de trabajo en Emacs]]. ~ Ondiz.  #Emacs
+ [[https://sxysun.github.io/files/210/main.pdf][Category theory as a methodology for computational sciences]]. ~ Xinyuan Sun. #CategoryTheory #Haskell
+ [[https://www.lri.fr/~wolff/papers/conf/2019-fide-isabelle_c.pdf][Deeply integrating C11 code support into Isabelle/PIDE]]. ~ F. Tuong, B. Wolff. #ITP #IsabelleHOL 
+ [[https://geekingfrog.com/blog/post/deriving-magic-and-parsing-csv][Deriving magic and parsing CSV]]. ~ Grégoire Charvet. #Haskell #FunctionalProgramming
+ [[http://www.cs.umd.edu/~rrand/vqc][Verified quantum computing]]. ~ Robert Rand. #ITP #Coq #QuantumComputing
+ [[http://www.cs.umd.edu/~rrand/thesis.pdf][Formally verified quantum programming]]. ~ Robert Rand. #PhD_Thesis #ITP #Coq #QuantumComputing
+ [[https://github.com/jldodds/coq-lean-cheatsheet][A quick reference for mapping Coq tactics to Lean tactics]]. ~ Joey Dodds. #ITP #Coq #LeanProver 
+ [[https://www.snoyman.com/blog/2019/11/boring-haskell-manifesto][Boring Haskell manifesto (how to get Haskell into your organization, and how to make your organization more productive and profitable with better engineering)]]. ~ M. Snoyman (@snoyberg). #Haskell #FunctionalProgramming
+ [[https://www.quantamagazine.org/barbara-liskov-is-the-architect-of-modern-algorithms-20191120/][Barbara Liskov: The architect of modern algorithms]]. ~ Susan D'Agostino (@susan_dagostino). #CompSci #Algorithms
+ [[https://github.com/fpvandoorn/lean-links][Links to recourses for the Lean Theorem Prover]]. ~ Floris van Doorn. #ITP #LeanProver
+ [[https://github.com/Gabriel439/slides/blob/master/simple-twitter/slides.md][A bare-bones Twitter clone implemented with Haskell + Nix]]. ~ Gabriel Gonzalez (@GabrielG439). #Haskell #FunctionalProgramming
+ [[https://medium.com/@cdsmithus/codeworld-import-by-hash-2a9a5d18ece][CodeWorld import by Hash]]. ~ Chris Smith (@cdsmithus). #CodeWorld #Haskell 
+ [[https://members.loria.fr/DLarchey/files/papers/MPC_2019.pdf ITP][Certification of breadth-first algorithms by extraction]]~ D. Larchey-Wendling, R. Matthes.  #Coq
+ [[https://arxiv.org/abs/1907.05818][Verified self-explaining computation]]. ~ J. Stolarek, J. Cheney. #ITP #Coq
+ [[https://github.com/bobatkey/CS316-19][The 2019/2020 edition of Strathclyde's CS316 Functional Programming course]]. ~ Bob Atkey. #Haskell #FunctionalProgramming
+ [[https://scholarworks.umass.edu/cgi/viewcontent.cgi?article=2830&context=dissertations_2][Tools for tutoring theoretical computer science topics]]. ~ Mark McCartin-Lim. #PhD_Thesis #CompSci #Logic #ATP
+ [[https://pp.ipd.kit.edu/uploads/publikationen/huisinga19bachelorarbeit.pdf][Formally verified insertion of reference counting instructions]]. ~ Marc Huisinga. #ITP #LeanProver
+ [[https://github.com/jozefg/learn-tt][A collection of resources for learning type theory and type theory adjacent fields]]. ~ Daniel Gratzer. #TypeTheory #CategoryTheory #ITP #Coq #LeanProver #HoTT
+ [[https://arxiv.org/abs/1911.06899][Constructing infinitary quotient-inductive types]]. ~ M. Fiore, A.M. Pitts, S.C. Steenkamp. #ITP #Agda
+ [[https://arxiv.org/abs/1907.10674][ConCert: A smart contract certification framework in Coq]]. ~ D. Annenkov, J.B. Nielsen, B. Spitters. #ITP #Coq #Blockchain
+ [[https://github.com/AU-COBRA/ConCert][ConCert: A framework for smart contract verification in Coq]]. ~ J.B. Nielsen, D. Annenkov. #ITP #Coq #Blockchain
+ [[http://eprints.hsr.ch/798/1/FS%202019-BA-EP-Marti-Kamm-The%20Sequent%20Calculus%20Calculator.pdf][The sequent calculus calculator]]. ~ Matteo Kamm, Mike Marti. #BsC_Thesis #Logic #ITP #Elm #FunctionalProgramming
+ [[https://seqcalc.io][Sequent calculus calculator]]. #Logic #ITP
+ [[https://csound.com/icsc2019/proceedings/13.pdf][Kairos: a Haskell library for live coding Csound performances]]. ~ L. Foletto. #Haskell #FunctionalProgramming #Music
+ [[https://digitalcommons.lsu.edu/gradschool_theses/5037][Supporting the Algebra I curriculum with an introduction to computational thinking course]]. ~ M.M. Laskowski. #MsC_Thesis #CodeWorld #Haskell #Teaching 
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell_Vol11/raw/master/Libro/Examenes_de_PF_con_Haskell_Vol11.pdf][Libro de exámenes de programación funcional con Haskell (versión del 25 de noviembre de 2019)]]. #ProgramaciónFuncional #Haskell #I1M2019
+ [[https://github.com/lemastero/scala_typeclassopedia][Abstractions and constructions from math, implementations in FP languages and formalizations in proof assistants]]. ~ P. Paradziński. #CategoryTheory
+ [[https://steshaw.org/plt][PLT: A path to enlightenment in Programming Language Theory]]. ~ Steven Shaw (@steshaw). #Programming #TypeTheory #FunctionalProgramming #CategoryTheory via @pparadzinski
+ [[https://www.mpi-sws.org/~dreyer/papers/rustbelt/paper.pdf][RustBelt: Securing the foundations of the Rust programming language]]. ~ Ralf Jung et als. #ITP #Coq #Rust
+ [[https://briansteffens.github.io/2017/02/20/from-math-to-machine.html][From math to machine: translating a function to machine code]]. ~ Brian Steffens (@brian_steffens). #Haskell #Math
+ [[https://mmhaskell.com/blog/2019/11/21/digging-into-rusts-syntax][Digging into Rust's syntax]]. ~ James Bowen (@james_OWA). #Programming #Rust #Haskell
+ [[https://www.47deg.com/blog/game-of-life-haskell][Conway's game of life using Haskell and Gloss]]. ~ Alejandro Serrano (@trupill). #Haskell #FunctionalProgramming #Gloss
+ [[http://www.philipzucker.com/categorical-lqr-control-with-linear-relations][Categorical LQR control with linear relations]]. ~ Philip Zucker (@SandMouth). #Haskell #FunctionalProgramming
+ [[https://speakerdeck.com/ajnsit/supercharged-imperative-programming-with-haskell-and-fp][Supercharged imperative programming with Haskell and FP]]. ~ Anupam Jain (@ajnsit). #Haskell #FunctionalProgramming
+ [[http://blog.kleinproject.org/?p=4440][The enormous theorem]]. ~ Sarah Spoenemann. #Math
+ [[https://notxor.nueva-actitud.org/blog/2019/11/26/introduccion-a-emacs/][Introducción a la "Introducción de Emacs"]]. #Emacs
+ [[https://www.research.manchester.ac.uk/portal/files/146395090/FULL_TEXT.PDF][Development of group theory in the language of internal set theory]]. ~ Zoltan Kocsis #PhD_Thesis #ITP #Agda #Logic #Math 
+ [[https://isabelle.in.tum.de/Isar/Isar-induct.pdf][Structured induction proofs in Isabelle/Isar]]. ~ M. Wenzel. #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1911.12073][Property invariant embedding for automated reasoning]]. ~ M. Olšák, C. Kaliszyk, J. Urban. #ATP #MachineLearnig
+ [[https://serokell.io/blog/how-to-learn-haskell-in-10-minutes][How to learn Haskell in 10 minutes a day]]. ~ Yulia Gavrilova. #Haskell #FunctionalProgramming
+ [[https://github.com/astampoulis/makam][The Makam metalanguage: a tool for rapid language prototyping]]. ~ Antonis Stampoulis. #Programming #Makam #OCaml
+ [[https://www.tweag.io/posts/2019-11-28-pcf-makam-spec][How to make your papers run: Executable formal semantics for your language]]. ~ Teodoro Freund. #Programming #Makam  
+ [[https://blog.dropbox.com/topics/work-culture/-the-mind-at-work--guido-van-rossum-on-how-python-makes-thinking][The Mind at Work: Guido van Rossum on how Python makes thinking in code easier]]. ~ Anthony Wing Kosner. #Programming #Python
+ [[https://codesync.global/media/revolution-in-computing-education-at-school-opportunity-and-challenge-cmldn19][The revolution in computing education at school: opportunity and challenge]]. ~ Simon Peyton Jones. #CompSci #Teaching

* Diciembre de 2019

+ [[https://flypitch.github.io/assets/flypitch-cpp.pdf][A formal proof of the independence of the continuum hypothesis]]. ~ Jesse Michael Han, Floris van Doorn. #ITP #LeanProver #Math
+ [[https://hal.archives-ouvertes.fr/hal-02380196/document][Coq Coq correct! Verification of type checking and erasure for Coq, in Coq]]. ~ M. Sozeau et als. #ITP #Coq
+ [[https://openresearch-repository.anu.edu.au/bitstream/1885/176977/1/MyThesisFinal.pdf][Verified and verifiable computation with STV algorithms]]. ~ M.K. Ghale. #PhD_Thesis #ITP #Coq #HOL4
+ [[https://project-archive.inf.ed.ac.uk/msc/20193307/msc_proj.pdf][Exploring Euler’s foundations of differential calculus in Isabelle/HOL using nonstandard analysis]]. ~ J. Rockel. #MsC_Thesis #ITP #IsabelleHOL #Math
+ [[https://pdfs.semanticscholar.org/a1ce/e17fc0fbe24b2da553fd72b44cd62fbacf61.pdf][Learning functional programming]]. ~ S. Thompson. #FunctionalProgramming #Haskell
+ [[https://www.sciencenews.org/article/how-julia-robinson-helped-define-limits-mathematical-knowledge][How Julia Robinson helped define the limits of mathematical knowledge]]. ~ Evelyn Lamb (@evelynjlamb). #Math
+ [[https://arxiv.org/abs/1911.00385][A formal proof of PAC learnability for decision stumps]]. ~ J. Tassarotti, J.B. Tristan, K. Vajjha. #ITP #LeanProver
+ [[https://williamyaoh.com/posts/2019-11-30-how-does-haskell-make-life-easier.html][How does Haskell make your life easier?]] ~ William Yao (@williamyaoh). #Haskell #FunctionalProgramming
+ [[https://notxor.nueva-actitud.org/blog/2019/11/30/trabajo-con-ventanas-y-buffers/][Introducción de Emacs: Trabajo con ventanas y buffers]]. #Emacs
+ [[https://xenaproject.wordpress.com/what-maths-is-in-lean/][What maths is in Lean?]] ~ Kevin Buzzard (@XenaProject). #ITP #LeanProver #Math
+ [[https://scm.iis.sinica.edu.tw/home/2019/deriving-monadic-programs/][Deriving monadic programs]]. ~ Shin-Cheng Mu. #Haskell #FunctionalProgramming
+ [[https://ozanerdem.github.io/jekyll/update/2019/12/01/representation-in-csp.html][Formulating the Hamiltonian Path problem as a constraint satisfaction problem]]. ~ Ozan Erdem (@ozanerdem). #CSP
+ [[https://www.quora.com/What-are-the-advantages-and-disadvantages-of-using-Haskell-to-implement-a-domain-specific-language/answer/Tikhon-Jelvis?ch=2&srid=p9P3][What are the advantages and disadvantages of using Haskell to implement a domain specific language?]] ~ Tikhon Jelvis. #Haskell #FunctionalProgramming #DSL
+ [[https://medium.com/cantors-paradise/a-computability-proof-of-g%C3%B6dels-first-incompleteness-theorem-2d685899117c][A computability proof of Gödel’s first incompleteness theorem]]. ~ Jørgen Veisdal (@JorgenVeisdal). #Logic #Math
+ [[https://research.chalmers.se/publication/508494/file/508494_Fulltext.pdf][Verifying information flow control libraries]]. ~ M. Vassena. #PhD_Thesis #ITP #Agda
+ [[https://nbviewer.jupyter.org/github/CatTheoryByExample/book/blob/master/cattheory.pdf][Category theory by example]]. ~ I. Murashko, A. Radkov, M, Minshin. #CategoryTheory #Haskell #Scala #Cpp  
+ [[https://hal.archives-ouvertes.fr/hal-02385110/document][An implementation of polygraphs]]. ~ Maxime Lucas. #ITP #Coq
+ [[https://codeblock.fedorapeople.org/chapter.pdf][The lambda calculus: A historical and practical tour]]. ~ R.B. Elrod. #LambdaCalculus
+ [[https://francis.naukas.com/2019/12/03/se-logra-factorizar-el-semiprimo-rsa-240-de-795-bits/][Se logra factorizar el semiprimo RSA-240 de 795 bits]]. ~ Francisco R. Villatoro (@emulenews). #Matemáticas #Computación
+ [[https://arxiv.org/abs/1912.01412][Deep learning for symbolic mathematics]]. ~ Guillaume Lample (@GuillaumeLample), François Charton. #DeepLearning via @__josejuan__
+ [[http://www.imm.dtu.dk/~dibj/2019/45years/45years.pdf][45 years of formal methods: Challenges and trends]]. ~ D. Bjørner, K. Havelund. #FormalMethods
+ [[https://eccc.weizmann.ac.il/report/2019/106/ ][Semialgebraic proofs and efficient algorithm design]]. ~  Noah Fleming, Pravesh Kothari, Toniann Pitassi. #Logic
+ [[https://arxiv.org/abs/1912.01032][FourierSAT: A Fourier expansion-based algebraic framework for solving hybrid boolean constraints]]. ~ A. Kyrillidis, A. Shrivastava, M.Y. Vardi, Z. Zhang. #ATP #Logic #SAT_solving
+ [[https://arxiv.org/abs/1912.02150][A probabilistic approach to satisfiability of propositional logic formulae]]. ~ Reazul Hasan Russel. #Logic #ATP #SAT
+ [[https://youtu.be/NfdP6wwjsGk][Correctness proofs of distributed systems with Isabelle]]. ~ Martin Kleppmann. #ITP #IsabelleHOL 
+ [[https://mitadmissions.org/blogs/entry/mathematics-for-computer-science-top-10-proof-techniques-not-allowed/][Mathematics for Computer Science: "Top 10 proof techniques NOT allowed"]]. #Logic
+ [[http://www21.in.tum.de/~ballarin/publications/jar2019.pdf][Exploring the structure of an algebra text with locales]]. ~ Clemens Ballarin. #ITP #IsabelleHOL #Math
+ [[http://conal.net/papers/higher-order-ad/higher-order-ad.pdf][Higher-order, higher-order automatic differentiation]]. ~ Conal Elliott (@conal). #Haskell #FunctionalProgramming
+ [[https://github.com/jules-hedges/open-games-hs][Haskell implementation of open games]]. ~ Jules Hedges (@_julesh_). #Haskell #FunctionalProgramming
+ [[https://ryanglscott.github.io/2019/11/30/four-ways-to-partially-apply-constraint-tuples/][Four ways to partially apply constraint tuples]]. ~ Ryan Scott. #Haskell #FunctionalProgramming
+ [[http://gallium.inria.fr/~agueneau/phd/manuscript.pdf][Mechanized verification of the correctness and asymptotic complexity of programs]]. ~ Armaël Guéneau. #PhD_Thesis #ITP #Coq
+ [[https://www.irif.fr/_media/users/theo/memoirthesis.pdf][Challenges in the collaborative evolution of a proof language and its ecosystem]]. ~ Théo Zimmermann. #PhD_Thesis #ITP #Coq
+ [[https://markkarpov.com/post/haskell-vs-ocaml.html][Haskell vs OCaml]]. ~ Mark Karpov (@mrkkrp). #Haskell #OCaml #FunctionalProgramming
+ [[https://people.mpi-sws.org/][Non-reformist reform for Haskell modularity]]. ~ Scott Kilpatrick. #PhD_Thesis #Haskell #FunctionalProgramming
+ [[https://people.eecs.berkeley.edu/~rtd/PhD%20Rafael%20Tupynamb%C3%A1%20Dutra.pdf][Efficient sampling of SAT and SMT solutions for testing and verification]]. ~ Rafael Tupynambá Dutra. #PhD_Thesis #SAT #SMT
+ [[https://www.onikudaki.net/blog/wp-content/uploads/2019/12/HaskellArticles-1.pdf][A list of Haskell articles on good design, good testing]]. ~ Michael Oswald (@OswaldChocolate). #Haskell #FunctionalProgramming
+ [[https://leanprover-community.github.io/lean-web-editor/][An online JavaScript/WebAssembly version of Lean]]. #ITP #LeanProver 
+ [[https://xenaproject.wordpress.com/2019/12/07/rigorous-mathematics/][Rigorous mathematics]]. ~ Kevin Buzzard (@XenaProject). #ITP #Math
+ [[https://www.fosskers.ca/blog/container-sizes-en.html][Measuring Haskell container sizes]]. ~ Colin Woodbury (@fosskers). #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2019/12/9/data-types-in-rust-borrowing-from-both-worlds][Data types in Rust: Borrowing from both worlds]]. ~ James Bowen (@james_OWA). #Rust #Haskell
+ [[https://reanimate.readthedocs.io/en/latest/glue_tut/][Reanimate: a library for programmatically generating animations with a twist towards mathematics / vector drawings]]. #Haskell
+ [[https://chrisdone.com/posts/ghost-of-departed-proofs-conveniences/][Ghosts of departed proofs convenience]]. ~ Chris Done (@christopherdone). #Haskell
+ [[https://pdxscholar.library.pdx.edu/cgi/viewcontent.cgi?article=6344&context=open_access_etds][Correct-by-construction typechecking with scope graphs]]. ~ Katherine Imhoff Casamento. #MSc_Thesis #ITP #Agda
+ [[https://www.forbes.com/sites/robtoews/2019/11/17/to-understand-the-future-of-ai-study-its-past/][To understand the future of AI, study its past]]. ~ Rob Toews. #AI
+ [[https://arxiv.org/abs/1912.02636][Exploration of neural machine translation in autoformalization of mathematics in Mizar]]. ~ Q. Wang, C. Brown, C. Kaliszyk, J. Urban. #MachineLearning #ITP #Mizar
+ [[https://arxiv.org/abs/1912.02211][A constructive formalization of the weak perfect graph theorem]]. ~ A.K. Singh, R. Natarajan. #ITP #Coq #Math
+ [[https://rdu.unc.edu.ar/handle/11086/14324][Biortogonalidad para corrección de compiladores y adecuación computacional]]. ~ Alejandro E. Gadea. #PhD_Thesis #ITP #Coq
+ [[https://arxiv.org/abs/1912.00237][Introduction to computational thinking: a new high school curriculum using CodeWorld]]. ~ F. Alegre, J. Underwoood, J. Moreno, M. Alegre. #CodeWorld #Haskel #FunctionalProgramming #Teaching 
+ [[https://martin.desharnais.me/public/documents/jfla2020-framework-CertComp.pdf][A generic framework for verified compilers using Isabelle/HOL's locales]]. ~ M. Desharnais, S. Brunthaler. #ITP #IsabelleHOL
+ [[http://web.stanford.edu/~vinayc/intrologic/html/full.html][Logic in secondary education]]. ~ Michael Genesereth, Vinay Chaudhri. #Logic #Teaching
+ [[https://arxiv.org/abs/1912.03028][A survey on theorem provers in formal methods]]. ~ M.S. Nawaz, M. Malik, Y. Li, M. Sun, M. Lali. #ITP #ATP
+ [[http://conal.net/papers/higher-order-ad/higher-order-ad.pdf][Higher-order, higher-order automatic differentiation]]. ~ Conal Elliott (@conal). #Haskell
+ [[http://www.ps.uni-saarland.de/courses/sem-ws19/lambda-intro.pdf][Introduction to lambda calculus]]. ~ G. Smolka. #LambdaCalculus 
+ [[http://www.ps.uni-saarland.de/~smolka/drafts/icl2019.pdf][Computational type theory and interactive theorem proving with Coq]]. ~ G. Smolka. #eBook #ITP #Coq
+ [[https://www.quantamagazine.org/mathematician-terence-tao-and-the-collatz-conjecture-20191211/][Mathematician proves huge result on ‘dangerous’ problem]]. ~ Kevin Hartnett. #Math
+ [[https://doisinkidney.com/posts/2019-12-14-stern-brocot.html][Lazy constructive numbers and the Stern-Brocot tree]]. ~ Donnacha Oisín Kidney (@oisdk). #Haskell #Agda #FunctionalProgramming
+ [[https://arxiv.org/abs/1703.10977][Formalization of some central theorems in combinatorics of finite sets]]. ~ Abhishek Kr Singh. #ITP #Coq #Math
+ [[http://lisp-univ-etc.blogspot.com/2019/12/programming-algorithms-dp.html][Programming algorithms: dynamic programming]]. ~ Vsevolod Dyomkin. #Programming #CommonLisp 
+ [[https://youtu.be/Q6PKdRDKcKA][Dependently typed Haskell in industry (experience report)]]. ~ David Thrane Christiansen. #Haskell #FunctionalProgramming
+ [[http://www.davidchristiansen.dk/pubs/dependent-haskell-experience-report.pdf][Dependently typed Haskell in industry (experience report)]]. ~ David Thrane Christiansen et als. #Haskell #FunctionalProgramming
+ [[http://monografias.ufrn.br:8080/jspui/bitstream/123456789/9912/1/Monografia__Joel_Felipe.pdf][Automatic extraction of Hilbert Calculi associated to fragments of classical logic]]. ~ Joel Felipe Ferreira Gomes. #BSc_Thesis #Haskell #Logic
+ [[https://observablehq.com/@bryangingechen/fibonacci-formalized-1-some-sums][Fibonacci formalized 1: some sums]]. ~ Bryan Gin-ge Chen (@blockspins). #ITP #LeanProver #Math
+ [[https://observablehq.com/@bryangingechen/fibonacci-formalized-2-bees-and-cars][Fibonacci formalized 2: bees and cars]]. ~ Bryan Gin-ge Chen (@blockspins). #ITP #LeanProver #Math
+ [[http://www.staff.science.uu.nl/~swier004/publications/2019-icfp-submission-a.pdf][A predicate transformer semantics for effects]]. ~ Wouter Swierstra, Tim Baanen. #Agda #FunctionalProgramming #ITP
+ [[https://tech.grammarly.com/blog/running-lisp-in-production][Running Lisp in production]]. ~ Vsevolod Dyomkin. #CommonLisp 
+ [[https://arxiv.org/abs/1912.06611][A formal proof of the irrationality of ζ(3)]]. ~ Assia Mahboubi, Thomas Sibut-Pinote. #ITP #Coq #Math
+ [[http://tlringer.github.io/pdf/analytics.pdf][REPLica: REPL instrumentation for Coq analysis]]. ~ Talia Ringer (@TaliaRinger) et als. #ITP #Coq
+ [[https://blog.sigplan.org/2019/12/16/runtime-support-for-multicore-haskell-a-retrospective/][Runtime support for multicore Haskell: a retrospective]]. ~ Simon Marlowe, Simon Peyton Jones, and Satnam Singh. #Haskell #FunctionalProgramming 
+ [[https://tech.fpcomplete.com/blog/casa-and-stack][Casa and Stack]]. ~ Chris Done (@christopherdone). #Haskell #FunctionalProgramming
+ [[https://github.com/alhassy/PrologCheatSheet][PrologCheatSheet: Basics of relational programming with Prolog]]. ~ Musa Al-hassy. #Prolog #LogicProgramming
+ [[https://serokell.io/blog/incomplete-and-utter-introduction-to-modal-logic][Incomplete and utter introduction to modal logic, Pt]]. 1. ~ Danya Rogozin. #Logic
+ [[https://fmfun.github.io/Papers-2019/Shilov-Muravev-Shilova.pdf][Fun with formal methods for better education]]. ~ N. Shilov, E. Muravev, S. Shilova. #FormalMethods #Math
+ [[https://oxij.org/thesis/PhD/PhD.xetex.pdf][On the expressive power of indexed applicative and monadic structures]]. ~ Jan Malakhovski. #PhD_Thesis #Haskell #FunctionalProgramming
+ [[https://dentondaily.com/donald-knuth-reflects-on-50-years-of-the-art-of-computer-programming/][Donald Knuth reflects on 50 years of ‘The Art of Computer Programming‘]]. #Programming
+ [[https://www.isa-afp.org/entries/Poincare_Bendixson.html][The Poincaré-Bendixson theorem in Isabelle/HOL]]. ~ Fabian Immler and Yong Kiam Tan. #ITP #IsabelleHOL #Math
+ [[https://arxiv.org/abs/1910.09336][The Lean mathematical library]]. ~ The mathlib Community. #ITP #LeanProver #Math
+ [[https://serokell.io/blog/top-haskell-open-source-projects-for-linux][Top 10 Haskell open-source projects for Linux users]]. ~ Jonn Mostovoy. #Haskell #FunctionalProgramming
+ [[https://github.com/rrgalvan/numerical_python_course][Course about numerical Python]]. ~ Rafa Rodríguez Galván (@cucharro). #Programming #Python #Math
+ [[https://www.the-tls.co.uk/articles/kurt-godel-incompleteness-theorems/][Kurt Gödel and the mechanization of mathematics]]. ~ Juliette Kennedy. #Math #Logic
+ [[https://arxiv.org/abs/1904.12763][Logic for exact real arithmetic]]. ~ H. Schwichtenberg, F. Wiesnet. #Logic #Math #Minlog #Haskell
+ [[https://www.isa-afp.org/entries/Isabelle_C.html][Isabelle/C: a framework for C code in C11 syntax deeply integrated into the Isabelle/PIDE development environment]]. ~ F. Tuong, B. Wolff. #ITP #Isabelle
+ [[https://byorgey.wordpress.com/2019/12/18/counting-inversions-via-rank-queries/][Counting inversions via rank queries]]. ~ Brent Yorgey. #Haskell #FunctionalProgramming
+ [[https://chrispenner.ca/posts/algebraic][Algebraic lenses]]. ~ Chris Penner (@chrislpenner). #Haskell #FunctionalProgramming
+ [[https://www.tweag.io/posts/2019-12-19-asterius-diagrams.html][Haskell art in your browser with Asterius]]. ~ Sylvain Henry, Shao Cheng. #Haskell #FunctionalProgramming
+ [[https://prezi.com/0wifreih-iwe/como-plantear-y-resolver-problemas-g-polya/][Presentación del método de Polya para la resolución de problemas]]. ~ Jimena Fernández García. #Heurística 
+ [[https://cs-syd.eu/posts/2019-12-14-pretty-relative-time][pretty-relative-time: a little library to describe dates and times in the future or in the past in a nice, human readable, familiar feeling way]]. ~ Tom Sydney Kerckhove. #Haskell #FunctionalProgramming
+ [[http://www.haskellforall.com/2019/12/prefer-to-use-fail-for-io-exceptions.html][Prefer to use fail for IO exceptions]]. ~ G. Gonzalez (@GabrielG439). #Haskell #FunctionalProgramming
+ [[https://asrjetsjournal.org/index.php/American_Scientific_Journal/article/view/5418][Automated reasoning and robotics]]. ~ Zainab Al Kashari, Fatma Al Taheri. #ATP
+ [[https://www.americanscientist.org/article/calculemus CompSci][Calculemus!]] ~ Brian Hayes (@bit_player). #Programming #Math
+ [[http://matryoshka.gforge.inria.fr/pubs/fun_rp_paper.pdf][A verified prover based on ordered resolution]]. ~ A. Schlichtkrull, J.C. Blanchette, D. Traytel. #ITP #IsabelleHOL
+ [[https://eprint.iacr.org/2019/926.pdf][Formal verification of a constant-time preserving C compiler]]. ~ G. Barthe et als. #ITP #Coq
+ [[http://www.philipzucker.com/programming-and-interactive-proving-with-z3py/][Programming and interactive proving with Z3Py]]. ~ Philip Zucker (@SandMouth). #ITP #Z3
+ [[http://www.cs.nott.ac.uk/~psxmah/liquidate.pdf][Liquidate your assets: reasoning about resource usage in Liquid Haskell]]. ~ M.A.T. Handley, N. Vazou, G. Hutton. #Haskell #FunctionalProgramming #LiquidHaskell 
+ [[http://degoes.net/articles/fp-glossary][A glossary of functional programming]]. ~ John A De Goes #FunctionalProgramming
+ [[https://arxiv.org/abs/1912.10642][Notes on Category Theory with examples from basic mathematics]]. ~ Paolo Perrone (@PaoloPerrone8). #CategoryTheory #Math
+ [[https://hackernoon.com/justice-in-a-world-without-time-tp1p33a2][Functional programming and justice in a world without time]]. ~ Anirudh Eka (@anirudh_eka). #FunctionalProgramming
+ [[http://www.math.jhu.edu/~eriehl/compose.pdf][A categorical view of computational effects]]. ~ Emily Riehl. #CategoryTheory #Math #Programming
+ [[https://www.researchgate.net/publication/334549483_FORMALISING_MATHEMATICS_-IN_PRAXIS_A_MATHEMATICIAN%27S_FIRST_EXPERIENCES_WITH_ISABELLEHOL_AND_THE_WHY_AND_HOW_OF_GETTING_STARTED][Formalising Mathematics in praxis: a mathematician's first experiences with Isabelle/HOL and the why and how of getting started]]. ~ Angeliki Koutsoukou-Argyraki (@AngelikiKoutso1). #ITP #IsabelleHOL #Math 
+ [[https://depositonce.tu-berlin.de/bitstream/11303/10372/4/schneider_sven.pdf][Deterministic pushdown automata as specifications for discrete event supervisory control in Isabelle]]. ~ Sven Schneider. #PhD_Thesis #ITP #IsabelleHOL
+ [[http://www.philipzucker.com/stupid-z3py-tricks-verifying-sorting-networks-off-of-wikipedia/][Stupid Z3Py tricks: verifying sorting networks off of Wikipedia]]. ~ Philip Zucker (@SandMouth). #Z3 #SMT
+ [[https://typista.org/categories-in-dotty/][Notes on Category Theory in Scala 3 (Dotty)]]. ~ Juan Pablo Romero (@1jpablo1). #CategoryTheory #Scala #FunctionalProgramming
+ [[http://poleiro.info/posts/2019-12-25-quotients-in-coq.html][Quotients in Coq]]. ~ Arthur Azevedo de Amorim. #ITP #Coq
+ [[http://poleiro.info/posts/2019-12-24-a-verification-challenge.html][A verification challenge]]. ~ Arthur Azevedo de Amorim. #ITP #Coq
+ [[http://blog.deinding.net/maths/cohomology.html][Cohomology for kids]]. ~ @RAnachro. #Math
+ [[https://serokell.io/blog/haskell-highlights-2019][A few Haskell highlights of 2019]]. ~ Gints Dreimanis. #Haskell #FunctionalProgramming
+ [[https://kunigami.blog/2019/12/26/python-type-hints/][Python type hints]]. ~ Guilherme Kunigami (@kunigami). #Python #Programming
+ [[https://personal.cis.strath.ac.uk/fredrik.nordvall-forsberg/papers/ord_cpp2020.pdf][Three equivalent ordinal notation systems in cubical Agda]]. ~ F.N. Forsberg, C. Xu, N. Ghani.  #ITP #Agda
+ [[https://eelcovisser.org/publications/2020/RouvoetPKV20-preprint.pdf][Intrinsically-typed definitional interpreters for linear, session-typed languages]]. ~ A. Rouvoet et als. #ITP #Agda
+ [[http://www.philipzucker.com/more-stupid-z3py-tricks-simple-proofs/][More stupid Z3Py tricks: Simple proofs]]. ~ Philip Zucker (@SandMouth). #Z3 #SMT
+ [[http://bit.ly/2Q5RAbB][12 beautiful mathematical theorems with short proofs]]. ~ Jörg Neunhäuserer. #Math
+ [[http://people.math.harvard.edu/~knill/graphgeometry/papers/fundamental.pdf][Some fundamental theorems in mathematics]]. ~ Oliver Knill. #Math
+ [[http://link.springer.com/content/pdf/bbm%253A978-1-4614-6636-9%252F1.pdf][Famous conjectures in mathematics]]. ~ Béla Bajnok. #Math
+ [[https://arxiv.org/abs/math/0010143][Thirty-six unsolved problems in number theory]]. ~ F. Smarandache. #Math
+ [[http://logic.amu.edu.pl/images/c/c6/Aalcsxxjp.pdf][Famous mistakes in mathematics]]. ~ J. Pogonowski. #Math
+ [[https://arxiv.org/abs/1912.09741][Formalizing determinacy of concurrent revisions]]. ~ Roy Overbeek. #ITP #IsabelleHOL
+ [[https://drops.dagstuhl.de/opus/volltexte/2020/11654/pdf/LIPIcs-CSL-2020-11.pdf][A complete axiomatisation of a fragment of language algebra]]. ~ Paul Brunet. #ITP #Coq #Math
+ [[http://pleiad.dcc.uchile.cl/papers/2020/diazAl-cpp2020.pdf][A mechanized formalization of GraphQL]]. ~ T. Díaz, F. Olmedo, É. Tanter. #ITP #Coq
+ [[http://www.philipzucker.com/stupid-z3py-tricks-strikes-back-verifying-a-keras-neural-network/][Stupid Z3Py tricks strikes back: Verifying a Keras neural network]]. ~ Philip Zucker (@SandMouth). #Z3 #SMT #Keras #NeuralNetworks
+ [[https://tech.fpcomplete.com/blog/teaching-haskell-with-duet][Teaching Haskell with Duet]]. ~ Chris Done (@christopherdone). #Haskell #FunctionalProgramming #Duet
+ [[http://www.cs.cmu.edu/~yongkiat/files/poincarebendixson.pdf][The Poincaré-Bendixson theorem in Isabelle/HOL]]. ~ Fabian Immler, Yong Kiam Tan. #ITP #IsabelleHOL #Math
+ [[https://arxiv.org/abs/1912.10285][Verifying x86 instruction implementations]]. ~ S. Goel et als. #ITP #ACL2

