#+TITLE: Lecturas del Grupo de Lógica Computacional durante el año 2018
#+OPTIONS: ^:nil

Este repositorio es una recopilación de lecturas compartidas en la lista de
correo del [[http://www.glc.us.es][grupo de lógica computacional]] durante el año 2018. La recopilación
está ordenada por la fecha de su publicación en la lista. Al final de cada
artículo se encuentra etiquetas relativas a los sistemas que usa o a su
contenido.

* Contenido                                                             :TOC:
- [[#enero-2018][Enero 2018]]
- [[#febrero-2018][Febrero 2018]]
- [[#marzo-2018][Marzo 2018]]
- [[#abril-2018][Abril 2018]]
- [[#mayo-2018][Mayo 2018]]
- [[#junio-2018][Junio 2018]]
- [[#julio-2018][Julio 2018]]
- [[#agosto-2018][Agosto 2018]]
- [[#septiembre-2018][Septiembre 2018]]
- [[#octubre-2018][Octubre 2018]]
- [[#noviembre-2018][Noviembre 2018]]
- [[#diciembre-2018][Diciembre 2018]]

* Enero 2018

+ [[http://books.goalkicker.com/HaskellBook][Haskell notes for professionals book]]. #eBook #Haskell
+ [[https://arxiv.org/abs/1712.09288][An extensible ad hoc interface between Lean and Mathematica]]. ~ R.Y. Lewis
  #ITP #Lean #Mathematica
+ [[https://markkarpov.com/tutorial/th.html][Template Haskell tutorial]]. ~ M. Karpov #Haskell
+ [[http://www.cs.us.es/~fsancho/?e=189][Algoritmo de Monte Carlo aplicado a búsquedas en espacios de estados]]. ~
  F. Sancho #IA
+ [[https://github.com/A1kmm/proofsweeper][ProofSweeper: Play Minesweeper by formally proving your moves in Idris]]. ~
  Andrew Miller #Idris #Haskell
+ [[https://m-renaud-haskell-containers.readthedocs.io/en/docs/][Haskell containers package]]. ~ Matt Renaud #Haskell 
+ [[https://www.isa-afp.org/entries/Falling_Factorial_Sum.html][The falling factorial of a sum]]. ~ L. Bulwahn #IsabelleHOL
+ [[https://matthias-endler.de/2018/functional-mathematics/][Functional programming for mathematical computing]]. ~ Matthias Endler
  #Haskell
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell/raw/master/Examenes_de_PF_con_Haskell.pdf][Libro de exámenes de programación funcional con Haskell (versión del 6 de
  enero de 2018)]]. #Haskell #I1M2017
+ [[https://www.math.wisc.edu/~miller/old/m771-10/kunen770.pdf][The foundations of mathematics]]. ~ K. Kunen #eBook #Logic #Math
+ [[http://comonad.com/reader/2018/the-state-comonad/][Is State a Comonad?]] ~ Edward Kmett #Haskell
+ [[https://pron.github.io/posts/computation-logic-algebra-pt1][Finite of sense and infinite of thought: a history of computation, logic and
  algebra, part I]]. ~ Ron Pressler #Logic #Math #CompSci
+ [[https://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality][Formal verification: the gap between perfect code and reality]]. ~ Ray Wang #Formal_methods
+ [[https://media.ccc.de/v/34c3-9105-coming_soon_machine-checked_mathematical_proofs_in_everyday_software_and_hardware_development][Coming soon: machine-checked mathematical proofs in everyday software and
  hardware development]]. ~ Adam Chlipala #ITP
+ [[http://ace.cs.ohio.edu/~gstewart/papers/snaarkl.pdf][Snårkl: Somewhat practical, pretty much declarative verifiable computing in Haskell]]. ~ G. Stewart, S. Merten, L. Leland #Haskell
+ [[https://arxiv.org/abs/1801.00471][TWAM: A certifying abstract machine for logic programs]]. ~ B. Bohrer, K. Crary
  #ITP #LF
+ [[https://www.isa-afp.org/entries/Kuratowski_Closure_Complement.html][The Kuratowski closure-complement theorem in Isabelle/HOL]]. ~ P. Gammie,
  G. Gioiosa #ITP #IsabelleHOL #Math
+ [[http://kaygun.tumblr.com/post/169392012379/the-shoelace-formula-for-the-area-of-a-polygon][The Shoelace formula for the area of a polygon]]. ~ Atabey Kaygun
  #CommonLisp #Math
+ [[https://blog.merovius.de/2018/01/08/monads-are-just-monoids.html][Monads are just monoids in the category of endofunctors]]. ~ Axel Wagner
  #Haskell #Math
+ [[https://medium.freecodecamp.org/10-awkward-moments-in-math-history-d364706d902d][10 awkward moments in math history]]. ~ Elena Nisioti #Math
  #History
+ [[https://github.com/joom/hezarfen][Hezarfen: a theorem prover for intuitionistic propositional logic in Idris]]. ~
  Joomy Korkut #Idris #Haskell #Logic
+ [[https://m.magnet.xataka.com/preguntas-no-tan-frecuentes/las-universidades-de-eeuu-al-fin-lo-han-reconocido-empezar-a-programar-por-java-es-una-mala-idea][Las universidades de EEUU al fin lo han reconocido: empezar a programar por
  Java es una mala idea]]. ~ Esther Miguel Trula
+ [[https://medium.com/@ptitfred/haskell-and-fp-a83b5b22f67f][Haskell et programmation fonctionnelle, ma conviction]]. ~ Frédéric Menou
  #Haskell
+ [[https://www.isa-afp.org/entries/Taylor_Models.html][A formally verified implementation of multivariate Taylor models in
  Isabelle/HOL]]. ~ C. Traut, F. Immler #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Green.html][An Isabelle/HOL formalisation of Green's theorem]]. ~ M. Abdulaziz,
  L.C. Paulson #ITP #IsabelleHOL #Math
+ [[https://blog.jle.im/entry/introduction-to-singletons-2.html][Introduction to Singletons (Part 2)]]. ~ Justin Le #Haskell
+ [[https://openlibra.com/es/book/a-friendly-introduction-to-mathematical-logic][A friendly introduction to mathematical logic]]. ~ Christopher C. Leary #eBook
  #Logic
+ [[https://jeremykun.com/2017/12/29/np-hard-does-not-mean-hard/][NP-hard does not mean hard]]. ~ Jeremy Kun | Math ∩ Programming
  #CompSci
+ [[http://oeuf.uwplse.org/oeuf-cpp18.pdf][Œuf: Minimizing the Coq extraction TCB]]. ~ E. Mullen et als. #Coq
+ [[https://github.com/conal/talk-2018-essence-of-ad][The simple essence of automatic differentiation]]. ~ Conal Elliott
  #Haskell
+ [[https://github.com/leftaroundabout/linearmap-family][linearmap-family: Purely-functional, coordinate-free linear algebra]]. ~ Justus
  Sagemüller #Haskell #Math
+ [[https://github.com/mandubian/neurocat][From neural networks to the Category of composable supervised learning
  algorithms in Scala with compile-time matrix checking based on
  singleton-types]]. ~ Pascal Voitot #Scala
+ [[https://docs.google.com/presentation/d/1Zc2A7nkpuxnCRlILPeKRJCWIqv-gtsMJIizDQ9a3vPo][CodeWorld: The why, what, and how of teaching Haskell to children]]. ~ Chris
  Smith #Haskell
+ [[http://blog.stephenwolfram.com/2016/09/how-to-teach-computational-thinking][How to teach computational thinking]]. ~ Stephen Wolfram #Teaching #CompSci
+ [[https://blogs.ams.org/matheducation/2017/01/09/integrating-computer-science-in-math-the-potential-is-great-but-so-are-the-risks][Integrating computer science in math: the potential is great, but so are the
  risks]]. ~ Emmanuel Schanzer #Teaching #CompSci #Math
+ [[http://www.BootstrapWorld.org][Bootstrap]]: a research project at Brown University that offers a series of
  curricular modules built around purely mathematical
  programming. #Teaching #CompSci #Math 
+ [[http://publicdomainreview.org/2016/11/10/let-us-calculate-leibniz-llull-and-computational-imagination]["Let us calculate!": Leibniz, Llull, and the computational imagination]]. ~
  Jonathan Gray 
+ [[https://arxiv.org/abs/1801.04163][A tableaux calculus for reducing proof size]]. ~ M.P. Lettmann, N. Peltier
  #Logic #ATP
+ [[http://wiki.science.ru.nl/tfpie/images/3/32/Alegre.pdf][Haskell in middle and high school mathematics]]. ~ F. Alegre, J. Moreno
  #Haskell #Math
+ [[https://github.com/alphalambda/k12math][Mathematics for middle and high school in Haskell]]. #Haskell #Math
+ [[https://codurance.com/2018/01/11/applicatives-validation][Applicative functors and data validation, part II]]. ~ Carlos Morera de la
  Chica #Haskell
+ [[https://hal.inria.fr/hal-01673518/file/dissertation.pdf][Extending higher-order logic with predicate subtyping: application to PVS]]. ~
  Frédéric Gilbert #ITP #PVS
+ [[http://www.cs.nott.ac.uk/~psxjb5/publications/2017-BrackerNilsson-SupermonadsAndSuperapplicatives-UnderConsideration.pdf][Supermonads and superapplicatives]]. ~ J. Bracker, H. Nilsson #Haskell #Agda
+ [[http://rewriting.gforge.inria.fr/1-33/main.pdf][Lecture notes on rewriting theory]]. ~ F. Blanqui 
+ [[http://www.ssrg.nicta.com.au/publications/csiro_full_text/Amani_BSB_18.pdf][Towards verifying Ethereum smart contract bytecode in Isabelle/HOL]]. ~
  S. Amani, M. Bégel, M. Bortin, M. Staples #ITP #IsabelleHOL
+ [[https://youtu.be/X_jVcWEgp4A][Guía turística de Sevilla con Scratch]]. ~ @programamos #Scratch
+ [[http://cl-informatik.uibk.ac.at/users/cek/docs/18/jpck-cpp18.pdf][Formal microeconomic foundations and the First Welfare Theorem]]. ~
  C. Kaliszyk, J. Parsert #ITP #IsabelleHOL
+ [[https://homes.cs.washington.edu/~emina/blog/2017-06-23-a-primer-on-sat.html][A primer on boolean satisfiability]]. ~ Emina Torlak #Logic #SAT #Racket
+ [[https://courses.cs.washington.edu/courses/cse507/17wi/calendar.html][Course: Computer-aided reasoning for software]]. ~ E. Torlak
  #AutomatedReasoning #Logic
+ [[https://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/slides/week1-1-annot.pdf][Functional programming principles in Scala]]. ~ Martin Odersky
  #FunctionalProgramming #Scala
+ [[http://www.cs.unc.edu/~amos/data/csci2017-isse.pdf][Formalizing data management systems: a case study of Syndicate protocol]]. ~
  C.K. Wang, H. Xu #ITP #Coq
+ [[http://comonad.com/reader/2018/computational-quadrinitarianism-curious-correspondences-go-cubical/][Computational Quadrinitarianism (Curious Correspondences go Cubical)]]. ~
  Gershom Bazerman #CompSci
+ [[https://arxiv.org/abs/1801.05423][A random walk through experimental mathematics]]. ~ E.Y.S. Chan, R.M. Corless
  #Math #Programming
+ [[http://cl-informatik.uibk.ac.at/teaching/ws17/fp/pdfs/lambda.pdf][λ-calculus]]. ~ Christian Sternagel #Logic #Haskell #CompSci
+ [[http://www.cs.princeton.edu/~olivierb/papers/shrink.pdf][Shrink fast correctly!]] ~ Olivier Savary Bélanger, Andrew W. Appel #ITP #Coq
+ [[http://kaygun.tumblr.com/post/169730814509/hofstadters-q-sequence][Hofstadter’s Q sequence]]. ~ Atabey Kaygun #CommonLisp #Math
+ [[http://admission.cs.cityu.edu.hk/CommonMyths][Ten common myths about Computer Science]]. #CompSci
+ [[http://cl-informatik.uibk.ac.at/teaching/ws17/fp/pdfs/reasoning.pdf][Reasoning about functional programs]]. ~ Christian Sternagel #Logic #Haskell 
+ [[https://avigad.github.io/formal_methods_in_education][Resources for teaching with formal methods]]. ~ Jeremy Avigad #FormalMethods 
+ [[http://arg.ciirc.cvut.cz/fmpa/slides/intro1.pdf][Computer understandable mathematics]]. ~ Josef Urban #ATP #ITP #Math
+ [[https://repositorio.inesctec.pt/bitstream/123456789/5441/1/P-00M-T6A.pdf][The specification and analysis of use properties of a nuclear control system]]. 
  ~ M.D. Harrison, P.M. Masci, J. Creissac Campos and P. Curzon #ITP #PVS
+ [[http://cl-informatik.uibk.ac.at/teaching/ws17/fp/pdfs/efficiency.pdf][Efficiency of functional programs]]. ~ Christian Sternagel and Harald Zankl
  #Haskell
+ [[http://www.cl.cam.ac.uk/~jrh13/papers/joerg.pdf][History of interactive theorem proving]]. ~ John Harrison, Josef Urban and
  Freek Wiedijk #ITP
+ [[https://es.slideshare.net/TiinaPartanen/computational-thinking-as-an-emergent-learning-trajectory-of-mathematics][Computational thinking as an emergent learning trajectory of mathematics]]. ~
  Tiina Partanen #Math #CompSci
+ [[https://hal.inria.fr/tel-01680213/document][Verification of a concurrent garbage collector]]. ~ Yannick Zakowski #PhDThesis
  #ITP #Coq
+ [[http://cl-informatik.uibk.ac.at/teaching/ws17/fp/pdfs/typing.pdf][Typing of functional programs]]. ~ Christian Sternagel #Logic
  #FunctionalProgramming
+ [[https://programamos.es/creando-un-videojuego-paso-a-paso-con-scratch-desde-cero][Creando un videojuego paso a paso con Scratch desde cero]]. ~ Jesús Moreno León
  #Scratch
+ [[https://coda.wickstrom.tech/episodes/2018-01-19-domain-modelling-with-haskell-data-structures.html][Domain modelling with Haskell: data structures]]. ~ Oskar Wickström #Haskell
+ [[https://popl18.sigplan.org/event/plmw-popl-2018-liquidhaskell-overview][Liquid Haskell: refinement types for Haskell]]. ~ Niki Vazou
  #Haskell #LiquidHaskell
+ [[https://arxiv.org/abs/1801.05206][Sequences, yet functions: the dual nature of data-stream processing]]. ~
  S. Herbst, J. Tenschert, A.M. Wahl, K. Meyer-Wegener #ITP #Coq
+ [[http://cl-informatik.uibk.ac.at/teaching/ws17/fp/content.php][Course: Functional programming]]. ~ Christian Sternagel et als. #Haskell
+ [[https://dbp.io/essays/2018-01-16-how-to-prove-a-compiler-correct.html][How to prove a compiler correct]]. ~ Daniel Patterson #Haskell 
+ [[http://ozark.hendrix.edu/~yorgey/pub/explaining-errors-slides.pdf][Explaining type errors]]. ~ B. Yorgey, R. Eisenberg, H. Eades #Haskell
+ [[https://arxiv.org/abs/1801.04026][Relational characterisations of paths]]. ~ R. Berghammer, H. Furusawa,
  W. Guttmann, P. Höfner #ITP #IsabelleHOL
+ [[https://mmhaskell.com/blog/2018/1/22/functors-done-quick][Functors done quick!]] ~ James Bowen #Haskell
+ [[https://programamos.es/laberinto-principiantes][Programando un laberinto con Scratch, ¡para principiantes!]] ~ Alejandra
  Sánchez Acosta #Scratch
+ [[https://popl18.sigplan.org/event/plmw-popl-2018-dafny-overview][Dafny overview]]. ~ K. Rustan M. Leino #Dafny
+ [[https://blog.jle.im/entry/interpreters-a-la-carte-duet.html]["Interpreters a la Carte" in Advent of Code 2017 Duet]]. ~ Justin Le
  #Haskell
+ [[http://matryoshka.gforge.inria.fr/pubs/rp_paper.pdf][Formalization of Bachmair and Ganzinger's ordered resolution prover]]. ~
  A. Schlichtkrull, J.C. Blanchette, D. Traytel and U. Waldmann ([[https://www.isa-afp.org/entries/Ordered_Resolution_Prover.html][Code]]) #ITP
  #IsabelleHOL
+ [[https://eli.thegreenplace.net/2018/haskell-functions-as-functors-applicatives-and-monads][Haskell functions as functors, applicatives and monads]]. ~ Eli Bendersky
  #Haskell
+ [[https://argumatronic.com/posts/2018-01-23-the-nesting-instinct.html][The nesting instinct]]. ~ Julie Moronuki #Haskell
+ [[https://arxiv.org/abs/1801.06566][Model theory and machine learning]]. ~ H. Chase, J. Freitag #Logic #AI
+ [[https://arxiv.org/abs/1801.07528][Computer-assisted proving of combinatorial conjectures over finite domains: a
  case study of a chess conjecture]]. ~ P. Janičić, F. Marić, M. Maliković #ITP
  #IsabelleHOL
+ [[https://bartoszmilewski.com/2018/01/23/pointwise-kan-extensions][Pointwise Kan extensions]]. ~ Bartosz Milewski #CategoryTheory #Haskell
+ [[http://inventwithpython.com/cracking][Cracking codes with Python: An introduction to building and breaking ciphers]]. 
  ~ Al Sweigart #eBook #Programming #Python
+ [[http://www.redprl.org][RedPRL: a proof assistant for Computational Higher-Dimensional Type Theory]]. 
  #ITP #RedPRL #SML
+ [[http://www.cs.cmu.edu/~rwh/talks/POPL18-Tutorial.pdf][Computational (higher) type theory]]. ~ R. Harper and C. Angiuli #RedPRL #SML
+ [[https://www.contextfreeart.org/gallery2/][Context Free/cfdg]]: a simple language for generating stunning images. With
  only a few lines you can describe abstract art, beautiful organic scenery,
  and many kinds of fractals.
+ [[https://github.com/ucsd-progsys/elsa][Elsa: a lambda calculus evaluator]]. ~ R. Jhala. #Haskell #Logic #LambdaCalculus
+ [[https://www.nature.com/articles/d41586-018-00604-6][China enters the battle for AI talent]]. #AI  
+ [[https://arxiv.org/abs/1801.05950][Toward scalable verification for safety-critical deep networks]]. ~ L. Kuper et als. #NeuralNetworks #SMT
+ [[https://elpais.com/elpais/2018/01/24/el_aleph/1516812203_870138.amp.html][El curioso caso de la secuencia de Goodstein]]. ~ M.A. Morales | El Aleph
  #Matemáticas
+ [[https://plus.maths.org/content/conversation-stephen-cook-0][A conversation with Stephen Cook]]. #CompSci
+ [[http://kaygun.tumblr.com/post/170044995839/collatz-sequence-yet-again][Collatz sequence (yet again)]]. ~ Atabey Kaygun #CommonLisp
  #Math
+ [[https://www.dataquest.io/blog/introduction-functional-programming-python/][Introduction to functional programming in Python]]. ~ Spiro Sideris
  #FunctionalProgramming #Python
+ [[https://arxiv.org/abs/1801.08441][Finitary-based domain theory in Coq: An early report]]. ~ M.A. AbdelGawad #ITP
  #Coq
+ [[https://coda.wickstrom.tech/episodes/2018-01-22-domain-modelling-with-haskell-generalizing-with-foldable-and-traversable.html][Domain modelling with Haskell: Generalizing with Foldable and Traversable]]. ~
  Oskar Wickström #Haskell
+ [[https://storm-country.com/blog/LambdaCase][LambdaCase in the wild]]. ~ Matt Noonan #Haskell
+ [[http://blog.sumtypeofway.com/recursion-schemes-part-41-2-better-living-through-base-functors][Recursion schemes, Part 4½: Better living through base functors]]. ~ Patrick
  Thomson #Haskell
+ [[https://codurance.com/2018/01/25/lambda-calculus-in-clojure-part-2/][Lambda calculus in Clojure (Part 2)]]. ~ Sergio Rodrigo Royo #LambdaCalculus
  #Clojure
+ [[http://www.openculture.com/2017/08/free-you-can-now-read-classic-books-by-mit-press-on-archive-org.html][Free: You can now read classic books by MIT Press on archive.org]] #eBooks
+ [[https://www.forbes.com/sites/quora/2018/01/24/when-is-haskell-more-useful-than-r-or-python-in-data-science/#6e0cdcc069e4][When is Haskell more useful than R or Python in Data Science?]] ~ Tikhon Jelvis
  #Haskell #Rstats #Python #DataScience
+ [[https://www.tweag.io/posts/2015-09-08-programming-r-at-native-speed-in-haskell.html][Programming R at native speed using Haskell]]. ~ M. Boespflug, F. Domínguez,
  A. Vershilov #Haskell #Rstats
+ [[https://github.com/patrickdoc/hash-graph][A hashing-based graph implementation in Haskell]]. ~ Patrick Dougherty #Haskell
+ [[http://www.usrsb.in/selling-laziness.html][Selling laziness]]. ~ Alex Beal #Programming
+ [[https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf][Why functional programming matters]]. ~ John Hughes #FunctionalProgramming
  #Miranda
+ [[http://community.wolfram.com/groups/-/m/t/943405][A toy Wolfram Language interpreter in Haskell]]. ~ Yonghao Jin #Haskell
+ [[http://www.usrsb.in/org-mode.html][Org-mode: An integrated language and editor]]. ~ Alex Beal #Emacs
  #Haskell
+ [[https://medium.com/@willkurt/why-sum-types-matter-in-haskell-ba2c1ab4e372][Why sum types matter in Haskell]]. ~ Will Kurt #Haskell
+ [[https://dl.acm.org/ft_gateway.cfm?id=3158104&ftid=1936978&dwn=1&CFID=3130691&CFTOKEN=c3031a6fe3e8c92e-6E2750E0-9DA8-6D3C-4BBD90D8137A463D][Intrinsically-typed definitional interpreters for imperative languages]]. ~
  C. Bach Poulsen, A. Rouvoet, A. Tolmach, R. Krebbers #ITP #Agda
+ [[http://tomasp.net/academic/drafts/monads/paper.pdf][Monads are not what they seem (Uncovering the hidden nature of programming concepts)]]. 
  ~ T. Petricek #Math #CompSci
+ [[http://www.cs.tufts.edu/comp/116/archive/fall2017/xqi.pdf][Securing complex software systems using formal verification and specification]]. 
  ~ X. Qi #FormalVerification
+ [[https://youtu.be/z3pm1dFvhMQ][Programación funcional: la programación del futuro]]. ~ Moises Vázquez
  #ProgramacionFuncional #Haskell 
+ [[https://link.springer.com/content/pdf/10.1007%2Fs10817-017-9448-y.pdf][A verified ODE solver and the Lorenz attractor]]. ~ F. Immler #ITP #IsabelleHOL
+ [[https://youtu.be/0u3lY2eUHpA][Un vistazo al futuro: revisando demostraciones matemáticas con la computadora]]. 
  ~ Moisés Vázquez #DAO
+ [[http://www.mathnet.or.kr/mathnet/thesis_file/JKMS-54-5-1521-1536.pdf][Formalizing the meta-theory of first-order predicate logic]]. ~ H. Herberlin,
  S.Y. Kim, G. Lee #ITP #Coq #Logic
+ [[http://www.logicmatters.net/2018/01/29/category-theory-a-gentle-introduction][Category theory: a gentle introduction]]. ~ Peter Smith
  #CategoryTheory
+ [[https://pastel.archives-ouvertes.fr/tel-01691185/document][Investigations in computer-aided mathematics: experimentation, computation,
  and certification]]. ~ Thomas Sibut Pinote #PhDThesis #ITP #Coq
+ [[https://pps2018.soic.indiana.edu/files/2017/12/dselsam_pps_2018.pdf][Formal methods for probabilistic programming]]. ~ D. Selsam, P. Liang,
  D.L. Dill #ITP #Lean
+ [[https://github.com/dselsam/certigrad][Certigrad: Bug-free machine learning on stochastic computation graphs]]. ~
  D. Selsam #ITP #Lean

* Febrero 2018

+ [[http://diginole.lib.fsu.edu/islandora/object/fsu:407377/datastream/PDF/view][Homotopy type theory, univalent foundation, and binary trees]]. ~ R. Beauvile
  #ITP #Coq #HoTT
+ [[http://www.cse.chalmers.se/~patrikj/talks/DSLsofMath_FP_WM_2018_Jansson.pdf][DSLsofMath: typing mathematics]]. ~ Patrik Jansson, Cezar Ionescu
  #Haskell #Math
+ [[https://arxiv.org/abs/1801.10513][The Elfe system: Verifying mathematical proofs of undergraduate students]]. ~
  Maximilian Doré, Krysia Broda #Math #Elfe
+ [[https://www.slideshare.net/nckumar/ai-for-marketing-presentation-by-chandrakumar][AI for marketing]]. ~ Chandrakumar #AI 
+ [[https://arxiv.org/pdf/1802.00405][HOL Light QE]]. ~ Jacques Carette, William M. Farmer, Patrick Laskowski #ITP
  #HOL_Light
+ [[https://medium.com/@robbie0630/dissecting-the-state-monad-with-operational-and-free-monads-3b965479f13c][Dissecting the State monad with Operational and Free monads]]. ~ Robbie Langer
  #Haskell
+ [[http://www.lcc.uma.es/~blas/apuntes/PDAv/lambdaC.pdf][El λ–cálculo (sin tipos y con tipos)]]. ~ B.C. Ruiz y P. Guerrero #Matemáticas
  #Computación
+ [[https://arxiv.org/pdf/1503.09060][A tutorial introduction to the lambda calculus]]. ~ Raul Rojas #Logic #CompSci
+ [[http://www.ist.tugraz.at/projects/isac/publ/RR_neuper.pdf]["Speaking" mathematics with "systems that explain themselves"]]. ~ Walther
  Neuper #ITP #Math
+ [[https://arxiv.org/abs/1801.08766][Relational equivalence proofs between imperative and MapReduce algorithms]]. ~
  B. Beckert et als. #ITP #Coq
+ [[http://www.joachim-breitner.de/blog/735-The_magic_%E2%80%9CJust_do_it%E2%80%9D_type_class][The magic “Just do it” type class]]. ~ J. Breitner #Haskell
+ [[https://github.com/mikkokotila/jupyter4kids][Numerical computing is fun (A guide to principles of computer science and
  numerical computing for all ages)]]. ~ Mikko Kotila #CompSci #Python #Jupiter
+ [[http://learn.hfm.io/fractals.html][Spirals, snowflakes & trees: Recursion in pictures]]. ~ G. Keller &
  M.M.T. Chakravarty #Haskell #Fractals
+ [[https://gregheartsfield.com/fractal-hs/][Fractals in Haskell (Escape-time fractals created with Haskell and GD)]]. ~
  Greg Heartsfield #Haskell #Fractals
+ [[http://fhtr.blogspot.com.es/2008/12/drawing-tree-with-haskell-and-cairo.html][Drawing trees with Haskell and Cairo]]. ~ Ilmari Heikkinen #Haskell #Fractals
+ [[https://github.com/fniessen/refcard-org-beamer][Org Beamer reference card]]. ~ Fabrice Niessen #Emacs #OrgMode #LaTeX
+ [[https://www.isa-afp.org/entries/LLL_Basis_Reduction.html][A verified Lenstra-Lenstra-Lovász basis reduction algorithm in
  Isabelle/HOL]]. ~ J. Divasón, S. Joosten, R. Thiemann and A. Yamada #ITP
  #IsabelleHOL #Math
+ [[https://medium.com/@sahabi/haskelling-bitcoin-7e7128a9d4b4][Haskelling Bitcoin (The case for Bitcoin development in Haskell)]]. ~
  M. Alshiekh #Haskell #Bitcoin
+ [[https://jncf2018.lip6.fr/files/lecture-notes/jncf2018-mahboubi.pdf][Calcul formel et preuves formelles]]. ~ Assia Mahboubi #ITP #Mizar #ACL2
  #IsabelleHOL #HOL_Light #Coq #Agda #Lean
+ [[https://dl.acm.org/citation.cfm?id=3167090][A monadic framework for relational verification: Applied to information
  security, program equivalence, and optimizations]]. ~ N. Grimm et als. #SMT
  #Fsharp
+ [[https://dl.acm.org/ft_gateway.cfm?id=3167103&type?pdf][Efficient certification of complexity proofs: formalizing the
  Perron–Frobenius theorem]]. ~ J. Divasón et als. #ITP #IsabelleHOL
+ [[http://bit.ly/2s78m03][Ciencias de la Computación (mejores programas y programadores)]]. ~ Lourdes del
  Carmen González Huesca #Computación
+ [[https://sites.google.com/ciencias.unam.mx/lcomp172-7040/inicio][Curso: Lógica computacional]]. ~ Lourdes del Carmen González Huesca #Lógica
  #Computación #Haskell #Prolog #Coq
+ [[http://vaibhavsagar.com/blog/2018/02/04/revisiting-monadic-parsing-haskell][Revisiting 'Monadic parsing in Haskell']]. ~ Vaibhav Sagar #Haskell
+ [[https://dodisturb.me/posts/2018-01-28-Cellular-Christmas-Tree.html][Cellular Christmas Tree]]. ~ Mistral Contrastin #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3167091][A Coq formalization of normalization by evaluation for Martin-Löf type
  theory]]. ~ P. Wieczorek, D. Biernacki #ITP #Coq
+ [[https://arxiv.org/abs/1705.02601][Logic lectures: Gödel’s basic logic course at Notre Dame]]. #Logic
+ [[http://www.haskellforall.com/2018/02/the-wizard-monoid.html][The wizard monoid]]. ~ G. González #Haskell
+ [[https://arxiv.org/abs/1802.01795][A Lean formalization of Matiyasevič's theorem]]. ~ Mario Carneiro #ITP #Lean
+ [[https://github.com/lnds/9d9l][9 desafíos en 9 lenguajes de programación]]. ~ Eduardo Díaz Cortés #Clojure
  #Erlang #Fsharp #Go #Haskell #Kotlin #Rust #Scala #Swift
+ [[http://kaygun.tumblr.com/post/170534412629/egyptian-fractions][Egyptian fractions]]. ~ Atabey Kaygun #CommonLisp #Math
+ [[https://www.tweag.io/posts/2018-02-05-free-monads.html][Free monads for cheap interpreters]]. ~ James Haydon #Haskell 
+ [[https://www.isa-afp.org/entries/First_Order_Terms.html][First-order terms in Isabelle/HOL]]. ~ Christian Sternagel, René Thiemann #ITP
  #IsabelleHOL
+ [[http://scholarship.claremont.edu/cgi/viewcontent.cgi?article=1369&context=jhm][Predicting the next US President by simulating the electoral college]]. ~
  B. Kostadinov #Rstats #DataScience #CompSci
+ [[http://ilyasergey.net/pnp/pnp.pdf][Programs and proofs (Mechanizing Mathematics with dependent types)]]. ~ Ilya
  Sergey #ITP #Coq #Math
+ [[https://www.isa-afp.org/entries/Treaps.html][Treaps in Isabelle/HOL]]. ~ Manuel Eberl, Max Haslbeck and Tobias Nipkow #ITP
  #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Error_Function.html][The error function in Isabelle/HOL]]. ~ Manuel Eberl #ITP #IsabelleHOL
+ [[http://kaygun.tumblr.com/post/170645268864/linus-sequence][Linus sequence]]. ~ Atabey Kaygun #CommonLisp
+ [[https://github.com/olligobber/lambdacalc][Lambda calculus tools and interpreter written in Haskell]]. #Haskell
  #LambdaCalculus
+ [[http://blog.computationalcomplexity.org/2018/02/for-love-of-algorithms.html][For the love of algorithms]]. ~ Lance Fortnow  
+ [[https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018][An opinionated guide to Haskell in 2018]]. ~ Alexis King
  #Haskell
+ [[https://github.com/berewt/twerk][Twerk, a twitter archive parser with pipes utilities (in Haskell)]]. ~ Nicolas
  B. #Haskell
+ [[https://www.isa-afp.org/entries/LLL_Factorization.html][A verified factorization algorithm for integer polynomials with polynomial
  complexity]]. ~ Jose Divasón, Sebastiaan Joosten, René Thiemann and Akihisa
  Yamada #ITP #IsabelleHOL
+ [[https://arxiv.org/pdf/1802.01738][Formal verification of spacecraft control programs using a metalanguage for
  state transformers]]. ~ A. Mokhov, G. Lukyanov, J. Lechner #Haskell
+ [[https://arxiv.org/pdf/1802.00588][When good components go bad: formally secure compilation despite dynamic
  compromise]]. ~ G. Fachini et als. #ITP #Coq
+ [[http://www1.eafit.edu.co/asr/courses/ffpl-CM0848/ffpl-slides.pdf][Foundations of functional programming languages]]. ~ Andrés Sicard Ramírez
  #FunctionalProgramming #LambdaCalculus
+ [[http://www1.eafit.edu.co/asr/pubs/others/acevedo-acosta--echeverri-jurado-2017.una-formalisacion-del-sistema-de-los-numeros-reales-pantalla.pdf][Una formalización del sistema de los números reales]]. ~ Jorge O. Acevedo y
  José L. Echeverri #ITP #Agda #Math
+ [[https://www.campusmvp.es/recursos/post/que-lenguajes-de-programacion-se-usan-mas-los-fines-de-semana.aspx][¿Qué lenguajes de programación se usan más los fines de semana?]] ~ Julia Silge #DataScience #Haskell
+ [[https://stackoverflow.blog/2017/02/07/what-programming-languages-weekends][What programming languages are used most on weekends?]] ~ Julia Silge
  #DataScience #Haskell
+ [[https://ts.data61.csiro.au/publications/nicta_full_text/8655.pdf][Verified over-approximation of the diameter of propositionally factored
  transition systems]]. ~ M. Abdulaziz, C. Gretton, M. Norrish #ITP #HOL4
+ [[https://github.com/jonaprieto/stlctalk/raw/master/slides/slides.pdf][The simply typed lambda calculus (in Agda)]]. ~ Jonathan Prieto-Cubides #ITP
  #Agda #LambdaCalculus
+ [[http://doisinkidney.com/posts/2018-02-11-monadic-list.functions.html][Monadic list functions]]. ~ Donnacha Oisín Kidney #Haskell
+ [[http://bit.ly/2G9xoOv][Sn̊arkl: Somewhat practical, pretty much declarative verifiable computing in
  Haskell]]. ~ G. Stewart, S. Merten, L. Leland #Haskell
+ [[https://hal.archives-ouvertes.fr/hal-01684093/document][Hydra Ludica: Une preuve d'impossibilité de prouver simplement]]. ~ P. Castéran
  #ITP #Coq
+ [[https://blog.jle.im/entry/introducing-the-backprop-library.html][Introducing the backprop library]]. ~ Justin Le #Haskell
+ [[https://blog.desdelinux.net/puede-blockchain-hacernos-mas-libres][¿Cómo puede “Blockchain” hacernos más libres?]] #Blockchain
+ [[https://github.com/weirdNox/org-noter][Org-noter: A synchronized, Org-mode, document annotator]]. ~ Gonçalo Santos
  #Emacs
+ [[http://www.cl.cam.ac.uk/archive/mjcg/plans/Coinduction.html][Corecursion and coinduction: what they are and how they relate to recursion
  and induction]]. ~ Mike Gordon
+ [[https://www.forbes.com/sites/quora/2018/02/12/what-i-wish-id-known-when-i-started-functional-programming/#1ef1884348e1][What I Wish I'd Known When I Started Functional Programming]]. ~ Tikhon Jelvis
  #FunctionalProgramming
+ [[https://arxiv.org/abs/1712.03894][Coqatoo: Generating natural language versions of Coq proofs]]. ~ A. Bedford
  #ITP #Coq
+ [[https://github.com/expipiplus1/exact-real][Exact real arithmetic implemented by fast binary Cauchy sequences]]. ~ Joe
  Hermaszewski #Haskell #Math
+ [[https://arxiv.org/pdf/1802.01336][Verifying asymptotic time complexity of imperative programs in Isabelle/HOL]]. 
  ~ B. Zhan, M.P.L. Haslbeck #ITP #IsabelleHOL
+ [[http://www.cl.cam.ac.uk/archive/mjcg/plans/Backpropagation.html][My attempt to understand the backpropagation algorithm for training neural
  networks]]. ~ Mike Gordon
+ [[https://arxiv.org/abs/1802.02732][The higher-order prover Leo-III]]. ~ A. Steen, C. Benzmüller #ITP
+ [[http://www.cs.princeton.edu/~appel/papers/wand-frame.pdf][Proof pearl: Magic wand as frame]]. ~ Q. Cao, S. Wang, A. Hobor, A.W. Appel
  #ITP #Coq
+ [[https://codearsonist.com/reading-for-programmers][Reading for programmers]]. ~ P. Limanowski #Emacs
+ [[http://blog.acthompson.net/2018/02/quotes-about-programming-and-computer.html][Quotes about programming and computer science]]. ~ A. Thompson #Quote
  #Programming #CompSci
+ [[http://kaygun.tumblr.com/post/170731635904/van-ecks-sequence][Van Eck’s sequence]]. ~ Atabey Kaygun #CommonLisp #Math
+ [[https://mmhaskell.com/blog/2018/2/12/applicative-parsing-i-building-the-foundation][Applicative parsing I: building the foundation]]. ~ James Bowen
  #Haskell
+ [[http://www.cs.princeton.edu/~appel/papers/VST-Floyd.pdf][VST-Floyd: A separation logic tool to verify correctness of C programs]]. ~
  Q. Cao, L. Beringer, S. Gruetter, J. Dodds, A.W. Appel #ITP #Coq
+ [[https://arxiv.org/abs/1802.03292][Mathematical Logic in Computer Science]]. ~ A. Kfoury #Logic #CompSci
+ [[https://cacm.acm.org/news/225322-do-computers-really-think/fulltext][Do computers really think?]] ~ R. Colin Johnson #AI 
+ [[http:arxiv.org/abs/1802.05340][From gameplay to symbolic reasoning: Learning SAT solver heuristics in the style of Alpha(Go) Zero]]. 
  ~ F. Wang, T. Rompf #ATP #SAT 
+ [[http://matryoshka.gforge.inria.fr/pubs/supdata_paper.pdf][Superposition with datatypes and codatatypes]]. ~ J.C. Blanchette, N. Peltier,
  S. Robillard #ATP #Vampire
+ [[http://kenta.blogspot.com.es/2018/02/omqzhxkn-lagrange-four-square-theorem.html][Lagrange four-square theorem examples]]. ~ Ken T Takusagawa #Haskell #Math
+ [[https://dzone.com/articles/conventional-interfaces-in-functional-programming][Conventional interfaces in functional programming]]. ~ Carlos Morera #Haskell 
+ [[https://emanueleviola.wordpress.com/2018/02/16/i-believe-pnp][I believe P=NP]]. ~ Emanuele Viola #CompSci #Math 
+ [[https://arxiv.org/abs/1802.03685][Learning a SAT solver from single-bit supervision]]. ~ D. Selsam et als. #ATP
  #SAT #NeuralNetwork
+ [[https://github.com/hubbards/group-theory-haskell][Group theory in Haskell]]. ~ Spencer Hubbard #Haskell #Math
+ [[https://bartoszmilewski.com/2018/02/17/free-monoidal-functors][Free monoidal functors]]. ~ Bartosz Milewski #Haskell #CategoryTheory
+ [[https://github.com/lehins/massiv][massiv: Efficient Haskell arrays featuring parallel computation]]. ~
  Alexey Kuleshevich #Haskell
+ [[https://arxiv.org/abs/1802.04007][ProofWatch: Watchlist guidance for large theories in E]]. ~ Z. Goertzel,
  J. Jakubův, S. Schulz, J. Urban #APT
+ [[https://github.com/hubbards/relational-algebra-haskell][Relational algebra in Haskell]]. ~ Spencer Hubbard #Haskell #Math 
+ [[https://github.com/lehins/haskell-exercises][Haskell exercises with automatic tests]]. ~ Alexey Kuleshevich #Haskell
+ [[http://neilmitchell.blogspot.com.es/2018/02/atomic-expressions-generically.html][Atomic expressions generically]]. ~ Neil Mitchell #Haskell 
+ [[https://arxiv.org/abs/1802.03375][ATPboost: Learning premise selection in binary setting with ATP feedback]]. ~
  B. Piotrowski, J. Urban #ATP #ML
+ [[https://github.com/hubbards/stlc-haskell][Simply typed lambda calculus in Haskell]]. ~ Spencer Hubbard #Haskell #Math 
+ [[https://dl.acm.org/citation.cfm?id=3133911][A verified messaging system]]. ~ W. Mansky, A.W. Appel, A. Nogin #ITP #Coq
+ [[https://hal.archives-ouvertes.fr/hal-01703922/document][A formal proof of the minor-exclusion property for treewidth-two graphs]]. 
  ~ C. Doczkal, G. Combette, D. Pous #ITP #Coq
+ [[https://bartoszmilewski.com/2018/02/20/free-monoidal-profunctors][Free monoidal profunctors]]. ~ Bartosz Milewski #Haskell #CategoryTheory
+ [[https://arxiv.org/abs/1802.04315][Higher groups in Homotopy Type Theory]]. ~ U. Buchholtz, F. van Doorn,
  E. Rijke #ITP #Lean #Math #HoTT
+ [[https://hal.inria.fr/hal-01707376/document][Journées francophones des langages applicatifs 2018 (JFLA 2018)]]. ~
  S. Boldo, N. Magaud
+ [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][Type theory and functional programming]]. ~ S. Thompson #eBook
  #FunctionalProgramming #TypeTheory
+ [[https://blog.infinitenegativeutility.com/2017/12/some-notes-about-how-i-write-haskell][Some notes about how I write Haskell]]. ~ @aisamanra #Haskell
+ [[http://www.cs.cornell.edu/courses/cs6180/2017fa/notes/week4/lecture8/Martin-Lof-ConstructiveMathematicsAndComputerProgramming][Constructive mathematics and computer programming]]. ~ P. Martin-Löf
  #Math #CompSci
+ [[http://www.cs.cornell.edu/courses/cs6180/2017fa/notes/week14/CS6180-Lect26.pdf][Automated reasoning and ultra-intuitionism]]. ~ R.L. Constable #Logic
  #ATP #ITP
+ [[http://www.scitepress.org/Papers/2017/62578/62578.pdf][Educating computer science educators online]] (A Racket MOOC for elementary math
  teachers of Finland). ~ T. Partanen, P. Niemelä, L. Mannila, T. Poranen
  #Racket
+ [[http://www.cmm.uchile.cl/~mbodin/paperoj/coqpl18.pdf][A Coq formalisation of a core of R]]. ~ M. Bodin #ITP #Coq #Rstats
+ [[https://www.slideshare.net/JarekRatajski/eta-88717991][Beauty and the beast (Eta Haskell for JVM)]]. ~ Jarek Ratajski
  #Haskell
+ [[https://elpais.com/elpais/2018/02/19/ciencia/1519033592_636265.html][David Hilbert y la defensa del rigor matemático]]. ~ F. Bombal #Matemáticas
+ [[https://janmasrovira.gitlab.io/ascetic-slug/post/ascii-fractals/][ASCII fractals in Haskell]]. ~ Jan Mas Rovira  #Haskell
+ [[https://arxiv.org/abs/1802.07284][Logic programming applications: What are the abstractions and implementations?]] 
  ~ Y.A. Liu #LogicProgramming
+ [[https://hal.archives-ouvertes.fr/hal-01702815/document][Making agile development processes fit for V-style certification procedures]].
  ~ S. Bezzecchi, P. Crisafulli, C. Pichot, B. Wolff #ITP #IsabelleHOL
+ [[https://github.com/MaiaVictor/cedille-core][A minimal (<500 LOC) programming language capable of proving theorems about
  its own terms]]. #Haskell #Logic
+ [[http://www.microsiervos.com/archivo/espacio/fallo-programacion-desvio-primer-ariane-5-2018-de-trayectoria.html][Un fallo de programación desvió al primer Ariane 5 de 2018 de su
  trayectoria]]. ~ @Wicho #Programación
+ [[https://cacm.acm.org/blogs/blog-cacm/225148-lets-not-forget-the-science-in-computer-science/fulltext][Let's not forget the 'Science' in 'Computer Science']]. ~ W.S. Saba #CompSci 
+ [[https://arxiv.org/abs/1707.05371][Comparing classical and relativistic kinematics in first-order logic]]. ~
  K. Lefever, G. Székely #Logic #Physics
+ [[http://openlogicproject.org/2018/02/22/modal-logic-propositional-logic-tableaux/][Modal logic! Propositional logic! Tableaux!]] ~ R. Zach
  #Logic
+ [[http://builds.openlogicproject.org/courses/boxes-and-diamonds/bd-screen.pdf][Boxes and diamonds (An open introduction to modal logic)]]. ~ R. Zach
  #eBook #Logic
+ [[https://www.jstatsoft.org/article/view/v046i03/v46i03.pdf][A multi-language computing environment for literate programming and reproducible research]]. ~ E. Schulte, D. Davison, T. Dye, C. Dominik
  #Emacs
+ [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][Org-mode and R: An introduction]]. ~ Erik Iverson #Emacs #OrgMode #Rstats
+ [[https://www.r-project.org/conferences/useR-2011/TalkSlides/Contributed/16Aug_1115_FocusI_4-ReportingWorkflows_3-Leha.pdf][The emacs org-mode (Reproducible research and beyond)]]. ~ A. Leha
  #Emacs #OrgMode #Rstats
+ [[http://www21.in.tum.de/~nipkow/pubs/dp.pdf][Verified memoization and dynamic programming]]. ~ S. Wimmer, S. Hu,
  T. Nipkow #ITP #IsabelleHOL
+ [[https://github.com/jwbuurlage/category-theory-programmers][Notes on category theory in the context of (functional) programming]]. ~
  J.W. Buurlage #FunctionalProgramming #Haskell #CategoryTheory
+ [[http://chrispenner.ca/posts/asts-with-fix-and-free.html][ASTs with Fix and Free]]. ~ Chris Penner #Haskell
+ [[https://youtu.be/SzA2YODtgK4][Getting started with Org mode]]. ~ Harry Schwartz #Emacs #OrgMode
+ [[http://www.glc.us.es/~jalonso/vestigium/slc2018-presentacion-del-seminario-de-logica-computacional-2018/][SLC2018: Presentación del “Seminario de Lógica Computacional” (2018)]].
+ [[https://idontgetoutmuch.wordpress.com/2018/02/25/reproducibility-and-old-faithful][Reproducibility and Old Faithful]]. ~ Dominic Steinitz 
  #Haskell #DataScience
+ [[https://arxiv.org/abs/1802.08437][Abstract completion, formalized]]. ~ N. Hirokawa, A. Middeldorp,
  C. Sternagel, S. Winkler #IsabelleHOL
+ [[http://archive.indianstatistics.org/tools/orgpapers.pdf][Using Emacs, Org-mode and R for research writing in social sciences]] (A
  toolkit for writing reproducible research papers and monographs). ~
  Vikas Rawal #Emacs #OrgMode #Rstats
+ [[https://github.com/andrew-bedford/coqatoo][Coqatoo: Generates natural language versions of Coq proofs]]. ~ Andrew
  Bedford #ITP #Coq
+ [[https://liquid.kosmikus.org][Liquid Haskell tutorial]]. ~ Andres Löh #Haskell #LiquidHaskell
+ [[https://arxiv.org/abs/1802.08454][Faithful semantical embedding of a dyadic deontic logic in HOL]]. ~
  C. Benzmüller, A. Farjami, X. Parent #ITP #IsabelleHOL #Logic
+ [[https://www.cs.auckland.ac.nz/~cristian/crispapers/56250217.pdf][Formal proof: reconciling correctness and understanding]]. ~
  C.S. Calude, C. Müller #ITP #Logic
+ [[http://eschulte.github.io/org-scraps][A collection of short Org-mode snippets demonstrating the usage of
  code blocks]]. ~ Eric Schulte #Emacs #OrgMode
+ [[http://www.livemint.com/Sundayapp/zDSjhU5IzcuI7ypo6W4WtL/Why-data-science-is-simply-the-new-astrology.html][Why data science is simply the new astrology]]. ~ Karthik Shashidhar
  #DataScience
+ [[https://www.isa-afp.org/entries/Hoare_Time.html][Hoare logics for time bounds]]. ~ M.P.L. Haslbeck, T. Nipkow #ITP
  #IsabelleHOL #SLC2018
+ [[https://github.com/norvig/paip-lisp][Paradigms of artificial intelligence programming: case studies in
  Common Lisp]]. ~ Peter Norvig #eBook #AI #CommonLisp
+ [[https://pdfs.semanticscholar.org/1820/ffb9149248fd1673b7db8749db0171c412e2.pdf][A categorical manifesto]]. ~ J.A. Goguen #CategoryTheory #CompSci #Math 
+ [[https://lispcast.com/lambdup-2017-theory-functional-programming][A theory of functional programming]]. ~ Eric Normand
  #FunctionalProgramming
+ [[https://www.math.uh.edu/~tomforde/Links-Math.html][Links to some of the most famous articles about mathematics]]. #Math 
+ [[https://www.math.uh.edu/~tomforde/Articles/DeathOfProof.pdf][The death of proof]]. ~ John Horgan #Math
+ [[https://www.math.uh.edu/~tomforde/Articles/Immortaility-of-Proof.pdf][The immortaility of proof]]. ~ Steven G. Krantz #Math 
+ [[https://machinelearning.technicacuriosa.com/2017/03/19/a-darpa-perspective-on-artificial-intelligence/][A DARPA perspective on Artificial Intelligence]]. ~ John Launchbury #AI
+ [[https://christophm.github.io/interpretable-ml-book][Interpretable machine learning (A guide for making black box models
  explainable)]]. ~ Christoph Molnar #MachineLearning #XAI
+ [[https://en.wikipedia.org/wiki/Timeline_of_artificial_intelligence][Timeline of artificial intelligence]]. #AI
+ [[https://www.tweag.io/posts/2018-02-28-bazel-haskell.html][Build large polyglot projects with Bazel ... now with Haskell support]]. 
  ~ M. Boespflug, M. Karpov, M. Kowalczyk #Haskell #Bazel
+ [[https://cs.famaf.unc.edu.ar/~hoffmann/rio18/][El sistema de tipos de Haskell/GHC y sus extensiones]]. ~ Guillaume
  Hoffmann #Haskell

* Marzo 2018

+ [[http://www.andreas-lochbihler.de/pub/lochbihler2018.pdf][Fast machine words in Isabelle/HOL]]. ~ A. Lochbihler #ITP #IsabelleHOL
+ [[https://www.ethz.ch/en/news-and-events/eth-news/news/2018/02/teaching-quantum-physics-to-a-computer.html][Teaching quantum physics to a computer]]. ~ Oliver Morsch #MachineLearning
+ [[https://www.slideshare.net/ssuserc0b705/artificial-intelligence-and-its-applications-in-healthcare-and-pharmacy][Artificial intelligence and its applications in healthcare and pharmacy]]. ~ Atul Adhikari #AI
+ [[http://irreal.org/blog/?p=6987][A reproducible research toolkit]]. #Emacs #OrgMode #Rstats
+ [[https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org][Using Emacs, Org-mode and R for Research Writing in Social Sciences]]. ~
  Vikas Rawal #Emacs #OrgMode #Rstats
+ [[https://openlibra.com/es/book/matematica-discreta-en-haskell][Matemática discreta en Haskell]]. ~ María Dolores Valverde Rodríguez
  #Haskell #Matemáticas #OpenLibra
+ [[https://www.isa-afp.org/entries/Architectural_Design_Patterns.html][A theory of architectural design patterns in Isabelle/HOL]]. ~ Diego
  Marmsoler #ITP #IsabelleHOL
+ [[http://briansteffens.com/2017/02/20/from-math-to-machine.html][From math to machine: translating a function to machine code]]. ~ Brian
  Steffens #Programming #Math #Haskell #Imperative_language
  #Assembly_language #Machine_code #I1M2017
+ [[http://jxv.io/blog/2018-02-28-A-Game-in-Haskell.html][A Game in Haskell: Dino Rush]]. ~ Joe Vargas #Haskell #Game
+ [[http://blog.ielliott.io/comonad-transformers-in-the-wild/][Comonad Transformers in the Wild]]. ~ Isaac Elliott #Haskell
+ [[https://paulspontifications.blogspot.com.es/2018/02/haskell-with-reactive-banana-and-gtk3.html][Haskell with Reactive Banana and GTK3]]. ~ Paul Johnson #Haskell
+ [[https://functor.tokyo/blog/2018-03-02-pretty-simple-cli-exe][CLI program for pretty-printing Haskell datatypes]]. ~ Dennis Gosnell
  #Haskell
+ [[https://two-wrongs.com/a-gentle-introduction-to-monad-transformers][A gentle introduction to monad transformers]]. #Haskell 
+ [[http://www.microsiervos.com/archivo/ia/curso-intensivo-gratuito-google-aprendizaje-automatico-inteligencia-artificial.html][Curso intensivo de Google sobre aprendizaje automático e inteligencia
  artificial (en español)]]. #IA
+ [[https://github.com/fniessen/stage-latex-dunkerque-2012/blob/master/stage-latex-dunkerque-2012-slides.pdf][Org mode pour LaTeXiens]]. ~ Fabrice Niessen #Emacs #OrgMode #LaTeX
+ [[https://whatthefunctional.wordpress.com/haskell-for-the-imperative][Haskell for the imperative]]. ~ Laurence Emms #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/02/26/getting-started-with-haskell/][Getting started with Haskell]]. ~ Laurence Emms #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/03/01/the-type-language/][The type language]]. ~ Laurence Emms #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/03/03/mandelbrot/][Mandelbrot fractal in Haskell]]. ~ Laurence Emms #Haskell
+ [[http://www.cse.chalmers.se/~nicsma/papers/quickspec2.pdf][Quick specifications for the busy programmer]]. ~ N. Smallbone,
  M. Johansson, K. Claessen, M. Algehed #Haskell
+ [[https://dl.acm.org/ft_gateway.cfm?id=3159535&ftid=1946727&dwn=1&CFID=12174721&CFTOKEN=cc9104d69a4c2dc4-2F7E93CC-950A-56DC-0EBB03DD3F3E7470][Quick-Sort: a pet peeve]]. ~ A. Nunes-Harwitt, M. Gambogi, T. Whitaker #Haskell 
+ [[http://www.i-programmer.info/news/105-artificial-intelligence/11599-data-science-predicts-oscar-winner.html][Data Science predicts Oscar winner]]. ~ Lucy Black #AI #DataScience 
+ [[https://codesync.global/media/successful-companies-using-elixir-and-erlang/][Successful companies use Erlang and Elixir]]. #FunctionalProgramming
  #Erlang #Elixir
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?ThEdu17.9.pdf][Natural deduction and the Isabelle proof assistant]]. ~ J. Villadsen,
  A. Halkjær, A. Schlichtkrull #ITP #IsabelleHOL #Logic
+ [[https://nadea.compute.dtu.dk][NaDeA: A Natural Deduction Assistant with a formalization in Isabelle]]. 
  #IsabelleHOL #Logic #NaDeA
+ [[http://www.uni-kassel.de/eecs/fachgebiete/fmv/projects/sequent-calculus-trainer.html][The Sequent Calculus Trainer]]: a tool that aims at supporting students
  in learning how to correctly construct proofs in the sequent calculus
  for propositional logic and first-order logic with equality. #Logic
+ [[https://www.uni-kassel.de/eecs/fileadmin/datas/fb16/Fachgebiete/FMV/Abschlussarbeiten/Masterarbeit_Arno_Ehle.pdf][Proof search in the sequent calculus for first-order logic with equality]]. 
  ~ Arno Ehle #ATP #Logic
+ [[https://www.stackbuilders.com/tutorials/haskell/image-processing][Image processing with Juicy Pixels and Repa]]. ~ Mark Karpov
  #Haskell
+ [[http://sites.math.rutgers.edu/~zeilberg/math436_17.html][History of Mathematics]]. ~ Doron Zeilberger #Math #History
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?ThEdu17.1.pdf][Learning how to prove: From the Coq proof assistant to textbook style]]. 
  ~ S. Böhne, C. Kreitz #ITP #Coq #Logic
+ [[http://www.math.rutgers.edu/~zeilberg/akherim/struik.pdf][Concise history of Mathematics]]. ~ Dirk J. Struik #eBook #Math #History 
+ [[https://web.hypothes.is][Hypothesis: Annotate the web, with anyone, anywhere]]. ~ @hypothes_is
  #Annotation
+ [[https://www.vacationlabs.com/haskell/index.html][Haskell without the theory]]. ~ Saurabh Nanda #Haskell
+ [[http://fuuzetsu.co.uk/blog/posts/2018-03-03-GHC-compact-regions-for-improved-latency.html][Trying out GHC compact regions for improved latency (Pusher case study)]]. 
  ~ Mateusz Kowalczyk #Haskell
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?ThEdu17.2.pdf][The Sequent Calculus Trainer with automated reasoning (Helping students to
  find proofs)]]. ~ A. Ehle, N. Hundeshagen, M. Lange #Logic
+ [[https://nautil.us/issue/24/error/in-mathematics-mistakes-arent-what-they-used-to-be][In Mathematics, mistakes aren’t what they used to be]] (Computers can’t
  invent, but they’re changing the field anyway). ~ Siobhan Roberts
  #Math #CompSci 
+ [[https://idontgetoutmuch.wordpress.com/2018/03/04/implicit-runge-kutta-and-gnu-scientific-library][Implicit Runge Kutta and GNU scientific library]]. ~ Dominic Steinitz
  #Haskell #Math
+ [[https://www.slideshare.net/RodrigoDeFrutosBalle/qu-demonios-es-la-programacin-funcional][¿Qué demonios es la programación funcional?]] ~ Rodrigo de Frutos
  #ProgramacionFuncional
+ [[https://medium.com/@miguelsaddress/funtores-aplicativos-y-m%C3%B3nadas-en-im%C3%A1genes-21ab0e60fe23][Funtores, Aplicativos y Mónadas en imágenes]]. ~ Miguel Á. Moreno #Haskell
+ [[https://arxiv.org/abs/1803.00699][QWIRE practice: Formal verification of quantum circuits in Coq]]. ~
  R. Rand, J. Paykin, S. Zdancewic #ITP #Coq
+ [[https://patrickdoc.github.io/criterion.html][Measuring functions in Criterion]]. ~ Patrick Dougherty #Haskell
+ [[http://gitcommit.co.uk/2017/03/25/simple-fractals-in-haskell][Simple fractals in Haskell]]. ~ @Mike_K_Houghton #Haskell
+ [[https://link.springer.com/article/10.1007/s10817-018-9458-4][Hammer for Coq: automation for dependent type theory]]. ~ Ł. Czajka,
  C. Kaliszyk #ITP #Coq
+ [[http://www.usrsb.in/symbolic-execution-intuition-and-implementation.html][Symbolic execution: intuition and implementation]]. ~ Alex #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/03/07/making-a-text-adventure-in-haskell-part-1][Making a text adventure in Haskell (Part 1)]]. ~ Laurence Emms
  #Haskell
+ [[https://hal.archives-ouvertes.fr/hal-01716048/document][A Coq formalisation of SQL’s execution engines]]. ~ V. Benzaken et
  als. #ITP #Coq
+ [[https://github.com/qfpl/applied-fp-course/][Applied functional programming course]]. #Haskell
+ [[https://github.com/portnov/circles-puzzle][Simple puzzle with rotating circles]]. ~ Ilya V. Portnov #Haskell #Gloss
+ [[https://www.well-typed.com/blog/2018/03/oop-in-haskell/][Object oriented programming in Haskell]]. ~ Edsko de Vries #Haskell
+ [[https://members.loria.fr/DLarchey/files/papers/ITP_2018_paper_16.pdf][Proof Pearl: Constructive extraction of cycle finding algorithms]]. ~
  D. Larchey-Wendling #ITP #Coq #SLC2018
+ [[https://purelyfunctional.org/posts/2018-03-04-monadfix-lazy-strict-state.html][MonadFix and the lazy and strict state monad]]. ~ Moritz Kiefer
  #Haskell
+ [[https://jaspervdj.be/posts/2018-03-08-handle-pattern.html][Haskell design patterns: The handle pattern]]. ~ Jasper Van der Jeugt
  #Haskell
+ [[https://www.tweag.io/posts/2018-03-08-linear-sort.html][Implementing a safer sort with linear types]]. ~ Alexander Vershilov,
  Arnaud Spiwack #Haskell
+ [[https://members.loria.fr/DLarchey/files/papers/IJCAR-2018_paper_74.pdf][Constructive decision via redundancy-free proof-search]]. ~
  D. Larchey-Wendling #ITP #Coq #SLC2018
+ [[http://bulletin.eatcs.org/index.php/beatcs/article/download/522/513][Who needs category theory?]] ~ A. Blass, Y. Gurevich #CategoryTheory
  #CompSci
+ [[http://www.kovach.me/posts/2018-03-07-generating-art.html][Generating artwork with Haskell]]. ~ Benjamin Kovach #Haskell 
+ [[https://cacm.acm.org/careers/225898-proposal-recommends-ai-training-in-chinas-primary-secondary-schools/fulltext][Proposal recommends AI training in China's primary, secondary schools]]. #AI
+ [[http://sachachua.com/blog/2018/03/using-org-mode-latex-beamer-and-medibang-paint-to-make-a-childrens-book/][Using Org Mode, LaTeX, Beamer, and Medibang Paint to make a children’s book]]. 
  ~ Sacha Chua #Emacs #OrgMode #LaTeX #Beamer
+ [[http://changelog.complete.org/archives/9861-emacs-1-ditching-a-bunch-of-stuff-and-moving-to-emacs-and-org-mode][Emacs #1: Ditching a bunch of stuff and moving to Emacs and org-mode]]. 
  ~ John Goerzen #Emacs #OrgMode
+ [[https://changelog.complete.org/archives/9865-emacs-2-introducing-org-mode][Emacs #2: Introducing org-mode]]. ~ John Goerzen #Emacs #OrgMode
+ [[https://changelog.complete.org/archives/9877-emacs-3-more-on-org-mode][Emacs #3: More on org-mode]]. ~ John Goerzen #Emacs #OrgMode
+ [[http://home.in.tum.de/~wimmers/html-data/papers/PTA.pdf][MDP+TA = PTA: Probabilistic timed automata, formalized (short paper)]]. 
  ~ S. Wimmer, J. Hölzl #ITP #IsabelleHOL
+ [[https://soupi.github.io/rfc/writing_simple_haskell][Writing simple Haskell]]. ~ Gil Mizrahi #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/03/10/making-a-text-adventure-in-haskell-part-2/][Making a text adventure in Haskell (Part 2)]]. ~ Laurence Emms
  #Haskell
+ [[https://github.com/cerner/clara-rules][Clara-rules: Forward-chaining rules in Clojure]]. #Clojure
+ [[https://www.slideshare.net/MykhailoMichaelPersh/clojured-ai2018pubrastpng-90157567][Clojure and AI]]. ~ Michael Pershyn #Clojure #AI
+ [[http://adam.chlipala.net/theses/jadep_meng.pdf][Correct-by-construction finite field arithmetic in Coq]]. ~ J. Philipoom
  #ITP #Coq #Math
+ [[https://lettier.github.io/posts/2016-06-01-data-visualization-with-haskell-nyc-public-urination.html][Data visualization with Haskell: NYC public urination]]. ~ David Lettier
  #Haskell #DataScience
+ [[http://shinyapps.org/apps/RGraphCompendium/index.php][A compendium of clean graphs in R (version 2.0)]]. ~ E.J.Wagenmakers,
  Q.F. Gronau #Rstats
+ [[http://www.owlofminerva.net/files/fom.pdf][Foundations of Mathematics]]. ~ Ken Kubota #Math #Logic
  #LamdaCalculus #ITP #IsabelleHOL #Coq #PVS #Agda
+ [[https://hal.inria.fr/hal-01719918/document][Formalization techniques for asymptotic reasoning in classical analysis]]. ~
  R. Affeldt, C. Cohen, D. Rouhling #ITP #Coq #Math
+ [[https://lettier.github.io/posts/2016-04-29-breadth-first-search-in-haskell.html][Breadth-first search in Haskell]]. ~ David Lettier #Haskell
+ [[https://arxiv.org/abs/1803.04263][Intelligible Artificial Intelligence]]. ~ D.S. Weld, G. Bansal #AI #XAI
+ [[http://www.htdp.org/2018-01-06/Book][How to design programs (2nd edition, 2018)]]. ~ M. Felleisen,
  R.B. Findler, M. Flatt, S. Krishnamurthi #eBook #Programming #DrRacket
+ [[https://www.isa-afp.org/entries/Weight_Balanced_Trees.html][Weight-balanced trees in Isabelle/HOL]]. ~ T. Nipkow, S. Dirix
  #IsabelleHOL
+ [[https://lettier.github.io/posts/2016-04-14-max-subarray-in-haskell.html][Max subarray in Haskell]]. ~ David Lettier #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/03/13/text-reflow-in-haskell/][Text Reflow in Haskell]]. ~ Laurence Emms #Haskell
+ [[http://www.cse.buffalo.edu/~knepley/classes/cse191/ClassNotes.pdf][Discrete structures]]. ~ M.G. Knepley #eBook #Math #ITP #Coq
+ [[http://aperiodical.com/2018/03/the-oeis-now-contains-300000-integer-sequences][The OEIS now contains 300,000 integer sequences]]. ~ C. Lawson-Perfect #Math
+ [[https://arxiv.org/abs/1803.04646][On cryptographic attacks using backdoors for SAT]]. ~ A. Semenov et
  als. #SAT
+ [[https://040code.github.io/2018/03/04/verlet-integration/][Verlet integration (Physics simulation in Clojure)]]. ~ M. Metz
  #Clojure #Physics
+ [[https://github.com/owickstrom/domain-modeling-with-haskell-data-structures][Domain modeling with Haskell data structures]]. ~ Oskar Wickström
  #Haskell
+ [[http://bit.ly/2GAkWbX][Multiplicar es mas fácil de lo que piensas]]. ~ Juan Arias de Reyna
  #Matemáticas #Algorítmica
+ [[http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/7095/pdf/imm7095.pdf][Formalized first-order logic]]. ~ A.H. From. #ITP #IsabelleHOL #Logic 
+ [[http://www.hg.schaathun.net/FPIA/general.php][Course: Functional programming and intelligent algorithms]]. ~ Hans
  Georg Schaathun #Haskell #AI
+ [[https://arxiv.org/abs/1803.04870][Narcissus: Deriving correct-by-construction decoders and encoders from binary
  formats]]. S. Suriyakarn, C. Pit-Claudel, B. Delaware, A. Chlipala #ITP #Coq
+ [[http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/7094/pdf/imm7094.pdf][Formalized unification algorithms]]. ~ K. Hvidtfeldt #ITP #IsabelleHOL
  #Logic
+ [[https://plato.stanford.edu/entries/mathematics-explanation][Explanation in Mathematics]] (in "The Stanford Encyclopedia of
  Philosophy"). ~ Paolo Mancosu #Math #Philosophy
+ [[http://doisinkidney.com/posts/2018-03-17-rose-trees-breadth-first.html][Rose trees, breadth-first]]. ~ Donnacha Oisín Kidney #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/03/18/lessons-learned/][Lessons learned]]. ~ Laurence Emms #Haskell
+ [[https://medium.com/ventre-tech/haskells-triangle-or-more-fun-with-recursion-9350155689ac][Haskell’s triangle: or, more fun with recursion]]. ~ Thomas Cothran
  #Math #Haskell #JavaScript
+ [[https://elpais.com/tecnologia/2018/03/16/actualidad/1521204836_317670.html][Máquinas listas, pero sin sentido común]]. ~ Ramon López de Mántaras #IA
+ [[http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/7091/pdf/imm7091.pdf][Formalization of a near-linear time algorithm for solving the
  unification problem]]. ~ K.F. Brandt #ITP #IsabelleHOL #Logic
+ [[https://whatthefunctional.wordpress.com/2018/03/19/making-a-text-adventure-in-haskell-part-3/][Making a text adventure in Haskell (Part 3)]]. ~ Laurence Emms
  #Haskell
+ [[https://arxiv.org/abs/1803.05316][Seven sketches in compositionality: An invitation to applied category
  theory]]. ~ B. Fong, D.I Spivak #CategoryTheory
+ [[https://medium.com/q-e-d/fundamental-tools-for-math-in-2018-78739b86d15][Fundamental tools for Math in 2018]]. ~ Robert L. Read #Math
+ [[https://cocalc.com][CoCalc: Collaborative Calculation in the Cloud]]. ~ @cocalc_com #Math #SageMath
+ [[http://www.cs.tau.ac.il/~nachumd/papers/Union.pdf][Well-founded unions]]. ~ J. Dawson, N. Dershowitz, R. Goré #ITP #IsabelleHOL
+ [[https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf][Build systems à la carte]]. ~ A. Mokhov, N. Mitchell, Simon Peyton Jones
  #Haskell
+ [[https://arxiv.org/abs/1803.06494][Attack trees in Isabelle: CTL semantics, correctness and completeness]]. 
  ~ F. Kammüller #ITP #IsabelleHOL #Logic
+ [[https://www.nature.com/articles/d41586-018-03423-x]['Grand unified theory of maths' nets Abel Prize]] ~ D. Castelvecchi #Math  
+ [[https://medium.com/@raxwunter/from-logic-and-math-to-code-for-dummies-part-iii-c4ffd4407b16][From logic and math to code. For dummies. Part III. Dependent types]]. ~
  R. Krivtsov #Logic #FunctionalProgramming
+ [[https://arxiv.org/abs/1803.06500][Argumentation theory for mathematical argument]]. ~ J. Corneli et
  als. #Math #Logic
+ [[http://robertylewis.com/files/dissertation.pdf][Two tools for formalizing mathematical proofs]]. ~ R.Y. Lewis
  #PhD_Thesis #Math #ITP #Lean #Mathematica
+ [[https://arxiv.org/abs/1803.07199][Eleven simple algorithms to compute Fibonacci numbers]]. ~ A. Dasdan
  #Math #Programming #Python 
+ [[https://arxiv.org/abs/1803.06960][Ready, set, verify! Applying hs-to-coq to real-world Haskell code]]. ~
  J. Breitner et als. #Coq #Haskell
+ [[https://hackage.haskell.org/package/containers-verified][containers-verified: Formally verified drop-in replacement of containers]]. 
  ~ J. Breitner #Haskell #Coq
+ [[https://elpais.com/elpais/2018/03/21/el_aleph/1521672989_799957.html][La historia del error de división de los primeros Pentium]]. ~
  M.A. Morales | El Aleph #Matemáticas
+ [[https://etorreborre.blogspot.com.es/2018/03/haskell-modules-for-masses.html][(Haskell) modules for the masses]]. ~ E. Torreborre #Haskell
+ [[https://www.quantamagazine.org/gunter-ziegler-and-martin-aigner-seek-gods-perfect-math-proofs-20180319/][In search of God’s perfect proofs]]. ~ E. Klarreich #Math
+ [[https://www.isa-afp.org/entries/Fishburn_Impossibility.html][The incompatibility of Fishburn-Strategyproofness and Pareto-efficiency]]. 
  ~ F. Brandt, M. Eberl, C. Saile and C. Stricker #ITP #IsabelleHOL
+ [[http://softwaresimply.blogspot.com.es/2018/03/efficiently-improving-test-coverage.html?m=1][Efficiently improving test coverage with algebraic data types]]. #Haskell
+ [[http://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html][Three layer Haskell cake]]. ~ Matt Parsons #Haskell
+ [[http://mpickering.github.io/posts/2018-03-20-recordsvstypeclasses.html][Replacing type classes with records affects optimisation]]. #Haskell
+ [[http://www.glc.us.es/~jalonso/vestigium/slc2018-programcion-funcional-en-coq/][SLC2018: Programación funcional en Coq]]. #ITP #Coq
+ [[http://www.glc.us.es/~jalonso/vestigium/slc2018-demostraciones-por-induccion-en-coq/][SLC2018: Demostraciones por inducción en Coq]]. #ITP #Coq
+ [[http://www.techiedelight.com][Techie Delight (Coding made easy)]]: 500+ data structure and algorithms
  problems. ~ @techie_delight #Programming
+ [[http://www.glc.us.es/~jalonso/vestigium/slc2018-datos-estructurados-en-coq/][SLC2018: Datos estructurados en Coq]]. #ITP #Coq
+ [[https://whatthefunctional.wordpress.com/2018/03/22/everyday-haskell][Everyday Haskell (Haskell for the working programmer)]]. ~ Laurence Emms
  #Haskell
+ [[https://github.com/haskell-perf/csv][Simple comparative benchmarks for CSV parsing libraries]]. #Haskell
+ [[http://www.andreas-lochbihler.de/pub/lammich2018jar.pdf][Automatic refinement to efficient data structures: a comparison of two
  approaches]]. ~ P Lammich, A Lochbihler #IsabelleHOL
+ [[https://realpython.com/python-thinking-recursively][Thinking recursively in Python]]. ~ A. Awasthi #Python
+ [[http://www.math.utah.edu/~carlson/notes/python.pdf][Computations in number theory using Python: A brief introduction]]. ~
  J. Carlson #Python #Math
+ [[http://swc.math.arizona.edu/aws/2003/03MacintyreNotes.pdf][A history of interactions between Logic and Number Theory]]. ~
  A. Macintyre #Logic #NumberTheory
+ [[http://logika.uwb.edu.pl/studies/download.php%3Fvolid%3D35%26artid%3Dkt%26format%3DPDF][Philosophy of mathematics and computer science]]. ~ K. Trzęsicki #Math
  #Logic #CompSci
+ [[http://www.cs.nott.ac.uk/~psztxa/g51mcs/notes.pdf][Mathematics for computer scientists (Lecture notes)]]. ~ T. Altenkirch
  #Math #Haskell
+ [[https://arxiv.org/pdf/1803.09237v1][Goldbach's function approximation using deep learning]]. ~ A. Stekel,
  M. Chkroun, A. Azaria #DeepLearning #Math
+ [[https://arxiv.org/pdf/1803.10202v1][Language-integrated provenance in Haskell]]. ~ J. Stolarek, J. Cheney #Haskell
+ [[https://speakerdeck.com/mchakravarty/demystifying-functional-programming-and-what-that-means-for-learning-and-teaching][Demystifying functional programming (And what that means for learning
  & teaching)]]. ~ Manuel M T Chakravarty and Gabriele
  Keller #Haskell
+ [[https://interstices.info/jcms/p_84122/l-intelligence-artificielle-mythes-et-realites][L’intelligence artificielle, mythes et réalités]]. ~ Nicolas Rougier #IA
+ [[http://www.jmlr.org/reviewing-papers/knuth_mathematical_writing.pdf][Mathematical writing]]. ~ D,E. Knuth, T. Larrabee, and P.M. Roberts #Math
+ [[https://whatthefunctional.wordpress.com/2018/03/29/making-l-systems-with-haskell-and-logo/][Making L-Systems with Haskell and Logo]]. ~ Laurence Emms
  #Haskell
+ [[http://ecs.inria.fr][Encyclopedia of Combinatorial Structures (ECS)]]. #Math
+ [[https://blog.poisson.chat/posts/2018-03-28-generic-data.html][An old and a new library for generic deriving]]. #Haskell
+ [[https://icidasset.com/writings/building-blocks/][Building blocks (a more visual approach to the topic of purely-typed
  functional programming)]]. ~ Steven Vandevelde
  #FuncionalProgramming #Haskell
+ [[https://www.scottaaronson.com/blog/?p=3679][Scott Aaronson: 30 of my favorite books]]. 
+ [[https://typeclasses.com/contravariance][Understanding contravariance]]. ~ Julie Moronuki and Chris Martin
  #Haskell
+ [[https://typeclasses.com/news/2018-03-typeclasses-born][Welcome to Type Classes!]] ~ Julie Moronuki and Chris
  Martin #Haskell

* Abril 2018

+ [[http://www.elmundo.es/ciencia-y-salud/ciencia/2018/03/29/5abd1886e5fdeaf1328b45bc.html][Francia invertirá 1.500 millones de euros en inteligencia artificial]]. #IA
+ [[https://byorgey.wordpress.com/2018/03/30/parametricity-for-bifunctor][Parametricity for Bifunctor]]. ~ Brent Yorgey #Haskell
+ [[https://arxiv.org/pdf/1803.06636][Complexity problems in enumerative combinatorics]]. ~ Igor Pak #Math #CompSci
+ [[https://interstices.info/jcms/p_95018/l-algorithme-quantique-de-shor][L'algorithme quantique de Shor]]. ~ André Chailloux #CompSci
+ [[http://vaibhavsagar.com/blog/2018/03/31/ihaskell-mybinder/][IHaskell on mybinder.org]] ~ Vaibhav Sagar #Haskell #Jupyter #IHaskell
+ [[http://reasonablypolymorphic.com/blog/free-lenses][Free lenses for higher-kinded data]]. ~ Sandy Maguire #Haskell
+ [[https://pjreddie.com/coq-tactics/][Coq tactics index]]. ~ Joe Redmon #ITP #Coq
+ [[https://changelog.complete.org/archives/9898-emacs-4-automated-emails-to-org-mode-and-org-mode-syncing][Emacs #4: Automated emails to org-mode and org-mode syncing]]. ~ John
  Goerzen #Emacs #OrgMode
+ [[https://yetanothermathblog.com/2018/04/01/ring-theory-via-coding-theory-and-cryptography/][Ring theory, via coding theory and cryptography]]. ~ W. David Joyner
  #eBook #Math #Sagemath
+ [[https://yetanothermathblog.com/2018/04/01/calculus-on-graphs/amp/][Calculus on graphs]]. ~ W. David Joyner #eBook #Math #Sagemath
+ [[https://terrytao.wordpress.com/career-advice/theres-more-to-mathematics-than-rigour-and-proofs][There’s more to mathematics than rigour and proofs]]. ~ Terence Tao #Math
+ [[http://www.robertvesco.com/blog/2015-01-emacs-for-data-science.html][Emacs for Data Science]]. ~ Robert Vesco #Emacs #DataScience
+ [[https://ahsanijaz.github.io/2016-09-20-Emacs/][Emacs for Data Science]]. ~ Ahsan Ijaz #Emacs #DataScience
+ [[https://github.com/dfeich/org-babel-examples][Examples using emacs org mode babel inline source code with different
  backend languages]]. ~ Derek Feichtinger #Emacs #OrgMode
+ [[https://arxiv.org/pdf/1804.01172][Applying computer algebra systems and SAT solvers to the Williamson
  conjecture]]. ~ C. Bright, I. Kotsireas, V. Ganesh #Logic #SAT #Math #CAS
+ [[https://www.cs.us.es/~jalonso/apuntes/Emacs_para_ciencias_del_dato/Emacs_para_ciencias_del_dato.html][Emacs para ciencias del dato]]. #Emacs #OrgMode
+ [[https://misshula.org/articles/cunyHask.html][Why teaching FP to undergrads is important]]. ~ Evan Misshula
  #FunctionalProgramming #Haskell
+ [[https://plus.maths.org/content/unreasonable-relationship-between-mathematics-and-physics][The unreasonable relationship between mathematics and physics]]. ~ David Tong
  #Math #Physics
+ [[https://github.com/rstudio/RStartHere][RStartHere: A guide to some of the most useful R Packages that we know about,
  organized by their role in data science]]. #Rstat #DataScience
+ [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][OrgMode tutorial]]. ~ Rainer König  #Emacs #OrgMode
+ [[http://tomasp.net/academic/papers/monads/monads-programming.pdf][What we talk about when we talk about monads]]. ~ T. Petricek #Haskell
+ [[https://www.cs.us.es/~fsancho/?p=seminario-ia3][Seminario (I+A)A (Inteligencia Artificial + Aprendizaje Automático)]] #IA #AA
+ [[https://www.theregister.co.uk/2018/04/05/openai_challenge_developers_to_play_sonic_the_hedgehog_with_ai][OpenAI challenges you to beat 1990s classic Sonic the Hedgehog using machine
  learning]]. ~ #AI
+ [[https://techcrunch.com/2018/04/05/cometml-wants-to-do-for-machine-learning-what-github-did-for-code][Comet.ml wants to do for machine learning what GitHub did for code]]. ~
  F. Lardinois #IA #ML
+ [[https://www.kosmikus.org/DerivingVia/deriving-via-paper.pdf][Deriving Via (or, how to turn hand-written instances into an anti-pattern)]]. 
  ~ B. Blöndal, A. Löh, R. Scott #Haskell
+ [[https://arxiv.org/pdf/1804.00596][Learning to prove with tactics]]. ~ T. Gauthier, C. Kaliszyk, J. Urban,
  R. Kumar, M. Norrish #ITP #HOL4 #ML
+ [[https://github.com/EvanMisshula/rr][Org-mode and reproducible research]]. ~ Evan Misshula
  #Emacs #OrgMode
+ [[https://www.aiforhumanity.fr][AI for humanity]]. #AI
+ [[https://www.technologyreview.com/s/610379/heres-how-the-us-needs-to-prepare-for-the-age-of-artificial-intelligence/amp/][Here’s how the US needs to prepare for the age of artificial intelligence]]. 
  ~ Will Knight #AI
+ [[http://binaire.blog.lemonde.fr/2018/04/05/quel-langage-pour-le-secondaire][Quel langage pour le secondaire?]] ~ Laurent Bloch #Programming
+ [[https://dl.acm.org/citation.cfm?id=3110252][A unified approach to solving seven programming problems (functional pearl)]]. 
  ~ W.E. Byrd, M. Ballantyne, G. Rosenblatt, M. Might
  #FunctionalProgramming #Racket 
+ [[https://www.dataquest.io/blog/jupyter-notebook-tutorial][Jupyter notebook for beginners: a tutorial]]. ~ Benjamin Pryke
  #Jupyter #Python
+ [[https://arxiv.org/pdf/1801.05894][Deep Learning: an introduction for applied mathematicians]]. ~
  C.F. Higham, D.J. Higham #AI #ML #DeepLearning
+ [[https://hub.packtpub.com/plotting-haskell/][Plotting in Haskell]]. ~ James Church #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1804.00746][The simple essence of automatic differentiation (Differentiable
  functional programming made easy)]]. ~ Conal Elliott
  #FunctionalProgramming #Haskell
+ [[https://www.irif.fr/_media/users/cauderlier/article_itp18.pdf][Tactics and certificates in Meta Dedukti]]. ~ R. Cauderlier #ITP #Dedukti
+ [[http://www.cs.jhu.edu/~roe/root.pdf][Toward a tool to verify complex data structure invariants]]. ~ K.D. Roe
  #PhD_Thesis #ITP #Coq
+ [[https://www.metalevel.at/swiclpb.pdf][The boolean constraint solver of SWI-Prolog: system description]]. ~
  M. Triska #Prolog #ConstraintProgramming
+ [[https://github.com/theoremprover-museum/logic-theorist][Logic-Theorist: The sources of the first theorem prover]]. #ATP  
+ [[http://vaibhavsagar.com/blog/2018/04/08/ihaskell-cocalc][IHaskell on CoCalc!]] ~ Vaibhav Sagar #FunctionalProgramming
  #Haskell #CoCalc
+ [[https://cocalc.com/share/20e4a191-73ea-4921-80e9-0a5d792fc511/haskell.ipynb?viewer=share][Welcome Haskell on CoCalc]]. #FunctionalProgramming #Haskell #CoCalc
+ [[https://www.theglobeandmail.com/opinion/article-deep-learning-why-its-time-for-ai-to-get-philosophical][Deep learning: Why it’s time for AI to get philosophical]]. ~ Catherine
  Stinson #AI #Philosophy
+ [[https://whatthefunctional.wordpress.com/2018/04/09/dynamic-programming-in-haskell][Dynamic programming in Haskell]]. ~ Laurence Emms #FunctionalProgramming
  #Haskell
+ [[https://github.com/SimplyNaOH/voronoi][Voronoi: A Haskell implementation of Fortune's algorithm]]. 
  #FunctionalProgramming #Haskell
+ [[https://www.elsaltodiario.com/musica/live-coding-desnudando-maquinas-golpe-musica][‘Live coding’: desnudando a las máquinas a golpe de música]]. ~ Álvaro
  Lorite #Música #Programación
+ [[https://opensource.com/life/16/2/intro-to-emacs][Getting started with Emacs text editor]]. ~ Sachin Patil #Emacs #OrgMode
  #I1M2017
+ [[https://opensource.com/article/18/4/how-create-latex-documents-emacs][How to create LaTeX documents with Emacs]]. ~ Sachin Patil #Emacs
  #OrgMode #LaTeX #I1M2017
+ [[https://arxiv.org/abs/1804.02645][A footnote to "The crisis in contemporary mathematics"]]. ~ B. Katz,
  M.G. Katz, S. Sanders #Logic #Math
+ [[http://irreal.org/blog/?p=7085][Magit interface walkthrough]]. #Emacs #Magit
+ [[https://www.stackbuilders.com/tutorials/haskell/cloud-haskell/][Using Cloud Haskell to write a type-safe distributed chat]]. ~ Sebastian
  Pulido Gomez #Haskell
+ [[https://www.hillelwayne.com/post/equals-as-assignment/][Why does "=" mean assignment?]] ~ Hillel Wayne #Programming
+ [[http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005399][Ten simple rules for responsible big data research]]. #BigData
+ [[http://haskelldata.com/][Over 130 practical recipes for data analysis and machine learning]]. 
  #Haskell #DataScience
+ [[https://arxiv.org/abs/1804.03579][Introduction to Iltis: An interactive, Web-Based system for teaching
  logic]]. ~ G. Geck et als. #Teaching #Logic
+ [[http://rkirsling.github.io/][Modal logic playground (A graphical semantic calculator for modal propositional logic)]]. ~ Ross Kirsling #Teaching #Logic
+ [[https://www.oreilly.com/ideas/data-engineers-vs-data-scientists][Data engineers vs. data scientists]]. ~ Jesse Anderson #DataScience
+ [[https://functional.works-hub.com/learn/property-based-integration-testing-using-haskell-6c25c][Property based integration testing using Haskell!]] ~ Kristijan Šarić #Haskell
+ [[https://www.euractiv.com/section/digital/news/twenty-four-eu-countries-sign-artificial-intelligence-pact-in-bid-to-compete-with-us-china][Twenty-four EU countries sign artificial intelligence pact in bid to
  compete with US & China]]. #AI
+ [[https://mystelven.github.io/Association-Automated-Reasoning//Newsletters/123-2018-04.html#guest][Mike Gordon and hardware verification]]. ~ L. Paulson #ITP 
+ [[https://arxiv.org/abs/1804.03922][Evaluating winding numbers through Cauchy indices in Isabelle/HOL]]. ~
  W. Li, L.C. Paulson #ITP #IsabelleHOL #Math
+ [[http://tpetricek.github.io/Talks/2018/monads-what-we-talk-about/nice/index.html#/][What we talk about when we talk about monads]]. ~ T. Petricek
  #Haskell
+ [[https://jeremykun.com/2018/04/13/for-mathematicians-does-not-mean-equality/][For mathematicians, = does not mean equality]]. ~ Jeremy Kun #Math #CompSci
+ [[https://blogs.scientificamerican.com/observations/math-music-and-imagination/][Math, music and imagination]]. ~ Marcus Miller #Math #Music
+ [[https://www.oreilly.com/ideas/jupyter-is-where-humans-and-data-science-intersect][Jupyter is where humans and data science intersect]]. ~ Paco Nathan
  #Jupyter #DataScience
+ [[http://droettboom.com/blog/2018/04/04/python-in-the-browser/][Scientific Python in the browser]]. ~ M. Droettboom #Python #DataScience
+ [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to literate programming]]. ~ Howard Abrams
  #Emacs #OrgMode
+ [[https://www.cs.us.es/~jalonso/apuntes/Soluciones_logicas_de_problemas_logicos/Tema_2.html][SLC2018: Soluciones lógicas de problemas lógicos]]. #Logic #Prolog #CLP 
+ [[https://books.google.com/talktobooks/][Talk to Books (Browse passages from books using experimental AI)]]. #AI
+ [[https://github.com/chris-taylor/aima-haskell][Algorithms from AIMA (Artificial intelligence: a modern approach) in Haskell]]. ~ Chris Taylor #AI #Haskell 
+ [[https://github.com/aimacode/aima-python][Python implementation of algorithms from Russell And Norvig's
  "Artificial Intelligence: A Modern Approach"]]. #AI #Python #Jupyter
+ [[http://kitchingroup.cheme.cmu.edu/pycse/pycse.pdf][pycse - Python3 computations in science and engineering]]. ~ John
  Kitchin #eBook #Python
+ [[https://github.com/jkitchin/scimax][Scimax: an Emacs starterkit designed for people interested in
  reproducible research and publishing]]. ~ John Kitchin
  #Emacs #OrgMode
+ [[http://altermundus.fr/downloads/documents/NamedGraphs.pdf][Gallery of named graphs (with tkz-berge.sty)]]. ~ Alain Matthes #LaTeX #Math
+ [[https://www.stackbuilders.com/tutorials/haskell/cloud-haskell/][Using Cloud Haskell to write a type-safe distributed chat]]. ~ Sebastian
  Pulido Gomez #Haskell
+ [[https://www.hillelwayne.com/post/equals-as-assignment][Why does "=" mean assignment?]] ~ Hillel Wayne #Programming
+ [[https://www.brucker.ch/bibliography/download/2018/brucker.ea-core-dom-2018.pdf][A formal semantics of the core DOM in Isabelle/HOL]]. ~ A.D. Brucker,
  M. Herzberg #ITP #IsabelleHOL
+ [[https://github.com/jkitchin/pycse]["Python computations in science and engineering" in Org mode]] ~ John
  Kitchin #Emacs #OrgMode #Python
+ [[http://aitp-conference.org/2018/aitp18-proceedings.pdf][AITP 2018: The Third Conference on Artificial Intelligence and Theorem Proving
  (Abstracts of the talks)]]. #AI #ATP #ITP
+ [[https://arxiv.org/abs/1609.01493][Axiomatizing category theory in free logic]]. ~ C. Benzmüller,
  D.S. Scott #ITP #IsabelleHOL #CategoryTheory
+ [[http://nfulton.org/papers/aaai18.pdf][Safe reinforcement learning via formal methods (Toward safe control
  through proof and learning)]]. ~ N. Fulton, A. Platzer #AI #ML #ATP
+ [[http://aitp-conference.org/2018/slides/JH.pdf][Let’s make set theory great again!]] ~ John Harrison #ITP 
+ [[http://aitp-conference.org/2018/slides/DMA.pdf][If mathematical proof is a game, what are the states and moves?]] ~
  David McAllester #AI #ATP #ML #Math
+ [[https://www.causeur.fr/intelligence-artificielle-cedric-villani-ethique-150544][Intelligence artificielle: les angles morts du rapport Villani]]. ~
  Hervé Mariton et Cyrille Dalmont #AI
+ [[https://kozikow.com/2016/05/21/very-powerful-data-analysis-environment-org-mode-with-ob-ipython/][Very powerful data analysis environment – org mode with ob-ipython]]. ~
  Robert Kozikowski #Emacs #OrgMode #Python #DataScience
+ [[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs][Some tips for learning Org Mode for Emacs]]. ~ Sacha Chua
  #Emacs #OrgMode
+ [[https://arxiv.org/abs/1610.06996][Efficient verification of imperative programs using auto2]]. ~ B. Zhan
  #IsabelleHOL
+ [[https://www.metalevel.at/equality][The meaning of = for logic programmers]]. ~ Markus Triska
  #LogicProgramming #Prolog
+ [[https://arxiv.org/abs/1804.05677][Boolos' hardest logic puzzle ever in its purest form]]. ~
  J.J. Colomina-Almiñana, P.R. Stinga #Logic
+ [[https://www.reddit.com/r/haskell/comments/8cvr6l/a_better_programming_language_for_data][A better programming language for Data Science/Machine Learning]]. 
  #Haskell #DataScience
+ [[https://whatthefunctional.wordpress.com/2018/04/17/working-with-lists][Working with lists]]. ~ Laurence Emms #Haskell
+ [[https://medium.freecodecamp.org/python-collection-of-my-favorite-articles-8469b8455939][The best of Python: a collection of my favorite articles from 2017 and 2018
  (so far)]]. ~ Gergely Szerovay #Python
+ [[https://blogs.scientificamerican.com/observations/what-the-history-of-math-can-teach-us-about-the-future-of-ai][What the history of Math can teach us about the future of AI]]. ~ Nathan
  Myhrvold #Math #AI
+ [[https://www.fpcomplete.com/blog/why-haskell-is-hot-for-cryptocurrencies][Why Haskell is hot for cryptocurrencies]]. ~ Niklas Hambüchen #Haskell
+ [[http://newartisans.com/2018/04/win-for-recursion-schemes][Program reduction: a win for recursion schemes]]. ~ John Wiegley
  #Haskell
+ [[https://medium.freecodecamp.org/why-you-need-python-environments-and-how-to-manage-them-with-conda-85f155f4353c][Why you need Python environments and how to manage them with Conda]]. ~ 
  Gergely Szerovay #Python
+ [[https://www.elperiodico.com/es/ciencia/20180121/peligro-algoritmos-al-mando-en-la-escuela-6567047][Peligro: algoritmos al mando en la escuela]]. ~ Cathy O'Neill 
+ [[http://capitanswing.com/libros/armas-de-destruccion-matematica/][Armas de destrucción matemática: Cómo el big data aumenta la desigualdad y
  amenaza la democracia]]. ~ Cathy O'Neil #Libro #Matemáticas #BigData
+ [[https://openlibra.com/en/book/linear-algebra-with-applications][Linear algebra with applications]]. ~ W. Keith Nicholson #eBook #Math
  #OpenLibra
+ [[http://agendapublica.elperiodico.com/limites-y-paradojas-de-la-evaluacion-cientifica/][Límites y paradojas de la evaluación científica]]. ~ Daniel Innerarity
+ [[http://cl-informatik.uibk.ac.at/teaching/ws17/vs/reports/SWreport.pdf][History of interactive theorem proving]]. ~ J. Schöpf, S. Widauer #ITP
  #DAO2018
+ [[http://cl-informatik.uibk.ac.at/teaching/ss18/mltp/content.php][Course: Machine learning for theorem proving]]. ~ C. Kaliszyk #ATP #AI #ML
+ [[https://arxiv.org/abs/1804.04967][Constructive analysis of S1S and Büchi automata]]. ~ M. Lichter,
  G. Smolka #ITP #Coq
+ [[https://umazalakain.info/static/report.pdf][Evidence-providing problem solvers in Agda]]. ~ U. Zalakain #ITP #Agda
+ [[https://pdfs.semanticscholar.org/presentation/a5b4/e0b6fa4316651eeb3d793e670662c6ce942d.pdf][Erlang: The power of functional programming]]. ~ S. Thompson
  #FunctionalProgramming #Erlang
+ [[https://pdfs.semanticscholar.org/presentation/a75a/224f2f6d6b0114f225dbea2ae2f92c3117f8.pdf][Functional reactive programming]]. ~ B. Siegel #FunctionalProgramming
+ [[https://pdfs.semanticscholar.org/presentation/8cac/2b1b64bc76e9222219c7576d9f99f715800b.pdf][Semantic Web and Machine Learning]]. ~ F. Železný #ILP
+ [[https://www.genbetadev.com/paradigmas-de-programacion/el-resurgir-de-la-programacion-funcional][El resurgir de la programación funcional]]. #ProgramaciónFuncional
  #Haskell #Erlang #Elixir #Scala #Clojure #Fsharp
+ [[https://www.slideshare.net/LucaBelli/typelevel-summit-91328863][Why monads?]] ~ Luca Belli #Haskell
+ [[https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906][JupyterLab is ready for users]]. #Jupyter
+ [[https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471][Machine Learning is fun! (The world’s easiest introduction to Machine Learning)]]. 
  ~ Adam Geitgey #AI #MachineLearning
+ [[https://github.com/chrisdone/elisp-guide][A quick guide to Emacs Lisp programming]]. ~ Chris Done
  #Emacs #Lisp
+ [[http://emacs.sexy][Emacs is sexy!]] #Emacs
+ [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs: A community driven list of useful Emacs packages,
  libraries and others]]. #Emacs
+ [[https://towardsdatascience.com/why-so-many-data-scientists-are-leaving-their-jobs-a1f0329d7ea4][Here’s why so many data scientists are leaving their jobs]]. ~ Jonny
  Brooks-Bartlett #DataScience
+ [[http://hyperpolyglot.org][Programming languages commonly used features in a side-by-side format]]. 
  #Programming
+ [[https://blogs.herdereditorial.com/filco/diez-libros-filosofia-imprescindibles][10 libros de filosofía imprescindibles]]. ~  Filosofía&Co #Filosofía
+ [[http://irreal.org/blog/?p=7138][Org Babel recipes]]. #Emacs #OrgMode #Babel
+ [[http://reasonablypolymorphic.com/blog/higher-kinded-data/index.html][Higher-Kinded Data]]. ~ Sandy Maguire #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/04/22/making-a-text-adventure-in-haskell-part-4][Making a text adventure in Haskell (Part 4)]]. ~ Laurence Emms #Haskell #Game
+ [[http://www.joachim-breitner.de/blog/738-Verifying_local_definitions_in_Coq][Verifying local definitions in Coq]]. ~ J. Breitner #Haskell
  #Coq
+ [[https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2][How to think like a programmer (lessons in problem solving)]]. ~ Richard
  Reis #Programming
+ [[https://cacm.acm.org/magazines/2018/5/227202-using-functions-for-easier-programming/fulltext][Using functions for easier programming]]. ~ N. Savage #FunctionalProgramming 
  #Haskell
+ [[https://arxiv.org/abs/1804.07860][Formalising mathematics in simple type theory]]. ~ L.C. Paulson #ITP
  #Math #IsabelleHOL #HOL_Light
+ [[https://changelog.complete.org/archives/9900-emacs-5-documents-and-presentations-with-org-mode][Emacs #5: Documents and presentations with Org-Mode]]. ~ John Goerzen
  #Emacs #OrgMode #LaTex #Beamer
+ [[https://arxiv.org/abs/1804.07951][Formal verification of platoon control strategies]]. ~ A. Rashid,
  U. Siddique, O. Hasan #ITP #HOL_Light
+ [[https://www.tweag.io/posts/2018-04-25-funflow.html][Funflow: typed resumable workflows]]. ~ N. Clarke, A. Hermann, T. Nielsen
  #Haskell
+ [[https://www.isa-afp.org/entries/BNF_CC.html][Bounded natural functors with covariance and contravariance in Isabelle/HOL]]. 
  ~ A. Lochbihler, J. Schneider #ITP #IsabelleHOL
+ [[http://usblogs.pwc.com/emerging-technology/machine-learning-evolution-infographic][Machine learning evolution (infographic)]]. ~ A. Morrison and A. Rao #AI
  #MachineLearnig #History
+ [[https://www.onlinebooksreview.com/articles/haskell-programming-book][Best Haskell programming books for functional programming]]. #Haskell 
+ [[https://www.the-tls.co.uk/articles/public/kurt-godel-incompleteness-theorems][Kurt Gödel and the mechanization of mathematics]]. ~ J. Kennedy #Logic
  #Math
+ [[https://www.slideshare.net/JarekRatajski/beauty-and-the-beast-haskell-on-jvm][Beauty and the beast (Eta Haskell on JVM)]]. ~ Jarek Ratajski
  #Haskell
+ [[http://www.cs.nmsu.edu/ALP/wp-content/uploads/2018/04/alp-2018-DLV2-1.pdf][DLV: Evolution and perspectives]]. ~ M. Alviano et als. #LogicProgramming 
  #ASP #DLV
+ [[https://www.futurity.org/artificial-intelligence-bayou-coding-1740702/][New A.I. application can write its own code]]. ~ J. Boyd-Rice #AI
+ [[http://richardzach.org/2018/04/10/the-significance-of-philosophy-to-mathematics][The significance of Philosophy to Mathematics]]. ~ Richard Zach #Math
  #Philosophy
+ [[https://arxiv.org/abs/1804.06398][Modelling bitcoin in Agda]]. ~ A. Setzer #ITP #Agda
+ [[https://arxiv.org/abs/1804.10037][Quantifier elimination for reasoning in economics]]. ~ C.B. Mulligan et
  als. #Logic
+ [[https://www.fpcomplete.com/blog/2018/04/async-exception-handling-haskell][Asynchronous exception handling in Haskell]]. ~ M. Snoyman #Haskell 
+ [[https://github.com/pdlla/smarties][Smarties: a general purpose behavior tree library written in Haskell]]. 
  #Haskell #AI
+ [[https://mathlesstraveled.com/2018/04/26/iterating-squared-digit-sum][Iterating squared digit sum]]. ~ Brent Yorgey #Haskell #Math
+ [[https://github.com/RyanGlScott/ghc-software-foundations][The Software Foundations book, in GHC]]. ~ Ryan Scott #Haskell
+ [[https://www.kdnuggets.com/2018/02/introduction-functional-programming-python.html][Introduction to functional programming in Python]]. ~ Spiro Sideris
  #Python #FunctionalProgramming
+ [[https://www.ams.org/notices/201111/rtx111101580p.pdf][Proof and other dilemmas: Mathematics and Philosophy]] (Reviewed by Jeremy
  Avigad). #Math #Philosophy
+ [[http://i.cs.hku.hk/~bruno/papers/itp2018.pdf][Formalization of a polymorphic subtyping algorithm]]. ~ J. Zhao,
  B.C.S. Oliveira, T. Schrijvers #ITP #Abella
+ [[https://codicalist.wordpress.com/about/][The Babel of languages and the substrate of nature]]. ~ Philip Thrift
  #Programming
+ [[https://johncarlosbaez.wordpress.com/2018/04/07/applied-category-theory-course-part-2][Applied category theory course: ordered sets]]. ~ John Carlos Baez
  #Math #CategoryTheory
+ [[https://arxiv.org/abs/1706.08605][Developing bug-free machine learning systems with formal mathematics]]. 
  ~ D. Selsam, P. Liang, D.L. Dill #ITP #Lean #MachineLearnig
+ [[https://speakerdeck.com/larrytheliquid/martin-lofs-type-theory-mltt][Martin-Löf's type theory (MLTT)]]. ~ Larry Diehl #Logic
+ [[http://pirilampo.org/org-mode/syntax/][Org mode syntax example]]. ~  Fabrice Niessen #Emacs #OrgMode
+ [[https://www.cs.us.es/~jalonso/apuntes/Preguntas_y_respuestas_del_modo_Org/Bibliografia/index.html][Formas de incluir bibliografías en documentos Org]]. #Emacs #OrgMode
  #I1M2017
+ [[https://hal.inria.fr/hal-01772272/document][A formally-proved algorithm to compute the correct average of decimal
  floating-point numbers]]. ~ S. Boldo, F. Faissole, V. Tourneur #ITP #Coq
  #Math
+ [[https://www.quantamagazine.org/decades-old-graph-problem-yields-to-amateur-mathematician-20180417][Decades-old graph problem yields to amateur mathematician]]. ~ Evelyn
  Lamb #Math
+ [[http://www.abc.es/ciencia/abci-famoso-guru-vida-eterna-resuelve-problema-matematico-hace-60-anos-201804271200_noticia.html][Un famoso «gurú» de la vida eterna resuelve un problema matemático de hace 60
  años]]. #Matemáticas
+ [[http://leventerkok.github.io/sbv/][SBV: SMT Based Verification in Haskell (Released: April 29th, 2018)]]. 
  #Haskell #SMT #SBV
+ [[https://ec.europa.eu/digital-single-market/en/news/communication-artificial-intelligence-europe][Communication Artificial Intelligence for Europe]]. #AI

* Mayo 2018

+ [[https://www.cl.cam.ac.uk/~caw77/papers/mechanising-and-verifying-the-webassembly-specification.pdf][Mechanising and verifying the WebAssembly specification]]. ~ C. Watt
  #IsabelleHOL #WebAssembly
+ [[https://www.isa-afp.org/entries/WebAssembly.html][WebAssembly in Isabelle/HOL]]. ~ C. Watt #IsabelleHOL #WebAssembly
+ [[https://mmhaskell.com/blog/2018/4/25/dockerizing-our-haskell-app][Dockerizing our Haskell app]]. ~ James Bowen #Haskell #Docker
+ [[https://computinged.wordpress.com/2018/04/30/indian-supreme-court-rules-that-cs-degrees-cannot-be-provided-on-line][Indian Supreme Court rules that CS degrees cannot be provided on-line]]. 
  ~ Mark Guzdial #Education #CompSci
+ [[https://arxiv.org/abs/1804.10520][Using machine learning to improve cylindrical algebraic decomposition]]. 
  ~ Z. Huang, M. England, D. Wilson, J.H. Davenport, L.C. Paulson
  #MachineLearning #Logic 
+ [[http://www.i-programmer.info/news/150-training-a-education/11751-mathematical-thinking.html][Courses on mathematical thinking now underway]]. ~ Sue Gee #Math #Logic
  #CompSci 
+ [[https://escher.ntr.nl/en][The Metamorphosis of Escher through tours]].
+ [[https://arxiv.org/abs/1805.00304][Gröbner bases of modules and Faugère's F4 algorithm in Isabelle/HOL]]. ~
  A. Maletzky, F. Immler #ITP #IsabelleHOL #Math
+ [[https://github.com/adjoint-io/aos-signature][Abe-Ohkubo-Suzuki linkable ring signatures]]. ~ A. Centelles, S. Diehl
  #Haskell
+ [[http://www.abc.es/ciencia/abci-matematicas-descifraron-maquina-enigma-nazis-201804301647_noticia.html][Las matemáticas que descifraron la máquina «Enigma» de los nazis]]. ~
  Paz Jiménez Seral y Manuel Vázquez Lapuente #Matemáticas
+ [[https://arxiv.org/abs/1805.00068][Exploiting Answer Set Programming with external sources for meta-interpretive
  learning]]. ~ T. Kaminski, T. Eiter, K. Inoue #ASP #ILP
+ [[http://www.doc.ic.ac.uk/~rak/papers/swish.pdf][Using SWISH to realise interactive web based tutorials for logic based languages]]. ~ J. Wielemaker, F. Riguzzi, R. Kowalski, T. Lager,
  F. Sadri, M. Calejo. #LogicProgramming #Prolog #SWISH
+ [[http://cattheory.com/editTimeTacticsDraft.pdf][Edit-time tactics in Idris]]. ~ Joomy Korkut. #Idris
+ [[http://reduction.io/essays/rosetta-haskell.html][Rosetta Haskell]] (how abstractions are used by sequentially rewriting a
  program to do exactly the same thing using different techniques). ~
  Chas Leichner #Haskell
+ [[https://blog.d46.us/advanced-emacs-startup][Advanced techniques for reducing Emacs startup time]]. ~ Joe Schafer #Emacs
+ [[https://personal.cis.strath.ac.uk/fredrik.nordvall-forsberg/papers/variationsIR_mfcs2017.pdf][Variations on inductive-recursive definitions]]. ~ N. Ghani et als. #Agda
+ [[https://www.isa-afp.org/entries/VerifyThis2018.html?utm_source=dlvr.it&utm_medium=twitter][VerifyThis 2018 - Polished Isabelle solutions]]. ~ P. Lammich and
  S. Wimmer #IsabelleHOL
+ [[http://blog.ploeh.dk/2018/04/30/parametrised-unit-tests-in-haskell][Parametrised unit tests in Haskell]]. ~ Mark Seemann #Haskell
+ [[https://arxiv.org/abs/1805.00808v1][Formal process virtual machine for smart contracts verification]]. ~
  Z. Yang, H. Lei #Coq
+ [[http://www.andrew.cmu.edu/user/avigad/Papers/learning_logic_and_proof.pdf][Learning logic and proof with an interactive theorem prover]]. ~
  J. Avigad #Logic #ITP #Lean
+ [[http://leanprover.github.io/logic_and_proof][Logic and proof (Release 0.1)]]. ~ J. Avigad, R.Y. Lewis, F. van Doorn
  #Logic #ITP #Lean
+ [[http://irreal.org/blog/?p=7168][Writing LaTeX with Org Mode]]. #Emacs #OrgMode #LaTeX 
+ [[https://github.com/hugrubsan/Offline-Handwriting-Recognition-with-TensorFlow][Sistema de Deep Learning para el reconocimiento de palabras manuscritas implementado en TensorFlow y entrenado con IAM Handwriting
  Database]]. ~ Hugo Rubio #DeepLearning
+ [[https://www.toptal.com/machine-learning/de-resolver-ecuaciones-a-aprendizaje-profundo-un-tutorial-de-tensorflow-python/es][De resolver ecuaciones a aprendizaje profundo: Un tutorial de TensorFlow
  Python]]. ~ Oliver Holloway #DeepLearning
+ [[https://www.toptal.com/machine-learning/tensorflow-python-tutorial][From solving equations to Deep Learning: A TensorFlow Python tutorial]]. ~
  Oliver Holloway #DeepLearning
+ [[https://doisinkidney.com/posts/2018-05-05-induction.html][Type-level induction in Haskell]]. ~ Donnacha Oisín Kidney #Haskell
+ [[https://plato.stanford.edu/entries/lambda-calculus/][The lambda calculus]]. ~ J. Alama, J. Korbmacher #Logic  
+ [[https://news.stanford.edu/2018/05/04/deep-learning-comes-full-circle/][Deep learning comes full circle]]. ~ N. Collins #DeepLearning
+ [[https://cardanodocs.com/technical/formal-specification-for-a-cardano-wallet/][Formal specification for a Cardano wallet]]. ~ D. Coutts, E. de Vries #Cardano
+ [[http://www.sciencemag.org/news/2018/05/ai-researchers-allege-machine-learning-alchemy][AI researchers allege that machine learning is alchemy]]. ~ M. Hutson
  #MachineLearnig
+ [[https://whatthefunctional.wordpress.com/2018/05/07/making-an-ecosystem-simulation-in-haskell-part-1/][Making an ecosystem simulation in Haskell (Part 1)]]. ~ Laurence Emms
  #Haskell
+ [[http://travis.athougies.net/posts/2018-05-05-dynamic-programming-is-recursion.html][Dynamic programming in Haskell is just recursion]]. ~ Travis Athougies
  #Haskell
+ Machine learning tutorial: 
  + [[http://bit.ly/2FS50zv][ML basics and experimenting]] 
  + [[http://bit.ly/2FQbjUc][From text to features and NLP-oriented intro to selected learning algorithms]].
  + [[http://bit.ly/2FQ2ZUE][Mallet in UIMA: experiments with ClearTK and Lab]].
  + [[http://bit.ly/2FQ37DC][WEKA API brief and highlight of further topics]].
+ [[https://github.com/luqui/polyrhythmia][Procedural generation of polyrhythmic beats]]. ~ Luke Palmer #Haskell
+ [[https://byorgey.wordpress.com/2018/05/06/conversations-with-a-six-year-old-on-functional-programming][Conversations with a six-year-old on functional programming]]. ~ Brent Yorgey
  #FunctionalProgramming
+ [[http://ul.io/nb/2018/04/30/literate-analytics-with-org-babel][A brief introduction to literate analytics with Org-Babel]]. ~ Nick
  Barnwell #Emacs #OrgMode
+ [[https://github.com/PythonistaMX/py101][Introducción a la programación con Python 3]]. ~ José Luis Chiquete
  Valdivieso #Python
+ [[https://queue.acm.org/detail.cfm?id=3212479][C is not a low-level language (Your computer is not a fast PDP-11)]]. ~
  David Chisnall #Programming
+ [[https://unpocologico.wordpress.com/2018/05/08/the-humanities-of-maths-computer-science][The Humanities of Maths/Computer Science]]. ~ L.P. Cruz #Math #CompSci
+ [[http://nautilus.cs.miyazaki-u.ac.jp/~skata/MagicHaskeller.html][MagicHaskeller: An inductive functional programming system for
  casual/beginner Haskell programmers]]. ~ Susumu Katayama #Haskell
+ [[https://blog.jle.im/entry/const-applicative-and-monoids.html][The Const Applicative and Monoids]]. ~ Justin Le #Haskell
+ [[http://briansteffens.com/2017/02/20/from-math-to-machine.html][From math to machine: translating a function to machine code]]. ~ Brian
  Steffens #Programming #Math #Haskell #Imperative_language
  #Assembly_language #Machine_code #I1M2017 
+ [[https://www.isa-afp.org/entries/Modular_Assembly_Kit_Security.html][An Isabelle/HOL formalization of the modular assembly kit for security properties]]. 
  ~ O. Bračevac et als. #IsabelleHOL
+ [[https://abhiroop.github.io/vectorization.pdf][Vectorization in Haskell]]. ~ Abhiroop Sarkar #Haskell
+ [[https://github.com/TechBookHunter/Free-Haskell-Books][A curated collection of free eBooks about Haskell]]. #Haskell
+ [[http://adrianmejia.com/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course][8 time complexities that every programmer should know]]. ~ Adrián Mejía
  #Algorithmic
+ [[https://arxiv.org/abs/1805.03496][Revisiting decision diagrams for SAT]]. ~ T. van Dijk, R. Ehlers,
  A. Biere #Logic #ATP #SAT
+ [[https://arxiv.org/abs/1805.03107][Machine learning guidance and proof certification for connection tableau]]. ~
  M. Färber, C. Kaliszyk, J. Urban #MachineLearning #ATP #Prolog
+ [[https://github.com/DanBurton/runmemo/blob/cccc5a378264b3fe002d73089ad7c690f39cb86f/examples/lcs.hs][Explicit memoization can be elegant; a response to "Dynamic programming in Haskell is just recursion"]]. ~ Dan Burton #Haskell
+ [[https://doisinkidney.com/posts/2018-05-05-induction.html][Type-level induction in Haskell]]. ~ Donnacha Oisín Kidney #Haskell
+ [[http://reasonablypolymorphic.com/blog/follow-the-denotation/][Follow the denotation]]. ~ Sandy Maguire #Haskell
+ [[https://arxiv.org/abs/1705.04680][Proof mining with dependent types]]. ~ E. Komendantskaya, J. Heras #ITP #Coq
  #MachineLearning
+ [[http://h2.jaguarpaw.co.uk:8000/posts/hkd-pattern-type-level-ski][The HKD pattern and type-level SKI]]. ~ Tom Ellis #Haskell
+ [[https://www.oreilly.com/ideas/machine-learning-a-quick-and-simple-definition][Machine learning: A quick and simple definition]]. ~ James Furbush
  #AI #MachineLearning
+ [[http://bit.ly/2G8iRC0][La hipótesis de Riemann y el problema P = NP]]. ~ Juan Arias de Reyna
  #Matemáticas #Computación
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?TFPIE2017.3][Functional baby talk: Analysis of code fragments from novice Haskell programmers]]. ~ J. Singer, B. Archibald #Haskell
+ [[https://github.com/miguelibagar/EulerianPath][Los puentes de Königsberg: Estudio y resolución con Haskell]]. ~ Miguel
  Ibáñez #Hakell #Matemáticas
+ [[https://www.cl.cam.ac.uk/events/arw2018/arw2018-proc.pdf][Proceedings of the 25th Automated Reasoning Workshop (Bridging the Gap
  between Theory and Practice)]]. #ATP
+ [[https://elpais.com/tecnologia/2018/05/09/actualidad/1525854596_328159.html][Qué hacer ante la "tecnupidez"]]. ~ Mario Bunge #Ciencia #Tecnología
+ [[http://www.laetoli.es/las-dos-culturas/155-que-es-la-tecnologia-9788492422999.html][¿Qué es la tecnología?]] ~ Dominique Raynaud #Ciencia #Tecnología
+ [[http://ruleml.org/talks/FrancescoRicca-ASPinIndustrContxt-RuleMLWebinar-2018-03-23.pdf][ASP in industrial contexts: applications and toolchain]]. ~ Francesco Ricca #Logic #Programming #ASP
+ [[http://bit.ly/2jSW30v][Writing bug-free code using theorem provers]]. ~ Aaron Stump #ITP
+ [[https://www.newton.ac.uk/seminar/20170710143015301][Proof assistants: from symbolic logic to real mathematics?]] ~ Lawrence
  C Paulson #ITP #Logic #Math
+ [[https://www.eff.org/deeplinks/2018/05/math-cant-solve-everything-questions-we-need-be-asking-deciding-algorithm-answer][Math can’t solve everything: questions we need to be asking before deciding an
  algorithm is the answer]]. ~ J. Williams, L. Gunn #Algorithms
+ [[http://www.robots.ox.ac.uk/~gunes/assets/pdf/baydin-2018-ad-machinelearning.pdf][Automatic differentiation in machine learning: a survey]]. ~ Atılım Güneş Baydin
  et als. #AD #AutomaticDifferentiation #ML #MachineLearning
+ [[https://github.com/ekmett/ad][Automatic differentiation]]. ~ Edward Kmett #Haskell #AD #AutomaticDifferentiation
+ [[http://lab.elmundo.es/inteligencia-artificial/que-es.html][La Inteligencia Artificial no es como en las películas. ¿Qué es?]] #IA
+ [[https://www.gnu.org/gnu/rms-lisp.html][My Lisp experiences and the development of GNU Emacs]]. ~ Richard
  Stallman #Lisp #Emacs
+ [[http://binaire.blog.lemonde.fr/2018/05/14/intelligence-artificielle-et-pensee-humaine][Intelligence artificielle et pensée humaine]]. ~ Margarida Romero
  #IA
+ [[http://repositorium.sdum.uminho.pt/bitstream/1822/54476/1/exercicios-sbc3.pdf][Exercícios resolvidos em Prolog sobre sistemas baseados em conhecimento]]. 
  ~ Paulo Cortez #Prolog
+ [[https://blog.jle.im/entry/purely-functional-typed-models-1.html][A purely functional typed approach to trainable models (Part 1)]]. ~
  Justin Le #Haskell #MachineLearning
+ [[http://www.cs.cmu.edu/~rwh/papers/lfmtp18.pdf][The RedPRL proof assistant]]. ~ C. Angiuli, E. Cavallo, K.B. Hou,
  R. Harper, J. Sterling. #ITP
+ [[https://venturebeat.com/2018/05/10/carnegie-mellon-university-starts-first-ai-degree-program-in-u-s/][Carnegie Mellon University starts first AI degree program in U.S.]] ~
  K. Johnson. #AI
+ [[https://www.cs.cmu.edu/bs-in-artificial-intelligence/curriculum][Bachelor of Science in Artificial Intelligence (CMU): Curriculum]]. #AI
+ [[http://andrew-wohlgemuth.com/DMmathed.pdf][Deductive mathematics (an introduction to proof and discovery for
  mathematics education)]]. ~ A. Wohlgemuth #eBook #Math
+ [[http://revue.sesamath.net/spip.php?article1096][Pensée informatique et géométrie]]. ~ A. Busser, P. Debrabant, S. Gonifei #Math
  #Programming
+ [[https://www.haskell.org/communities/05-2018/html/report.html][Haskell communities and activities report (May 2018)]]. #Haskell
+ [[http://jips-k.org/file/down?pn=545 ][Verifying code toward trustworthy software]]. ~ Hyong-Soon Kim and
  Eunyoung Lee #FormalVerification
+ [[http://www.mais.informatik.tu-darmstadt.de/WebBibPHP/papers/2018/TUD-CS-2018-0056-I-MAKS-Tr.pdf][I-MAKS (A framework for information-flow security in Isabelle/HOL)]]. ~
  S Grewe, H Mantel, M Tasch, R Gay, H Sudbrock #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1805.03740][High-level signatures and initial semantics]]. ~ B. Ahrens,
  A. Hirschowitz, A. Lafont, M. Maggesi #ITP #Coq
+ [[http://irreal.org/blog/?p=7198][Emacs tools for writers]]. #Emacs
+ [[https://opensource.com/article/18/5/emacs-modes-writers][5 Emacs modes for writers]]. ~ Scott Nesbit #Emacs
+ [[https://www.quantamagazine.org/to-build-truly-intelligent-machines-teach-them-cause-and-effect-20180515/][To build truly intelligent machines, teach them cause and effect]]. #AI
+ [[https://www.kdnuggets.com/2018/05/pearl-book-science-cause-effect.html][The book of why (The new science of cause and effect)]]. ~ Judea Pearl,
  Dana Mackenzie #Science #AI
+ [[https://medium.com/@olxc/catamorphisms-and-f-algebras-b4e91380d134][Catamorphisms and F-algebras]]. ~ Alexey Avramenko #Haskell
+ [[https://medium.com/coinmonks/create-blockchain-in-haskell-e65df30878bc][Create Blockchain in Haskell]]. ~ Gaurav Agrawal #Haskell #Blockchain
+ [[https://www.cs.princeton.edu/~appel/papers/wand-frame.pdf][Proof pearl: Magic wand as frame]]. ~ Qinxiang Cao, Shengyi Wang, Aquinas Hobor,
  and Andrew W. Appel #ITP #Coq
+ [[https://mmhaskell.com/blog/2018/5/14/advanced-github-webhooks-and-automation][Advanced Github: Webhooks and automation]]. ~ James Bowen #Haskell
+ [[http://www.joachim-breitner.de/blog/740-Proof_reuse_in_Coq_using_existential_variables][Proof reuse in Coq using existential variables]]. ~ J. Breitner #ITP #Coq
+ [[https://hal.inria.fr/hal-01728828/document][A Coq formalization of digital filters]]. ~ Diane Gallois-Wong, Sylvie
  Boldo, and Thibault Hilaire #ITP #Coq
+ [[https://hal.inria.fr/hal-01483457/document][Formalization of the arithmetization of euclidean plane geometry and
  applications]]. ~ Pierre Boutry, Gabriel Braun, Julien Narboux #ITP #Coq
  #Math
+ [[https://arxiv.org/abs/1803.00403][A general formal memory framework in Coq for verifying the properties of
  programs based on higher-order logic theorem proving with increased
  automation, consistency, and reusability]]. ~ Zheng Yang, Hang Lei #ITP #Coq
+ [[http://reasonablypolymorphic.com/blog/ecstasy-case-study/index.html][Performance and feature case studies in ecstasy]]. ~ Sandy Maguire
  #Haskell
+ [[https://www.carnegiecouncil.org/publications/articles_papers_reports/artificial-intelligences-ethical-challenges][Artificial Intelligence's ethical challenges]]. ~ L. Zacharias #AI #Ethics
+ [[https://idontgetoutmuch.wordpress.com/2018/05/19/cartography-in-haskell][Cartography in Haskell]]. ~ Dominic Steinitz #Haskell
+ [[https://arxiv.org/abs/1805.06869][Revisiting the tree edit distance and its backtracing: A tutorial]]. ~
  B. Paaßen #Algorithms
+ [[https://arxiv.org/abs/1805.06502][First experiments with neural translation of informal to formal
  mathematics]]. ~ Q. Wang, C. Kaliszyk, J. Urban #MachineLearning #Math
+ [[https://bartoszmilewski.com/2018/05/16/free-monoidal-functors-categorically/amp/][Free monoidal functors, categorically!]] ~ Bartosz Milewski
  #haskell #CategoryTheory
+ [[http://www.tom-ridge.com/resources/doc/whitington17ocaml_workshop_post_proceedings-ocamli.pdf][Direct interpretation of functional programs for debugging]]. ~
  J. Whitington, T. Ridge #FunctionalProgramming
+ [[https://arxiv.org/abs/1805.05124v1][Vector Programming using structural recursion (An introduction to vectors for beginners)]]. ~ M.T. Morazán #Racket
+ [[https://arxiv.org/abs/1805.05125v1][Using Elm to introduce algebraic thinking to K-8 students]]. ~
  C. d'Alves et als. #Elm
+ [[https://arxiv.org/abs/1805.05127v1][Teaching Erlang through the Internet: an experience report]]. ~ S. Adams
  #Erlang
+ [[http://www.haskellforall.com/2018/05/how-i-evaluate-haskell-packages.html][How I evaluate Haskell packages]]. ~ G. Gonzalez #Haskell
+ [[https://whatthefunctional.wordpress.com/2018/05/21/making-an-ecosystem-simulation-in-haskell-part-2/amp/][Making an ecosystem simulation in Haskell (Part 2)]]. ~ Laurence Emms
  #Haskell
+ [[https://arxiv.org/abs/1805.07433][DeepLogic: end-to-end logical reasoning]]. ~ N. Cingillioglu, A. Russo
  #Logic #MachineLearnig
+ [[https://arxiv.org/abs/1805.07563][Reinforcement learning of theorem proving]]. ~ C. Kaliszyk, J. Urban,
  H. Michalewski, M. Olšák #Logic #ATP #MachineLearnig
+ [[https://arxiv.org/abs/1805.07431][Can machine learning identify interesting mathematics? An exploration using
  empirically observed laws]]. ~ Chai Wah Wu #MachineLearning #Math
+ [[https://www.brucker.ch/bibliography/download/2018/brucker.ea-standard-compliance-testing-2018.pdf][Formalizing (Web) standards: an application of test and proof]]. ~
  A.D. Brucker, M. Herzberg #ITP #IsabelleHOL
+ [[https://arxiv.org/abs/1805.07494][Number sequence prediction problems and computational powers of neural
  network models]]. ~ H. Nam, S. Kim, K. Jung #MachineLearning #Math
+ [[https://cacm.acm.org/blogs/blog-cacm/228006-teaching-two-programming-languages-in-the-first-cs-course/fulltext][Teaching two programming languages in the first CS course]]. ~
  M. Guzdial #Teaching #Programming
+ [[https://www.quantamagazine.org/a-classical-math-problem-gets-pulled-into-the-modern-world-20180523/][A classical math problem gets pulled into the modern world]]. ~
  K. Hartnett #Math
+ [[https://www.isa-afp.org/entries/Probabilistic_Timed_Automata.html][Probabilistic timed automata in Isabelle/HOL]]. ~ S. Wimmer, J. Hölzl
  #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Hidden_Markov_Models.html][Hidden Markov models]]. ~ S. Wimmer #IsabelleHOL
+ [[https://ro-che.info/articles/2018-05-25-quickcheck-vs-smallcheck][QuickCheck vs SmallCheck]]. ~ R. Cheplyaka #Haskell
+ [[https://elpais.com/elpais/2018/05/18/ciencia/1526642306_475745.html][Polinomios contra ordenadores cuánticos]]. ~ I. Luengo #Matemáticas
  #Computación
+ [[https://two-wrongs.com/technical-writing-learning-from-kernighan][Technical writing: Learning from Kernighan]]. ~ Two Wrongs #Programming
+ [[https://www.technologyreview.com/s/611138/microsoft-is-creating-an-oracle-for-catching-biased-ai-algorithms][Microsoft is creating an oracle for catching biased AI algorithms]]. ~
  W. Knight #AI
+ [[https://www.technologyreview.com/s/611146/the-us-military-is-funding-an-effort-to-catch-deepfakes-and-other-ai-trickery][The US military is funding an effort to catch deepfakes and other AI trickery]]. 
  ~ W. Knight #AI
+ [[http://www.cs.nmsu.edu/~epontell/ALP/uploads/alp_Amelia_Harrison.pdf][Proving program correctness using the AG semantics: an example with
  n-Queens]]. ~ A. Harrison #ASP
+ [[http://www.i-programmer.info/news/150-training-a-education/11822-free-ai-course-from-finland.html][Free AI course from Finland]]. ~ S. Gee #AI 
+ [[https://github.com/takenobu-hs/haskell-symbol-search-cheatsheet][Haskell/GHC symbol search cheatsheet]]. ~ Takenobu Tani #Haskell
+ [[https://books.google.es/books?id=Y3nRBQAAQBAJ][Combinatorics of permutations]]. ~ M. Bona #Math
+ [[https://vynm.github.io/Comutations/posts/2018-05-25-00Introduction.html][Combinatorics of permutations in Haskell: Introduction]]. ~ Vinay
  Madhusudanan #Haskell #Math
+ [[http://hsyl20.fr/home/files/talks/shenry-2013-02-05-haskell-intro.pdf][Haskell: an introduction]]. ~ Sylvain Henry #Haskell
+ [[http://hsyl20.fr/home/posts/2018-05-22-extensible-adt.html][Extensible ADT (EADT)]]. ~ Sylvain Henry #Haskell
+ [[https://blog.roman-gonzalez.ca/post/174140457777/fast-haskell-coding-with-cushions][Fast Haskell coding with cushions]]. ~ Roman Gonzalez #Haskell
+ [[https://www.isa-afp.org/entries/Irrationality_J_Hancl.html][Irrational rapidly convergent series in Isabelle/HOL]]. ~ A. Koutsoukou
  Argyraki, W. Li #ITP #IsabelleHOL #Math
+ [[https://medium.com/urbint-engineering/haskell-lens-operator-onboarding-a235481e8fac][Haskell Lens Operator Onboarding]]. ~ Russell Matney #Haskell
+ [[https://en.wikipedia.org/wiki/Definitions_of_mathematics][Definitions of mathematics]]. #Math
+ [[https://arxiv.org/pdf/1805.08059][One Monad to prove them all (Functional pearl)]]. ~ J- Christiansen,
  S. Dylus, F. Teegen #ITP #Coq #Haskell
+ [[https://arxiv.org/pdf/1805.07797][One formalization of virtue ethics via learning]]. ~ N.S. Govindarajulu, 
  S. Bringjsord, R. Ghosh #AI
+ [[https://hal.inria.fr/hal-01783851/document][A toolchain to produce correct-by-construction OCaml programs]]. ~ J.C. 
  Filliâtre et als. #FunctionalProgramming #OCaml #Why3
+ [[https://www.isa-afp.org/entries/AxiomaticCategoryTheory.html][Axiom systems for category theory in free logic]]. ~ C. Benzmüller and
  D. Scott #ITP #IsabelleHOL #Math #Logic
+ [[https://arxiv.org/pdf/1805.07239][Translation of algorithmic descriptions of discrete functions to SAT with applications to cryptanalysis problems]]. ~ A Semenov et als. #SAT
+ [[http://www.comlab.ox.ac.uk/ralf.hinze/publications/ICFP09.pdf][Functional pearl: La tour d’Hanoï]]. ~ R. Hinze #FuncionalProgramming #Haskell
+ [[https://scss.tcd.ie/publications/theses/diss/2015/TCD-SCSS-DISSERTATION-2015-068.pdf][Simulation of mathematical games using functional programming]]. ~
  D. Murphy #FuncionalProgramming #Haskell #Math #Games
+ [[https://books.goalkicker.com/LaTeXBook/LaTeXNotesForProfessionals.pdf][LaTeX notes for professionals book]]. #LaTeX
+ [[http://mrhonner.com/archives/18665][Visualizing Cantor’s zig zag]]. ~ Patrick Honner #Math
+ [[https://arxiv.org/pdf/1804.00485v1][Lisp, Jazz, Aikido (three expressions of a single essence)]]. ~ Didier
  Verna #FunctionalProgramming #Lisp
+ [[http://kitchingroup.cheme.cmu.edu/blog/2018/05/14/f-strings-in-emacs-lisp][f-strings in emacs-lisp]]. ~ John Kitchin #Emacs #Elisp
+ [[https://arxiv.org/pdf/1805.09938][Automated verification of neural networks: Advances, challenges and
  perspectives]]. ~ F. Leofante et als. #AutomatedReasoning #MachineLearning
+ [[https://www.isa-afp.org/entries/Monad_Memo_DP.html][Monadification, memoization and dynamic programming in Isabelle/HOL]]. ~
  S. Wimmer, S. Hu and T. Nipkow #ITP #IsabelleHOL #Algorithms
+ [[https://github.com/seroron/hblock][Block puzzle in Haskell]]. ~ @__seroron #Haskell
+ [[https://www.lix.polytechnique.fr/Labo/Dale.Miller/papers/cada-draft.pdf][Computation-as-deduction in Abella: work in progress]]. ~ K. Chaudhuri, 
  U. Gérard, D. Miller #ITP #Abella
+ [[https://research.fb.com/announcing-the-facebook-testing-and-verification-request-for-research-proposals/][Announcing the Facebook Testing and Verification request for research
  proposals]].  
+ [[https://www.eldiario.es/hojaderouter/robots/Realidad-ficcion-algoritmos-enganan-magia_0_776572603.html][¿Realidad o ficción? Inteligencia artificial que nos engaña como por
  arte de magia]]. ~ Cristina Sánchez #IA
+ [[https://mmhaskell.com/blog/2018/5/21/nix-haskell-concepts-for-package-managment][Nix: Haskell concepts for package managment]]. ~ James Bowen
  #Haskell #Nix
+ [[https://arxiv.org/pdf/1805.11799][Automated proof synthesis for propositional logic with deep neural networks]]. ~
  T. Sekiyama, K. Suenaga #Logic #ATP #DeepLearning
+ [[https://two-wrongs.com/purely-functional-avl-trees-in-common-lisp][Purely functional AVL trees in Common Lisp]]. #CommonLisp
+ [[https://arxiv.org/pdf/1805.10872][DeepProbLog: Neural probabilistic logic programming]]. ~ R. Manhaeve et
  als. #LogicProgramming #DeepLearning
+ [[https://www.scientificamerican.com/article/how-close-are-we-really-to-building-a-quantum-computer][How close are we—really—to building a quantum computer?]] ~ Larry
  Greenemeier #CompSci
+ [[https://plato.stanford.edu/entries/mathematics-constructive/][Constructive Mathematics]]. ~ D. Bridges #Logic #Math
+ [[http://www.microsiervos.com/archivo/ordenadores/mainframe-ibm-1401-fortran.html][Un mainframe IBM 1401 de 1959 compilando Fortran]]. ~ @Alvy
  #Programación #Computación  
+ [[https://en.wikipedia.org/wiki/History_of_programming_languages][History of programming languages]]. #Programming #CompSci
+ [[https://en.wikipedia.org/wiki/Timeline_of_programming_languages][Timeline of programming languages]]. #Programming #CompSci

* Junio 2018

+ [[https://www.isa-afp.org/entries/Optimal_BST.html][Optimal binary search trees in Isabelle/HOL]]. ~ T. Nipkow and
  D. Somogyi #ITP #IsabelleHOL #Algorithms
+ [[http://www.diva-portal.org/smash/get/diva2:1209426/FULLTEXT01.pdf][Functional programming and legacy software (Using PureScript to extend a legacy JavaScript system)]]. ~ C. Fischer #PureScript
+ [[https://people.cs.kuleuven.be/~tom.schrijvers/Research/papers/lics2018.pdf][Syntax and semantics for operations with scopes]]. ~ M. Piróg,
  T. Schrijvers, N. Wu, M. Jaskelioff #Haskell
+ [[https://mat-web.upc.edu/people/sebastia.xambo/QC/qc.pdf][Mathematical essentials of quantum computing]]. ~ J. Rué, S. Xambó #Math
  #CompSci
+ [[https://dslsofmath.github.io/BScProj2018/index.html][Learn You a Physics for Great Good!]] ~ B. Werner, E. Sjöström,
  J. Johansson, O. Lundström #eBook #Haskell #Physics
+ [[https://arxiv.org/pdf/1805.10090][Certified ordered completion in Isabelle/HOL]]. ~ C. Sternagel,
  S. Winkler #ITP #IsabelleHOL
+ [[https://hal.inria.fr/hal-01799712/document][Modular verification of programs with effects and effect handlers in Coq]]. ~
  T. Letan, Y. Régis-Gianas, P. Chifflier, G. Hiet #ITP #Coq
+ [[https://hal.inria.fr/hal-01799629/document][A more precise, more correct stack and register model for CompCert]]. ~
  G. Barany #ITP #Coq
+ [[http://staff.mmcs.sfedu.ru/~ulysses/Papers/2018-TFP-dgp-recursion.pdf][Handling recursion in generic programming using closed type families]]. ~
  A. Bolotina, A. Pelenitsyn #FunctionalProgramming #Haskell
+ [[https://books.goalkicker.com/AlgorithmsBook][Algorithms notes for professionals]]. #eBook #Algorithms
+ [[https://github.com/owickstrom/gi-gtk-declarative][Purely functional and declarative GTK+ programming in Haskell]]. ~ Oskar
  Wickström #Haskell
+ [[https://github.com/DSLsofMath/DSLsofMath/raw/master/L/snapshots/DSLsofMathNotes_2018-02-28.pdf][Domain specific languages of mathematics: lecture notes]]. ~ Patrik
  Jansson, Cezar Ionescu. #Haskell #Math
+ [[http://www.well-typed.com/blog/2018/05/semi-formal-development/][Semi-formal development: The Cardano wallet]]. ~ Edsko de Vries #Haskell
+ [[http://www.posteriorscience.net/?p=206][Programming by poking: why MIT stopped teaching SICP (The Structure
  and Interpretation of Computer Programs)]]. ~ Yarden Katz #Programming
+ [[http://www.cs.cmu.edu/~15150][Course CMU 15-150: Functional programming, summer 2018]].
  #FunctionalProgramming #SML
+ [[http://reports-archive.adm.cs.cmu.edu/anon/2010/CMU-CS-10-140.pdf][Introductory Computer Science Education at Carnegie Mellon University: A Deans’ Perspective]]. ~ R.E. Bryant, K. Sutner, M.J. Stehlik #Teaching
  #CompSci
+ [[https://existentialtype.wordpress.com/2011/04/17/some-advice-on-teaching-fp][Some thoughts on teaching functional programming]]. ~ R. Harper
  #Teaching #FuncionalProgramming
+ [[https://github.com/cascala/galileo][Galileo is the genesis of a symbolic and numerical math tool written
  in Scala; a Computer Algebra System (CAS)]].  #Scala #Math #CAS
+ [[https://whatthefunctional.wordpress.com/2018/06/02/making-an-ecosystem-simulation-in-haskell-part-3][Making an ecosystem simulation in Haskell (Part 3)]]. ~ Laurence Emms
  #Haskell
+ [[https://arxiv.org/pdf/1806.00069][Explaining explanations: an approach to evaluating interpretability of
  machine learning]]. ~ L.H. Gilpin et als. #XAI #AI #MachineLearning
+ [[https://github.com/coinmetrics-io/haskell-tools][Haskell-based CoinMetrics.io tools]]. #Haskell
+ [[https://mmhaskell.com/blog/2018/6/4/bxit5i954uafn0n4gah3yrzcxnc3q6][Codeworld: Haskell as a first programming language]]. ~ James Bowen
  #Haskell #Codeworld #Teaching
+ [[https://dev.to/allanmacgregor/you-should-learn-functional-programming-in-2018-4nff][You should learn functional programming in 2018]]. ~ Allan MacGregor
  #FunctionalProgramming
+ [[https://books.goalkicker.com/LinuxBook/][Linux notes for professionals]]. #eBook #Linux
+ [[https://github.com/pedritomelenas/Software-Matematicas-GAP][Bloque de GAP de la asignatura Software Matemáticas]]. ~ Pedro
  A. García-Sánchez #CAS #SageMath
+ [[https://www.gap-system.org][GAP (groups, algorithms, programming) a system for computational
  discrete algebra]]. #CAS
+ [[https://github.com/TheWizardTower/monadTransformers/raw/master/Slides.pdf][Monad transformers for the easily confused]]. ~ @TheWizardTower #Haskell
+ [[https://techspree.net/github-alternatives/][GitHub alternative top 7 sites to host your open source project]]. #GitHub
+ [[https://itsfoss.com/github-alternatives][Top GitHub alternatives to host your open source project]]. ~ Abhishek
  Prakash #GitHub
+ [[https://arxiv.org/pdf/1806.00608][GamePad: a learning environment for theorem proving]]. ~ D. Huang,
  P. Dhariwal, D. Song, I. Sutskever #ITP #Coq #MachineLearning
+ [[https://arxiv.org/pdf/1806.00810][A new style of mathematical proof]]. ~ W.M. Farmer #Logic #Math
+ [[https://jfr.unibo.it/article/download/8212/7877][A decision procedure for univariate polynomial systems based on root
  counting and interval subdivision]]. ~ C. Munoz, A. Narkawicz, A. Dutle
  #ITP #PVS #Math
+ [[https://arxiv.org/pdf/1806.02101][Calculational verification of reactive programs with reactive
  relations and Kleene algebra]]. ~ S. Foster, K. Ye, A. Cavalcanti,
  J. Woodcock #ITP #IsabelleHOL
+ [[https://paytonturnage.com/writing/2018-06-05-generating-art-with-haskell][Generating art with Haskell]].  #Haskell
+ [[https://doisinkidney.com/posts/2018-06-03-breadth-first-traversals-in-too-much-detail.html][Breadth-first traversals in far too much detail]]. ~ Donnacha Oisín
  Kidney #Haskell
+ [[http://www.riptutorial.com/haskell][Haskell RIP tutorial]]. ~ @RipTutorial #Haskell
+ [[https://www.kosmikus.org/DerivingVia/deriving-via-paper.pdf][Deriving via (or, how to turn hand-written instances into an anti-pattern)]]. ~
  B. Blöndal, A. Löh, R. Scott #Haskell
+ [[https://www.technologyreview.com/s/611272/this-algorithm-can-tell-which-number-sequences-a-human-will-find-interesting][This algorithm can tell which number sequences a human will find
  interesting]]. #AI #MachineLearning #Math
+ [[https://shemesh.larc.nasa.gov/people/cam/publications/WoLLIC2018-draft.pdf][Formalization of the undecidability of the halting problem for a
  functional language]]. ~ T. M. Ferreira Ramos et al. #ITP #PVS
+ [[https://sketis.net/wp-content/uploads/2018/05/isabelle-jedit-fide2018.pdf][Isabelle/jEdit as IDE for domain-specific formal languages and informal text documents]]. ~ M. Wenzel #ITP #IsabelleHOL
+ [[https://www.sodavision.com/essential-cheat-sheets-for-machine-learning-and-deep-learning-engineers/][Essential cheat sheets for machine learning and deep learning engineers]]. ~
  Vivian Chong #MachineLearning #DeepLearning
+ [[https://mpg.is/papers/gissurarson2018suggesting.pdf][Suggesting valid hole fits for typed-holes]]. ~ Matthías Páll Gissurarson
  #Haskell
+ [[http://sitr.us/2014/05/05/category-theory-proofs-in-idris.html][Category theory proofs in Idris]]. ~ Jesse Hallett #Idris
  #CategoryTheory
+ [[https://www.quora.com/How-does-Idris-compare-to-other-dependently-typed-programming-languages][How does Idris compare to other dependently-typed programming languages?]] 
  ~ Edwin Brady #Idris
+ [[http://bit.ly/2JIFD9w][Las matemáticas del fútbol y el nuevo ministro de cultura]]. ~ Juan
  Arias de Reyna #Matemáticas #Computación
+ [[https://arxiv.org/pdf/1806.03049][Formalization of Lerch's theorem using HOL Light]]. ~ A. Rashid,
  O. Hasan #ITP #HOL_Light #Math
+ [[https://arxiv.org/pdf/1806.03205][Formal small-step verification of a call-by-value lambda calculus
  machine]]. ~ F. Kunze, G. Smolka, Y. Forster #ITP #Coq
+ [[https://blog.jle.im/entry/lenses-products-prisms-sums.html][Lenses embody Products, Prisms embody Sums]]. ~ Justin Le #Haskell  
+ [[https://gupea.ub.gu.se/bitstream/2077/56128/1/gupea_2077_56128_1.pdf][Formalizing constructive quantifier elimination in Agda]]. ~ J. Pope
  #ITP #Agda #Logic
+ [[http://page.mi.fu-berlin.de/cbenzmueller/papers/C71.pdf][A dyadic deontic logic in HOL]]. ~ C. Benzmüller, A. Farjami, X. Parent
  #ITP #IsabelleHOL #Logic
+ [[http://group-mmm.org/~ayamada/DJTY18.pdf][A formalization of the LLL basis reduction algorithm]]. ~ J. Divasón,
  S. Joosten, R. Thiemann, A. Yamada #ITP #IsabelleHOL
+ [[https://www.technologyreview.com/s/611397/machine-learning-predicts-world-cup-winner][Machine learning predicts World Cup winner]]. #MachineLearning
+ [[https://arxiv.org/pdf/1806.03208][Prediction of the FIFA World Cup 2018: A random forest approach with
  an emphasis on estimated team ability parameters]]. ~ A. Groll et
  als. #MachineLearning
+ [[https://sigma.software/about/media/lisp-back-future-tribute-60th-anniversary][LISP: back to the future (a tribute to 60th anniversary)]]. ~ Nikolay
  Mozgovoy #Programming #Lisp
+ [[http://www.cccblog.org/2018/06/13/the-surprising-security-benefits-of-end-to-end-formal-proofs][The surprising security benefits of end-to-end formal proofs]]. ~ Adam
  Chlipala
+ [[https://arxiv.org/pdf/1806.04774][Goal-oriented conjecturing for Isabelle/HOL]]. ~ Y. Nagashima,
  J. Parsert #ITP #IsabelleHOL
+ [[https://www.newton.ac.uk/seminar/20170713100011001][Mining the Archive of Formal Proofs]]. ~ J. Blanchette, M. Haslbeck,
  D. Matichuk, T. Nipkow #ITP #IsabelleHOL
+ [[http://binaire.blog.lemonde.fr/2018/06/12/mettre-lethique-dans-lalgorithme/][Mettre l’éthique dans l’algorithme?]] ~ Catherine Tessier, Vincent
  Bonnemains, Claire Saurel
+ [[http://revue.sesamath.net/spip.php?article1110][Séquences d’algorithmique en mathématique en Python 3, de la seconde à la
  terminale]]. ~ Hubert Raymondaud #Python
+ [[http://irreal.org/blog/?p=7270][A complete computing environment]]. #Emacs
+ [[http://doc.rix.si/cce/cce.html][Emacs as a complete computing environment]]. ~ Ryan Rix #Emacs
+ [[https://plato.stanford.edu/entries/paradox-skolem/][Skolem's paradox]]. ~ Timothy Bays #Logic
+ [[https://people.kth.se/~kurlberg/colloquium/2005/MartinLooef.pdf][100 years of Zermelo’s axiom of choice: what was the problem with it?]]
  ~ Per Martin-Löf #Logic #Math
+ [[https://arxiv.org/pdf/1806.03541][Functional Pearl: Theorem Proving for all (Equational reasoning in Liquid
  Haskell)]]. ~ N. Vazou, J. Breitner, W. Kunkel, D. van Horn, G. Hutton #Hakell
  #LiquidHaskell
+ [[https://www.ps.uni-saarland.de/~kirst/hok/thesis.pdf][Foundations of Mathematics: a discussion of sets and types]]. ~ Dominik
  Kirst #Logic #Math
+ [[https://arxiv.org/pdf/1806.03205][Formal small-step verification of a call-by-value lambda calculus
  machine]]. ~ F. Kunze, G. Smolka, Y. Forster #ITP #Coq
+ [[https://files.sketis.net/Isabelle_Workshop_2018/Isabelle_2018_paper_3.pdf][Substitutionless first-order logic: a formal soundness proof]]. ~
  A.H. From, J.B Larsen, A. Schlichtkrull, J. Villadsen #ITP
  #IsabelleHOL #Logic
+ [[https://hal.inria.fr/hal-01811922/document][Ghosts for lists: from axiomatic to executable specifications]]. ~
  F. Loulergue, A. Blanchard, N. Kosmatov #ITP #Coq
+ [[https://arxiv.org/pdf/1806.03527][Engaging millennials into learning formal methods]]. ~ N. Cataño
  #Teaching #FormalMethods
+ [[https://files.sketis.net/Isabelle_Workshop_2018/Isabelle_2018_paper_8.pdf][PaMpeR: a proof method recommendation system for Isabelle/HOL]]. ~
  Y. Nagashima, Y. He #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Projective_Geometry.html][Projective geometry in Isabelle/HOL]]. ~ Anthony Bordg #ITP #IsabelleHOL
  #Math
+ [[https://markkarpov.com/post/smart-constructors-that-cannot-fail.html][Smart constructors that cannot fail]]. ~ Mark Karpov #Haskell
+ [[https://www.isa-afp.org/entries/Localization_Ring.html][The localization of a commutative ring in Isabelle/HOL]]. ~ Anthony
  Bordg #ITP #IsabelleHOL #Math
+ [[https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-June/msg00072.html][International Olympiad in Isabelle?]] #IsabelleHOL
+ [[https://128.84.21.199/pdf/1806.06114][Formalizing category theory and presheaf models of type theory in Nuprl]]. 
  ~ Mark Bickford #ITP #Nuprl #CategoryTheory
+ [[http://mpickering.github.io/posts/2018-06-11-source-plugins.html][Source Plugins: Four ways to build a typechecked Haskell expression]]. ~
  Matthew Pickering #Haskell
+ [[https://arxiv.org/pdf/1803.07130.pdf][A promise checked is a promise kept: inspection testing]]. ~ Joachim
  Breitner #Haskell
+ [[https://books.goalkicker.com/PythonBook][Python notes for professionals]]. #Python
+ [[https://qz.com/1307091/the-inside-story-of-how-ai-got-good-enough-to-dominate-silicon-valley][The inside story of how AI got good enough to dominate Silicon Valley]]. #AI
+ [[https://www.cs.us.es/~fsancho/?e=204][Diálogos entre Arquitectura, Ciudad y Computación]]. ~ F. Sancho
  #NetLogo
+ [[https://www.jaist.ac.jp/is/labs/ishihara-lab/mla2018/doc/slides/Norbert_Preining.pdf][Hyper natural deduction for Gödel Logic: a natural deduction system
  for parallel reasoning]]. ~ A. Beckmann, N. Preinin #Logic
+ [[https://www.johndcook.com/blog/r_language_for_programmers/][R language for programmers]]. ~ John D. Cook #Rstats
+ [[http://github.com/Web-Prolog/swi-web-prolog/raw/master/book/web-prolog.pdf][Web Prolog and the programmable Prolog Web (An attempt to revive and
  rebrand Prolog)]]. ~ Torbjörn Lager #Prolog
+ [[https://www.andrew.cmu.edu/user/avigad/Papers/formal_epistemology.pdf][Proof theory]]. ~ Jeremy Avigad #Logic
+ [[http://www.cs.nott.ac.uk/~pszgmh/autobench.pdf][AutoBench: Comparing the time performance of Haskell programs]]. ~
  M.A.T. Handley, G. Hutton #Haskell
+ [[http://www.microsiervos.com/archivo/ia/ibm-debater-inteligencia-artificial-debate-humano.html][IBM Debater: la primera inteligencia artificial que gana un debate a
  un ser humano]]. ~ @Alvy #IA
+ [[http://www.microsiervos.com/archivo/ia/introduccion-aprendizaje-automatico-sesgos.html][Una introducción visual al aprendizaje automático y otra a los sesgos
  que pueden sufrir sus algoritmos]]. ~ @Alvy #IA #AprendzajeAutomático
+ [[http://www.r2d3.us/visual-intro-to-machine-learning-part-1][A visual introduction to machine learning]]. ~ Stephanie Yee
 , Tony Chu #AI #MachineLearning
+ [[http://www.r2d3.us/visual-intro-to-machine-learning-part-2][Model tuning and the bias-variance tradeoff]]. ~ Stephanie Yee
 , Tony Chu #AI #MachineLearning
+ [[https://anthonybonato.com/2018/06/20/the-p-vs-np-problem-2/][The P vs NP problem]]. ~ Anthony Bonato #CompSci
+ [[https://www.johndcook.com/blog/2013/06/06/seven-dogmas-of-category-theory/][Seven dogmas of category theory]]. ~ John D. Cook #CategoryTheory
+ [[https://medium.com/@kurtcagle/why-you-dont-need-data-scientists-a9654cc9f0e4][Why you don’t need data scientists]]. ~ Kurt Cagle #DataScience
+ [[http://www.microsiervos.com/archivo/puzzles-y-rubik/algoritmo-inteligente-cubo-rubik.html][Un algoritmo que ha aprendido a resolver el Cubo de Rubik «sin
  asistencia humana»]]. ~ @Alvy #IA #AprendizajeAutomático
+ [[https://arxiv.org/pdf/1805.07470][Solving the Rubik's cube without human knowledge]]. ~ S. McAleer et
  als. #AI #MachineLearning
+ [[https://www.researchgate.net/profile/Ricardo_Pena5/publication/277290326_La_programacion_funcional_en_Haskell/links/5a9545bca6fdccecff07c72e/La-programacion-funcional-en-Haskell.pdf][La programación funcional en Haskell]]. ~ R. Peña #ProgramaciónFuncional
  #Haskell
+ [[https://arxiv.org/pdf/1806.07523][Schematic polymorphism in the Abella proof assistant]]. ~ G. Nadathur,
  Y. Wang #ITP #Abella
+ [[http://simonmar.github.io/posts/2018-06-20-Finding-fixing-space-leaks.html][Fixing 17 space leaks in GHCi, and keeping them fixed]]. ~ Simon Marlow
  #Haskell
+ [[http://konn.github.io/computational-algebra][Computational algebra system in Haskell (Dependently-typed
  computational algebra system written in Haskell)]]. ~ Hiromi Ishii
  #Haskell #CAS
+ [[https://cs.uwaterloo.ca/~plragde/flaneries/FDS/index.html][Functional data structures]]. ~ Prabhakar Ragde #FunctionalProgramming
  #Algorithms #OCaml
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell/files/2128201/Examenes_de_PF_con_Haskell.pdf][Libro de exámenes de programación funcional con Haskell (versión del
  22 de junio de 2018)]]. #Haskell #I1M2017
+ [[https://blog.goodaudience.com/introduction-to-deep-learning-a46e92cb0022][Introduction to deep learning (What is deep learning and how can I study
  it?)]]. ~ Tyler Bettilyon #AI #DeepLearning
+ [[https://medium.com/@TebbaVonMathenstien/deep-neural-networks-as-computational-graphs-867fcaa56c9][Deep neural networks as computational graphs (DNNs don’t need to be a black
  box)]]. ~ Tyler Bettilyon #AI #DeepLearning
+ [[https://diessi.ca/blog/computer-and-human-languages][Computer and human languages]]. ~ Diéssica Gurskas
  #Programming
+ [[https://people.eng.unimelb.edu.au/tobym/papers/secdev2018.pdf][BP: Formal proofs, the fine print and side effects]]. ~ T- Murray,
  P.C. van Oorschot #FormalVerification
+ [[http://simonmar.github.io/posts/2018-06-22-New-SRTs.html][Rethinking static reference tables in GHC]]. ~ Simon Marlow
  #Haskell
+ [[http://ozark.hendrix.edu/~yorgey/pub/GCBP-author-version.pdf][What’s the difference? (A functional pearl on subtracting bijections)]]. 
  ~ B.A. Yorgey, K. Foner #Haskell
+ [[https://eng.uber.com/queryparser][Queryparser, an open source tool for parsing and analyzing SQL]]. ~ Matt
  Halverson #Haskell
+ [[http://webdelprofesor.ula.ve/ingenieria/jacinto/libros/logica-practica-aprendizaje-computacional.pdf][Lógica práctica y aprendizaje computacional]]. ~ Jacinto Dávila
  #Lógica #IA #AprendizajeAutomático
+ [[http://www.doc.ic.ac.uk/%7Erak/papers/newbook.pdf][Computational logic and human thinking: How to be artificially intelligent]]. 
  ~ Robert Kowalski #eBook #IA #Logic
+ [[https://www.isa-afp.org/entries/Pell.html][Pell's equation in Isabelle/HOL]]. ~ Manuel Eberl #ITP #IsabelleHOL #Math
+ [[http://hal.univ-lille3.fr/hal-01814822/document][Making the history of computing. The history of computing in the
  history of technology and the history of mathematics]]. ~ L. de Mol,
  M. Bullynck #History #CompSci #Math
+ [[http://cs.yale.edu/homes/aspnes/classes/202/notes.pdf][Notes on discrete mathematics]]. ~ James Aspnes #eBook #Math
+ [[https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1][Fast Sudoku solver in Haskell #1: a simple solution]]. ~ Abhinav Sarkar
  #Haskell
+ [[https://github.com/norvig/paip-lisp][Paradigms of Artificial Intelligence programming: case studies in Common Lisp]].
  ~ Peter Norvig #AI #CommonLisp
+ [[https://github.com/hasktorch/hasktorch][Hasktorch: a library for tensors and neural networks in Haskell]]. #Haskell #AI
  #MachineLearning
+ [[http://www.cs.rice.edu/~vardi/papers/nsf16.pdf][The automated-reasoning revolution: from theory to practice and back]]. ~
  Moshe Y. Vardi #ATP
+ [[http://cachestocaches.com/2018/6/org-literate-programming/][Literate programming with Org-mode]]. ~ Gregory J Stein
  #Emacs #OrgMode
+ [[https://leanprover.github.io/logic_and_proof/logic_and_proof.pdf][Logic and proof (Release 0]].1). ~ Jeremy Avigad, Robert Y. Lewis, and
  Floris van Doorn #Logic #LeanTheoremProver
+ [[http://reasonablypolymorphic.com/blog/roles/][Coercions and roles for dummies]]. #Haskell
+ [[https://benlynn.blogspot.com/2018/06/why-laziness-matters.html][Why laziness matters]]. ~ Ben Lynn #Haskell 
+ [[https://www.cs.us.es/~jalonso/apuntes/inst-Lean.html][Instalación de "Lean theorem prover"]]. #ITP #LeanProver
+ [[https://github.com/avigad/formal_methods_in_education/blob/gh-pages/index.md][A web page with resources for teaching with formal methods and tools]]. 
  ~ Jeremy Avigad #ITP #Logic #Math
+ [[https://leanprover.github.io/talks/stanford2017.pdf][Formal methods in mathematics and the Lean theorem prover]]. ~ Jeremy
  Avigad #ITP #Logic #Math
+ [[https://arxiv.org/pdf/1806.10920][Machine learning for mathematical software]]. ~ M. England
  #MachineLearning #MathematicalSoftware
+ [[https://arxiv.org/pdf/1611.04838v4][Fast verifying proofs of propositional unsatisfiability via window
  shifting]]. ~ Jingchao Chen #SAT
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell/releases/download/v9.7/Examenes_de_PF_con_Haskell.pdf][Libro de exámenes de programación funcional con Haskell]] (versión 9.7
  del 30 de junio de 2018). #Haskell #I1M2017
+ [[http://irreal.org/blog/?p=7308][The Emacs Commune]]. #Emacs #History
+ [[http://forallx.openlogicproject.org/][forall x: Calgary Remix (An introduction to formal logic)]]. ~
  P.D. Magnus, T. Button, J. Robert Loftis, Aaron Thomas-Bolduc, R. Zach
  #eBook #Logic
+ [[https://github.com/sinahab/shamir-secret-sharing][The Shamir secret sharing algorithm in Haskell]]. ~ Sina Habibian
  #Haskell
+ [[http://very.science/pdf/StrictCheck_arxiv.pdf][Keep your laziness in check]]. ~ K. Foner et als. #Haskell

* Julio 2018

+ [[http://philsci-archive.pitt.edu/14825/1/comprm-2018-06-28.pdf][Computational reverse mathematics and foundational analysis]]. ~
  Benedict Eastaugh #Logic #Math
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-octubre-de-2017][GLC: Resumen de lecturas compartidas (octubre de 2017)]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-noviembre-de-201][GLC: Resumen de lecturas compartidas (noviembre de 2017)]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-diciembre-de-2017][GLC: Resumen de lecturas compartidas (diciembre de 2017)]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-enero-de-2018][GLC: Resumen de lecturas compartidas (enero de 2018)]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-febrero-de-2018][GLC: Resumen de lecturas compartidas (febrero de 2018)]]. 
+ [[https://www.ideals.illinois.edu/bitstream/handle/2142/100116/K-semantics-tech-report.pdf][IsaK: A complete semantics of K]]. ~ L. Li, E.L. Gunter #ITP
  #IsabelleHOL #Logic
+ [[https://arthurxavierx.github.io/RealWorldAppComonadicUI.pdf][A real-world application with a comonadic user interface]]. ~ Arthur
  Xavier #FunctionalProgramming #Haskell #PureScript
+ [[https://whatthefunctional.wordpress.com/2018/07/01/google-sheets-and-haskell][Google Sheets and Haskell]]. ~ Laurence Emms #Haskell
+ [[http://irreal.org/blog/?p=7312][Zamansky 50: Presentations]]. #Emacs
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-marzo-de-2018][GLC: Resumen de lecturas compartidas durante marzo de 2018]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-abril-de-2018][GLC: Resumen de lecturas compartidas durante abril de 2018]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-mayo-de-2018][GLC: Resumen de lecturas compartidas durante mayo de 2018]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-junio-de-2018][GLC: Resumen de lecturas compartidas durante junio de 2018]]. 
+ [[http://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-el-curso-2017-18][GLC: Resumen de lecturas compartidas durante el curso 2017-18]]. 
+ [[https://dspace.library.uu.nl/bitstream/handle/1874/364837/3705269.pdf][Compiling an Haskell EDSL to C (A new C back-end for the Copilot
  runtime verification framework)]]. ~ Frank Dedden Haskell
+ [[https://dspace.library.uu.nl/bitstream/handle/1874/364838/thesis.pdf][Implementing analytic tableaux for justification logic]]. ~
  N. Steenbergen #Haskell #Logic
+ [[https://github.com/slakkenhuis/judge][judge: Tableau-based theorem prover for justification logic]]. ~
  N. Steenbergen #Haskell #Logic
+ [[https://identicalsnowflake.github.io/Rank2Modeling.html][Redis data modeling with rank 2 types]]. #Haskell
+ [[https://culturacientifica.com/2015/07/01/el-problema-del-cambio-de-moneda][El problema del cambio de moneda]]. R. Ibáñez #Matemáticas
+ [[https://medium.com/@Francesco_AI/a-brief-history-of-ai-baf0f362f5d6][A brief history of AI (An outline of what happened in the last 60
  years in AI)]]. ~ Francesco Corea #AI
+ [[https://arxiv.org/pdf/1608.02621v2][The machine that builds itself: how the strengths of Lisp family languages
  facilitate building complex and flexible bioinformatic models]]. ~
  B.B. Khomtchouk, E. Weitz, C. Wahlestedt #Lisp
+ [[http://philsci-archive.pitt.edu/14825/1/comprm-2018-06-28.pdf][Computational reverse mathematics and foundational analysis]]. ~
  B. Eastaugh #Logic #Math
+ [[https://www.politesi.polimi.it/bitstream/10589/140161/1/Tesi.pdf][Toward a more expressive pattern matching in Haskell]]. ~ G. Servadei #Haskell 
+ [[http://www.inf.u-szeged.hu/~cscs/pdf/cscs2018.pdf][The 11th conference of PhD students in Computer Science (Volume of short papers)]]. 
+ [[https://www.preprints.org/manuscript/201806.0474/download/final_file][Scope of Artificial Intelligence in Law]]. ~ J. Dabass, B.S. Dabass #AI
  #MachineLearning #DeepLearning
+ [[http://www.csl.sri.com/users/rushby/papers/modalpvs.pdf][PVS embeddings of propositional and quantified modal logic]]. ~
  J. Rushby #ITP #PVS #Logic
+ [[https://francis.naukas.com/2012/02/19/para-que-le-sirve-a-un-investigador-cientifico-estar-en-twitter][Para qué le sirve a un investigador científico estar en Twitter]]. ~
  Francisco R. Villatoro (#Ciencia
+ [[https://arxiv.org/pdf/1202.2461][How the scientific community reacts to newly submitted preprints:
  article downloads, Twitter mentions, and citations]]. ~ X. Shuai,
  A. Pepe, J. Bollen #Science
+ [[https://medium.com/@mikhail.barash.mikbar/papers-on-programming-languages-ideas-from-70s-for-today-2931891d4dbd][Papers on programming languages: ideas from 70's for today]]. ~ Mikhail
  Barash #Programming
+ [[http://tweetsverse.blogspot.com/2018/07/why-i-love-haskell.html][Why I love Haskell]]. ~ @PLT_cheater #Haskell
+ [[http://mat.unb.br/~ayala/tcs_20171215i.pdf][A formalisation of nominal α-equivalence with A, C, and AC function
  symbols]]. ~ M. Ayala et als. #ITP #Coq
+ [[https://arxiv.org/pdf/1807.01456][A purely functional computer algebra system embedded in Haskell]]. ~
  Hiromi Ishii #Haskell #CAS #Math
+ [[https://konn.github.io/computational-algebra/][Computational algebra system in Haskell (Dependently-typed
  computational algebra system written in Haskell)]]. ~ Hiromi Ishii
  #Haskell #CAS #Math
+ [[https://github.com/konn/fibs][Benchmarks on various Fibonacci computation]]. ~ Hiromi Ishii #Haskell
  #Algorithms #Math
+ [[https://github.com/konn/lk-proof-assistant][Simple proof assistant for LK calculus (First-Order logic)]]. ~ Hiromi
  Ishii #Haskell #Logic
+ [[https://doisinkidney.com/posts/2018-06-30-probability-5-ways.html][Probability 5 ways]]. ~ Donnacha Oisín Kidney #Haskell
+ [[https://arxiv.org/pdf/1807.01871][Formalization in constructive type theory of the standardization
  theorem for the lambda calculus using multiple substitution]]. ~
  M. Copes, N. Szasz, A. Tasistro #ITP #Agda
+ [[http://bit.ly/2u2EqRh][Matemática misteriosa]]. ~ Juan Arias de Reyna #Matemáticas
+ [[https://arxiv.org/pdf/1807.01873][Sharing a library between proof assistants: reaching out to the HOL
  family]]. ~ F. Thiré #ITP #OpenTheory # Coq #Matita
+ [[https://ifipwg21wiki.cs.kuleuven.be/pub/IFIP21/Brandenburg/Talk-Moa.pdf][Theory exploration in Hipster (or how to automate an undergraduate
  AI&CS student)]]. ~ Moa Johansson #IsabelleHOL #Haskell
+ [[https://ifipwg21wiki.cs.kuleuven.be/pub/IFIP21/Brandenburg/wouter-slides.pdf][From algebra to abstract machine]]. ~ W. Swierstra, C. Tomé Cortiñas
  #Haskell
+ [[https://ifipwg21wiki.cs.kuleuven.be/pub/IFIP21/Brandenburg/slides_botta.pdf][Specifications in small and large contexts]]. ~ N. Botta [Slides] #Idris
+ [[https://ifipwg21wiki.cs.kuleuven.be/pub/IFIP21/Brandenburg/ifip_kuifje.pdf][Kuifje: Quantified information flow with monads in Haskell]]. ~ Tom
  Schrijvers #Haskell
+ [[http://reasonablypolymorphic.com/blog/prospecting-free-monads/][Static analysis of free monads]]. #Haskell
+ [[http://www.di.uminho.pt/~jno/ps/wg21-77a-sl.pdf][Compiling quantamorphisms for the IBM Q-Experience]]. ~ J.N. Oliveira,
  A. Neri, R.S. Barbosa #Haskell
+ [[http://www.cse.chalmers.se/~patrikj/talks/WG2.1_Brandenburg_Jansson_slides.pdf][Examples and results from a BSc-level course on domain specific languages of mathematics]]. ~ P. Jansson et als. #Haskell
  #Math
+ [[https://arxiv.org/pdf/1806.04002][Michael John Caldwell Gordon (FRS 1994), 28 February 1948 - 22 August 2017]]. 
  ~ Lawrence C Paulson #ITP #Biography
+ [[https://slideslive.com/38908214/differentiable-functional-programming][Differentiable functional programming]]. ~ Noel Welsh #DeepLearning
  #FunctionalProgramming #Scala
+ [[https://whatthefunctional.wordpress.com/2018/07/08/a-thought-experiment-category-theory-and-quantum-computing/][A thought experiment: category theory and quantum computing]]. ~
  Laurence Emms #Haskell #CategoryTheory
  #QuantumComputing
+ [[http://www.lavanguardia.com/vida/20180708/45762804454/alan-turing-genio-descodifico-naturaleza.html][Alan Turing, el genio que descodificó la naturaleza]]. ~ Núria Jar
  #Turing #Biografía #Computación
+ [[http://neilmitchell.blogspot.com/2018/07/inside-paper-build-systems-la-carte.html][Inside the paper: Build systems à la carte]]. ~ Neil Mitchell #Haskell 
+ [[http://blog.poisson.chat/posts/2018-07-08-deriving-twist.html][Deriving instances with a twist]]. ~ Xia Li-yao #Haskell
+ [[http://flaviomoura.mat.br/files/articles/MSNorm.pdf][A constructive formalisation of the modular strong normalisation theorem]]. 
  ~ FLC de Moura et als. #ITP #Coq
+ [[https://hal.inria.fr/hal-01823507/document][Using SMT engine to generate symbolic automata]]. ~ X. Qin et als. #SMT
+ [[https://devel.isa-afp.org/entries/Neumann_Morgenstern_Utility.html][Von-Neumann-Morgenstern utility theorem in Isabelle/HOL]]. ~ J. Parsert,
  C. Kaliszyk #ITP #IsabelleHOL
+ [[https://www.johndcook.com/blog/2018/07/08/weak-groups/][Weakening the requirements of a group]]. ~ J.D. Cook #Math
+ [[https://arxiv.org/pdf/1807.02192][A survey of knowledge representation and retrieval for learning in
  service robotics]]. ~ D. Paulius, Y. Sun #KRR
+ [[https://arxiv.org/pdf/1807.02957][Scaling-up reasoning and advanced analytics on BigData]]. ~ T. Condie et
  als. #LogicProgramming #BigData
+ [[http://blog.poisson.chat/posts/2018-07-09-type-gadt.html][Type is an extensible GADT]]. ~ Xia Li-yao #Haskell
+ [[https://www.abc.es/ciencia/abci-otro-millon-dolares-espera-201807100208_noticia.html][Otro millón de dólares te espera: ¿Es P = NP?]]  ~ Alfonso J. Población
  #Matemáticas #Computación
+ [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-94821-8_2.pdf][Towards certified meta-programming with typed template-Coq]]. ~ A. Anand
  et als. #ITP #Coq
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?MSFP2018.3.pdf][Relating idioms, arrows and monads from monoidal adjunctions]]. ~
  E. Rivas #Haskell
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?MSFP2018.5.pdf][Backward induction for repeated games]]. ~ J. Hedges #FunctionalProgramming
  #Haskell
+ [[http://eptcs.web.cse.unsw.edu.au/paper.cgi?MSFP2018.6.pdf][Everybody’s got to be somewhere]]. ~ C. McBride #Agda
+ [[https://dev.to/aspittel/daily-coding-puzzles-4ce9][Daily coding puzzles]]. ~ Ali Spittel #CodingPuzzle
+ [[https://colmbaston.co.uk/files/Common-Knowledge.pdf][The coinductive formulation of common knowledge]]. ~ C. Baston,
  V. Capretta #ITP #Coq #Agda
+ [[http://www.ortegaygasset.edu/admin/descargas/Rev_OccidenteJulio-Agosto2018_J_L_Suarez.pdf][La nacionalización de la estrategia en torno a la inteligencia artificial]]. 
  (Estado, política y futuro). ~ Juan Luis Suárez #IA
+ [[https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/][Fast Sudoku solver in Haskell #2: A 200x faster solution]]. ~ Abhinav
  Sarkar #Haskell
+ [[https://www.tweag.io/posts/2018-07-10-funflow-make.html][Funflow example: emulating make]]. ~ Divesh Otwani, Nicholas Clarke
  #Haskell
+ [[https://link.springer.com/content/pdf/10.1186%2Fs40537-018-0132-9.pdf][Categories for (Big) Data models and optimization]]. ~ L. Thiry,
  H. Zhao, M. Hassenforder #BigData #CategoryTheory
  #FunctionalProgramming #Haskell
+ [[https://www21.in.tum.de/~eberlm/random_trees.pdf][Verified analysis of random binary tree structures]]. ~ M. Eberl,
  M.W. Haslbeck, T. Nipkow #ITP #IsabelleHOL
+ [[https://carrv.github.io/2018/papers/CARRV_2018_paper_5.pdf][A formally verified cryptographic extension to a RISC-V processor]]. ~
  J.R. Kiniry et als. #FormalVerification
+ [[https://plato.stanford.edu/entries/artificial-intelligence/][Artificial Intelligence]]. ~ Selmer Bringsjord #AI
+ [[https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-draft.pdf][Reification by parametricity (Fast setup for proof by reflection, in
  two lines of Ltac)]]. ~ J. Gross, A. Erbsen, A. Chlipala #ITP #Coq
+ [[https://icfp18.sigplan.org/event/icfp-2018-papers-mtac2-typed-tactics-for-backward-reasoning-in-coq][Mtac2: Typed tactics for backward reasoning in Coq]]. ~ J. Kaiser et
  als. #ITP #Coq
+ [[https://www21.in.tum.de/~traytel/papers/frp/frp.pdf][A verified automatic prover based on ordered resolution]]. ~
  A. Schlichtkrull, J.C .Blanchette, D. Traytel #ITP #IsabelleHOL #SML
  #Logic
+ [[https://hal.inria.fr/hal-01639819/document][A formal proof in Coq of a control function for the inverted pendulum]]. 
  ~ D. Rouhling #ITP #Coq
+ [[https://cakeml.org/itp18.pdf][Verifying the LTL to Büchi automata translation via very weak
  alternating automata]]. ~ S. Jantsch, M. Norrish #ITP #HOL4
+ [[https://shemesh.larc.nasa.gov/fm/PRECiSA/eliminating-unstable-tests-draft.pdf][Eliminating unstable tests in floating-point programs]]. ~ L. Titolo,
  C. Muñoz, M.A. Feliú, M.M. Moscato #ITP #PVS
+ [[http://ksiresearchorg.ipage.com/seke/seke18paper/seke18paper_24.pdf][Reo2PVS: Formal specification and verification of component connectors]]. 
  ~ M.S. Nawaz, M. Sun #ITP #PVS
+ [[https://www.irif.fr/~thib/thesis.pdf][Differential program semantics]]. ~ T. Girka #ITP #Coq
+ [[https://markkarpov.com/post/lisp-and-haskell.html][Lisp and Haskell]]. ~ Mark Karpov #Lisp #Haskell
+ [[https://archive.alvb.in/msc/thesis/reading/typesafe-observable-sharing.pdf][Type-safe observable sharing in Haskell]]. ~ Andy Gill #Haskell
+ [[https://cacm.acm.org/blogs/blog-cacm/229543-algorithms-have-been-around-for-4000-years/fulltext][Algorithms have been around for 4,000 years]]. ~ Herbert Bruderer
  #Algorithms
+ [[http://www.andreas-lochbihler.de/pub/lochbihler2018itp.pdf][Fast machine words in Isabelle/HOL]]. ~ A. Lochbihler #ITP #IsabelleHOL
+ [[https://www.student.informatik.tu-darmstadt.de/~xx00seba/publications/arrow-abstract-interp.pdf][Compositional soundness proofs of abstract interpreters]]. ~ S. Keidel,
  C.B. Poulsen, S. Erdweg #Haskell
+ [[https://www.ethz.ch/content/dam/ethz/special-interest/infk/inst-infsec/information-security-group-dam/research/publications/pub2018/LochbihlerSchneider2018.pdf][Relational parametricity and quotient preservation for modular
  (co)datatypes]]. ~ A. Lochbihler, J. Schneider #ITP #IsabelleHOL
+ [[https://arxiv.org/pdf/1807.05174][First steps towards a formalization of Forcing]]. ~ E. Gunther,
  M. Pagano, P. Sánchez #ITP #Isabelle #Logic
+ [[https://arxiv.org/pdf/1807.05054][AI reasoning systems: PAC and applied methods]]. ~ J. Cheng #AI #Logic
+ [[https://speakerdeck.com/frasertweedale/taming-the-c-monster-haskell-ffi-techniques][Taming the C monster (Haskell FFI techniques)]].  #Haskell
+ [[https://www21.in.tum.de/~haslbema/documents/provingcontests_draft18.pdf][Competitive proving for fun]]. ~ M.P.L Haslbeck, S. Wimmer #ITP #IsabelleHOL
+ [[https://books.google.es/books?id=QNNjDwAAQBAJ&printsec=frontcover&hl=es#v=onepage&q&f=false ][Computational artifacts: Towards a philosophy of computer science]]. ~
  R. Turner #CompSci
+ [[http://cl-informatik.uibk.ac.at/users/griff/publications/Messner-Parsert-Schoepf-Sternagel-ITP18.pdf][A formally verified solver for homogeneous linear diophantine equations]]. ~
  F. Meßner et als. #ITP #IsabelleHOL
+ [[https://doisinkidney.com/posts/2018-07-17-probability-presentation.html][Probabilistic functional programming]]. ~ Donnacha Oisín Kidney   #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1807.05641][The consistency of arithmetic]]. ~ T.Y. Chow #Logic
+ [[https://arxiv.org/pdf/1807.05377][SAT encodings for sorting networks, single-exception sorting networks
  and ε−halvers]]. ~ J.A.R. Fonollosa #Logic #SAT
+ [[https://github.com/jrclogic/SMCDEL/raw/master/SMCDEL.pdf][SMCDEL: An implementation of symbolic model checking for dynamic epistemic
  logic with binary decision diagrams]]. ~ M. Gattinger #Logic #Haskell
+ [[https://plato.stanford.edu/entries/type-theory/][Type theory]]. ~ Thierry Coquand #Logic
+ [[https://hal.inria.fr/hal-01703524/document][Formalizing implicative algebras in Coq]]. ~ É. Miquey #ITP #Coq 
+ [[http://irreal.org/blog/?p=7346][Building an initial Emacs configuration]]. #Emacs
+ [[https://arxiv.org/pdf/1805.06798][Generic deriving of generic traversals]]. ~ C. Kiss, M. Pickering, N. Wu
  #FunctionalProgramming #Haskell
+ [[https://medium.com/@cdsmithus/codeworld-update-july-14-2018-9fa5a2c27102][CodeWorld update — July 14, 2018]]. ~ Chris Smith #Haskell #CodeWorld
+ [[https://medium.com/@cdsmithus/teaching-algebraic-expressions-with-tracking-arithmetic-fba090ea7fff][Teaching algebraic expressions with tracking arithmetic]]. ~ Chris Smith
  #Teaching #Math #Haskell #CodeWorld
+ [[https://anthonybonato.com/2018/07/18/mathematics-and-computation-2/][Mathematics and computation]]. ~ A. Bonato #Math
  #CompSci
+ [[https://www.genbeta.com/desarrollo/test-automaticos-con-quickcheck-como-analizar-nuestro-codigo-en-busca-de-bugs][Test automáticos con QuickCheck ¿Cómo analizar nuestro código en busca de
  bugs?]]. ~ @__josejuan__ #Programación #QuickCheck
+ [[https://medium.com/axiomzenteam/functor-applicative-and-why-8a08f1048d3d][Functor, Applicative and why]]. ~ Leo Zhang #FunctionalProgramming 
  #Haskell
+ [[https://nickhigham.wordpress.com/2015/10/20/the-rise-of-mixed-precision-arithmetic/][The rise of mixed precision arithmetic]]. ~ Nick Higham #Programming
+ [[https://www.simonsfoundation.org/2018/07/18/ar2017-scott-aaronson/][The limits of classical and quantum computing]]. ~ Scott Aaronson
  #CompSci
+ [[https://plus.maths.org/content/intuitionism][Intuitive mathematics]]. ~ Marianne Freiberger #Logic #Math
+ [[https://plus.maths.org/content/paradise][Paradise lost and rescued]]. ~ Marianne Freiberger #Logic #Math
+ [[https://anthonybonato.com/2018/07/18/mathematics-and-computation-2/][Mathematics and computation]]. ~ Anthony Bonato #Math #CompSci
+ [[https://shemesh.larc.nasa.gov/people/cam/publications/ITP2018-draft.pdf][Boosting the reuse of formal specifications]]. ~ M.M. Moscato et
  als. #ITP #PVS
+ [[http://www.cs.nott.ac.uk/~pszgmh/mind-the-gap.pdf][Closing the gap between correctness and efficiency]]. ~ G. Hutton
  #FunctionalProgramming #Haskell
+ [[http://ksiresearchorg.ipage.com/seke/seke18paper/seke18paper_23.pdf][Towards formal modeling and verification of probabilistic connectors
  in Coq]]. ~ X. Zhang, M. Sun #ITP #Coq
+ [[https://www.isa-afp.org/entries/DiscretePricing.html][Pricing in discrete financial models]]. ~ M. Echenim #ITP #IsabelleHOL
+ [[http://www.unirioja.es/cu/jodivaso/publications/2018/EACA_2018.pdf][Towards a verified Smith normal form algorithm in Isabelle/HOL]]. ~
  J. Divasón, J. Aransay #ITP #IsabelleHOL #Math
+ [[https://vanemden.wordpress.com/2018/07/21/dijkstra-and-logic/][A bridge too far: E.W. Dijkstra and logic]]. ~ Maarten van Emden #Logic
  #CompSci
+ [[https://chrispenner.ca/posts/intro-to-finger-trees][A practical introduction to finger trees]]. ~ Chris Penner
  #Haskell
+ [[http://ksiresearchorg.ipage.com/seke/seke18paper/seke18paper_4.pdf][A systematic approach for developing cyber physical systems]]. ~ X. He,
  Z. Dong, Y. Fu #ITP #Coq
+ [[https://litx.io/blog-instance-map.html][Dependent typing and existential (de)serialization]]. #Haskell
+ [[https://www.joachim-breitner.de/blog/742-WebGL%2C_Fragment_Shader%2C_GHCJS_and_reflex-dom][WebGL, Fragment Shader, GHCJS and reflex-dom]]. ~ Joachim Breitner
  #Haskell
+ [[https://gist.github.com/atondwal/ee869b951b5cf9b6653f7deda0b7dbd8][Popularity of Haskell extensions]]. ~ Anish Tondwalkar #Haskell
+ [[https://openlibra.com/es/book/mathematical-reasoning-writing-and-proof][Mathematical reasoning. Writing and proof]]. ~ Ted Sundstrom #eBook #Math
+ [[https://www.wlkl.ch/literature/docs/KlKr14.pdf][Supercompilation: ideas and methods]]. ~ I. Klyuchnikov, D. Krustev #Haskell
+ [[http://www.ittc.ku.edu/research/thesis/documents/justin_dawson_thesis.pdf][The remote monad]]. ~ Justin Dawson #PhD_Thesis #Haskell 
+ [[http://ceur-ws.org/Vol-2095/paper2.pdf][A simple semi-automated proof assistant for first-order modal logics]]. 
  ~ T. Libal #Logic #ATP #Prolog
+ [[http://ceur-ws.org/Vol-2095/invited1.pdf][Implementations of natural logics]]. ~ Lawrence S. Moss #Logic
  #AutomatedReasoning
+ [[http://ceur-ws.org/Vol-2095/invited2.pdf][Some thoughts about FOL-translations in Vampire]]. ~ Giles Reger
  #AutomatedReasoning #Vampir
+ [[https://www.brucker.ch/bibliography/download/2018/brucker.ea-isabelle-ontologies-2018.pdf][Using the Isabelle Ontology Framework]] (Linking the formal with the informal). ~ A.D. Brucker et als. #ITP
  #Isabelle
+ [[http://www0.cs.ucl.ac.uk/staff/b.cook/CAV18_invited.pdf][Formal reasoning about the security of AWS (Amazon Web Services)]]. ~
  Byron Cook #AutomatedReasoning
+ [[http://www.cse.chalmers.se/~slrn/papers/into_infinite.pdf][Into the infinite-theory exploration for coinduction]]. ~
  S.H. Einarsdóttir, M. Johansson, J.Å. Pohjola #IsabelleHOL
+ [[http://www.cs.cmu.edu/~aldrich/papers/interdisciplinary-pl-design.pdf][Interdisciplinary programming language design]]. ~ Michael Coblenz et
  als. #Programming
+ [[https://arxiv.org/pdf/1807.08711][Constructive Galois connections]]. ~ D. Darais, D. van Horn #ITP #Agda
  #Math
+ [[https://arxiv.org/pdf/1807.08058][Learning heuristics for automated reasoning through deep reinforcement
  learning]]. ~ G. Lederman et als. #MachineLearnig #AutomatedReasoning
+ [[https://arxiv.org/pdf/1807.08204][Towards neural theorem proving at scale]]. ~ P. Minervini et
  als. #AutomatedReasoning #MachineLearning
+ [[http://www.pl-enthusiast.net/2018/07/24/teaching-programming-languages][Teaching programming languages]]. ~ Michael Hicks   #Programming #Teaching
+ [[http://mathesaurus.sourceforge.net/matlab-python-xref.pdf][Reference comparing R, Python, and MATLAB syntax]]. #Python #Rstats #MatLAB 
+ [[https://itsfoss.com/apt-get-linux-guide/][Using apt-get commands in Linux (complete beginners guide)]]. ~
  A. Prakash #Linux
+ [[https://hal.inria.fr/hal-01828344/file/main.pdf][CoqTL: an internal DSL for model transformation in Coq]]. ~ M. Tisi,
  Z. Cheng #ITP #Coq
+ [[https://hal.archives-ouvertes.fr/hal-01832031/file/RLR-Coq.pdf][Regular language representations in the constructive type theory of
  Coq]]. ~ C. Doczkal, G. Smolka #ITP #Coq
+ [[https://xenaproject.wordpress.com/2018/07/25/quadratic-reciprocity-and-p2-1-8/][Quadratic reciprocity and (p^2-1)/8]]. ~ The Xena Project #ITP #Lean #Math
+ [[https://arxiv.org/pdf/1807.08588][Automating verification of state machines with reactive designs and
  Isabelle/UTP]]. ~ S. Foster et als. #ITP #IsabelleHOL
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Demostraci%C3%B3n_Asistida_por_Ordenador_con_Coq][DAOconCoq: Demostración Asistida por Ordenador con Coq]]. #DAO #Coq
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Tema_1:_Programaci%C3%B3n_funcional_y_m%C3%A9todos_elementales_de_demostraci%C3%B3n_en_Coq][DAOconCoq: Programación funcional y métodos elementales de demostración en
  Coq]]. #DAO #Coq
+ [[https://medium.com/@cdsmithus/patience-in-k-8-computer-science-5bc2eb9dc562][Patience in K-8 Computer Science]]. ~ Chris Smith #Teaching #Programming
  #CodeWorld
+ [[https://www.springerprofessional.de/formally-verified-montgomery-multiplication/15968616][Formally verified Montgomery multiplication]]. ~ C. Walther #ITP
  #VeriFun #Math
+ [[https://idus.us.es/xmlui/handle/11441/77572][Teoría de categorías y programación funcional]]. ~ Diego Pedraza
  #Haskell #Matemáticas
+ [[https://www.forbes.com/sites/quora/2018/07/27/why-purely-functional-programming-is-a-great-idea-with-a-misleading-name][Why purely functional programming is a great idea with a misleading name]]. ~
  Tikhon Jelvis #FunctionalProgramming
+ [[https://arxiv.org/pdf/1807.09873][Formalizing the Cox-Ross-Rubinstein pricing of European derivatives in
  Isabelle/HOL]]. ~ M. Echenim, H. Guiol, N. Peltier #ITP #IsabelleHOL
+ [[http://www.cs.swan.ac.uk/~csetzer/articles/PPDP18/PPDP18adelsbergerSetzerWalkingshawAccepted.pdf][Declarative GUIs: simple, consistent, and verified]]. ~ S. Adelsberger,
  A. Setzer, E. Walkingshaw #Agda
+ [[http://andreipopescu.uk/pdf/bindings.pdf][Bindings are functors]]. ~ J.C. Blanchette, L. Gheri, A. Popescu,
  D. Traytel #ITP #IsabelleHOL
+ [[https://medium.com/@cdsmithus/novices-and-motivation-when-learning-to-code-19a35a5ff851][Novices and motivation when learning to code]]. ~ Chris Smith
  #Teaching #CodeWorld
+ [[https://terrytao.wordpress.com/2018/07/28/gamifying-propositional-logic-qed-an-interactive-textbook][Gamifying propositional logic: QED, an interactive textbook]]. ~ Terence
  Tao #Teaching #Logic
+ [[http://www.math.ucla.edu/~tao/QED/QED.html][QED: a short interactive text in propositional logic arranged in the
  format of a computer game]]. ~ Terence Tao #Teaching #Logic
+ [[https://www.lirmm.fr/~retore/PRESENTATIONS/UMjeudisRetoreLogique.pdf][Une histoire de la logique mathématique (de la philosophie à
  l’informatique)]]. ~ Christian Retoré #Logic
+ [[https://www.cs.cornell.edu/courses/cs3110/2017fa/][Course: Data structures and functional programming]]. ~ Michael Clarkson
  #FunctionalProgramming #OCaml #ITP #Coq
+ [[https://raywang.tech/2017/09/25/formal-reasoning-in-coq/][Formal reasoning in Coq: a beginner's guide]]. ~ Ray Wang #ITP #Coq
+ [[https://github.com/readablesystems/cs260r-17/blob/master/naivecoq.md][Coq cheatsheet]]. ~ Eddie Kohler #ITP #Coq
+ [[https://www.i-programmer.info/news/216-python/11996-python-the-future-of-programming.html][Python the future of programming?]] ~ Mike James #Programming #Python
+ [[http://www.mgsloan.com/posts/ghcinception/][GHCinception: Running GHCi in GHCi]]. ~ Michael Sloan #Haskell
+ [[http://cadenaser.com/ser/2018/07/27/internacional/1532719014_366615.html][Un error informático envía información confidencial a 1.500 criminales]]. #Programación
+ [[https://en.wikipedia.org/wiki/List_of_software_bugs][List of software bugs]]. ~ Wikipedia #Programming
+ [[https://github.com/cpitclaudel/company-coq][Company-coq: A collection of extensions for Proof General's Coq mode]]. 
  #Emacs #Coq
+ [[https://arxiv.org/pdf/1807.07892][Bridging the gap between programming languages and hardware weak memory
  models]]. ~ A. Podkopaev, O. Lahav, V. Vafeiadis #ITP #Coq
+ [[https://ac1235.github.io/haskell.pdf][Haskell for JavaScript developers]]. ~ Anthony N Cipriano #Haskell
  #JavaScript
+ [[https://vaibhavsagar.com/blog/2018/07/29/hamts-from-scratch/][HAMTs (Hash Array Mapped Tries) from scratch]]. ~ Vaibhav Sagar #Haskell
+ [[https://plus.maths.org/content/constructivists-expert][Constructivism: An expert's view]]. ~ Harvey Friedman #Logic #Math
+ [[http://www.enseignement.polytechnique.fr/informatique/INF551/][Computational logic: artificial intelligence in mathematical reasoning]]. ~
  S. Graham-Lengrand and R. Blanco #Course #Logic #FunctionalProgramming #OCaml
  #ITP #Coq
+ [[http://www-sop.inria.fr/members/Yves.Bertot/courses/coq-master1-1.pdf][Verifying programs and proofs (Part I. describe algorithms)]]. ~ Yves
  Bertot #ITP #Coq
+ [[https://team.inria.fr/marelle/en/coq-winter-school-2018/][Coq Winter School 2018]]. ~ Yves Bertot #Course #ITP #Coq
+ [[https://medium.freecodecamp.org/the-art-of-computer-programming-by-donald-knuth-82e275c8764f]["The art of computer programming" by Donald Knuth]]. ~ Carl Tashian
  #Programming 
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Tema_2:_Demostraciones_por_inducci%C3%B3n_sobre_los_n%C3%BAmeros_naturales_en_Coq][DAOconCoq T2: Demostraciones por inducción sobre los números naturales
  en Coq]]. #ITP #Coq
+ [[http://cl-informatik.uibk.ac.at/users/swinkler/research/papers/ZWM14.pdf][Beyond polynomials and Peano arithmetic: automation of elementary and
  ordinal interpretations]]. ~ H. Zankl, S. Winkler, A. Middeldorp #Logic
  #Math #ATP
+ [[http://danghica.blogspot.com/2018/03/copying-vs-sharing-in-functional.html][Copying vs. sharing in functional languages]]. ~ Dan Ghica   #FunctionalProgramming
+ [[https://doisinkidney.com/posts/2018-07-30-verified-avl.html][Verified AVL trees in Haskell and Agda]]. ~ Donnacha Oisín Kidney
  #Haskell #Agda
+ [[http://danghica.blogspot.com/2018/07/haskell-if-monads-are-solution-what-is.html][Haskell: If monads are the solution, what is the problem?]] ~ Dan Ghica
  #FunctionalProgramming #Haskell
+ [[https://bartoszmilewski.com/2018/07/30/free-monoid-from-free-algebra-part-1][Free Monoid from Free Algebra, Part 1: Free Algebras]]. ~ Bartosz
  Milewski #Haskell #CategoryTheory
+ [[https://bartoszmilewski.com/2018/07/30/free-monoid-from-free-algebra-part-1][Free Monoid from Free Algebra, Part 2: Free Monoids]]. ~ Bartosz
  Milewski #Haskell #CategoryTheory
+ [[https://grain-lang.org][Grain: a strongly-typed functional programming language built for the
  modern web]]. #FunctionalProgramming
+ [[https://korban.net/posts/elm/2018-07-31-learning-elm-2018-comprehensive-list-resources][Learning Elm in 2018: comprehensive list of resources]]. #FunctionalProgramming 
  #Elm

* Agosto 2018

+ [[https://www.sciencedirect.com/science/article/pii/S0747717118300361][Formalization of the arithmetization of Euclidean plane geometry and
  applications]]. ~ P. Boutry, G. Braun, J. Narboux #ITP #Coq #Math
+ [[https://arxiv.org/pdf/1807.11576][Formal probabilistic analysis of dynamic fault trees in HOL4]]. ~ 
  Y. Elderhalli, W. Ahmad, O. Hasan, S. Tahar #ITP #HOL4
+ [[http://compcogscisydney.org/learning-statistics-with-r/][Learning statistics with R (A tutorial for psychology students and other
  beginners)]]. ~ Danielle Navarro #Statistics #Rstats
+ [[http://blog.jpolak.org/?p=2000][Art vs. science in mathematical discovery]]. ~ J. Polak #Math
+ [[https://deliquus.com/posts/2018-07-30-imperative-programming-in-haskell.html][Making Haskell as fast as C: Imperative programming in Haskell]]. ~
  Henri Verroken #Haskell
+ [[https://hackernoon.com/learn-functional-python-in-10-minutes-to-2d1651dece6f][Learn functional Python in 10 minutes]]. ~ Brandon Skerritt
  #FunctionalProgramming #Python
+ [[https://github.com/tbanel/orgaggregate][Aggregates tables in Org mode]]. ~ Thierry Banel #Emacs #OrgMode
+ [[https://arxiv.org/pdf/1807.11399][Who needs category theory?]] ~ A. Blass, Y. Gurevich #CategoryTheory
+ [[https://github.com/tchajed/coq-tricks][Tricks in Coq: Some tips, tricks, and features in Coq that are hard to
  discover]]. ~ Tej Chajed #ITP #Coq
+ [[http://ceur-ws.org/Vol-2149/paper2.pdf][An Answer Set Programming environment for high-level specification and
  visualization of FCA]]. ~ L. Bourneuf #ASP #FCA
+ [[https://medium.freecodecamp.org/make-your-code-easier-to-read-with-functional-programming-94fb8cc69f9d][Make your code easier to read with Functional Programming]]. ~ Cristi
  Salcescu #FunctionalProgramming #JavaScript
+ [[https://hackernoon.com/two-years-of-functional-programming-in-javascript-lessons-learned-1851667c726][Two years of functional programming in JavaScript: lessons learned]]. ~
  Victor Nakoryakov #FunctionalProgramming #JavaScript
+ [[https://www.47deg.com/blog/science-behind-functional-programming/][The science behind functional programming]]. ~ Rafa Paradela
  #FunctionalProgramming #CategoryTheory
+ [[https://itnext.io/pros-and-cons-of-functional-programming-32cdf527e1c2][Pros and cons of functional programming]]. ~ Iren Korkishko
  #FunctionalProgramming
+ [[https://opensource.com/article/17/6/functional-javascript][An introduction to functional programming in JavaScript]]. ~ Matt Banz
  #FunctionalProgramming #JavaScript
+ [[https://hal.archives-ouvertes.fr/hal-01830255/document][A Coq mechanised formal semantics for realistic SQL queries * Formally
  reconciling SQL and bag relational algebra ~ V]]. Benzaken, É. Contejean #ITP
  #Coq
+ [[http://www.lrdc.pitt.edu/Ashley/Mexico%20Talks/Ashley-Tutorial05.pdf][An introduction to artificial intelligence and law]]. ~ K. Ashley,
  T. Gordon. #AI
+ [[https://hackernoon.com/top-10-roles-for-your-data-science-team-e7f05d90d961][Top 10 roles in AI and data science]]. ~ Cassie Kozyrkov #AI
  #DataScience
+ [[https://www.typesofnote.com/dsss17-slack.html][Summarized Slack from Deepspec Summer School 2017]]. #DSSS17 #ITP #Coq
+ [[https://gilmi.me/blog/post/2018/07/24/pfgames][Purely functional games]]. ~ Gil Mizrahi   #FunctionalProgramming #Haskell #Game
+ [[https://soupi.github.io/rfc/pfgames][Purely functional games (How I built a game in Haskell - pure
  functional style)]]. Gil Mizrahi [Slides]
  #FunctionalProgramming #Haskell #Game
+ [[https://blog.nyarlathotep.one/2018/07/ghc-one-compiler-to-rule-them-all][GHC, one compiler to RULE them all]]. ~ Alexandre Moine #Haskell
+ [[https://haskell-works.github.io/posts/2018-08-01-introduction-to-rank-select-bit-string.html][Introduction to the rank-select bit-string]]. ~ John Ky
  #FunctionalProgramming #Haskell
+ [[https://dselsam.github.io/quickspec/][QuickSpec and the quest for good lemmas]]. ~ Daniel Selsam #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3236763][Parametric polymorphism and operational improvement]]. ~ J. Hackett,
  G. Hutton. #FunctionalProgramming #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3236765][The simple essence of automatic differentiation]]. ~ Conal Elliott
  #FunctionalProgramming #CategoryTheory #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3236777][Teaching how to program using automated assessment and functional glossy games
  (experience report)]]. ~ J. Bacelar Almeida et als. #Teaching
  #FunctionalProgramming #Haskell
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Tema_3:_Datos_estructurados_en_Coq][DAOconCoq T3: Datos estructurados en Coq]]. #ITP #Coq
+ [[https://github.com/jaalonso/DAOconCoq/releases/download/v0.3/DAOconCoq.pdf][Demostración Asistida por Ordenador (3 primeros capítulos)]]. #DAOconCoq
  #ITP #Coq
+ [[https://dl.acm.org/citation.cfm?id=3236767][Compositional soundness proofs of abstract interpreters]]. ~ S. Keidel,
  C. Bach Poulsen, S. Erdweg. #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3236770][Elaborating dependent (co)pattern matching]]. ~ J. Cockx, A. Abel. #Agda 
+ [[https://dl.acm.org/citation.cfm?id=3236771][Capturing the future by replaying the past (functional pearl)]]. ~
  J. Koppel, G. Scherer, A. Solar-Lezama. #FunctionalProgramming #SML
+ [[https://dl.acm.org/citation.cfm?id=3236772][MoSeL: a general, extensible modal framework for interactive proofs in
  separation logic]]. ~ R. Krebbers et als. #ITP #Coq
+ [[https://dl.acm.org/citation.cfm?id=3236779][What you needa know about Yoneda: profunctor optics and the Yoneda
  lemma (functional pearl)]]. ~ G. Boisseau,
  J. Gibbons. #FunctionalProgramming #Haskell #CategoryTheory
+ [[https://dl.acm.org/citation.cfm?id=3236781][Relational algebra by way of adjunctions]]. ~ J. Gibbons et
  als. #FunctionalProgramming #Haskell #CategoryTheory
+ [[https://dl.acm.org/citation.cfm?id=3236784][Ready, set, verify! applying hs-to-coq to real-world Haskell code
  (experience report)]]. ~ J. Breitner et als. #Haskell #Coq
+ [[https://dl.acm.org/citation.cfm?id=3236785][A type and scope safe universe of syntaxes with binding: their
  semantics and proofs]]. ~ G. Allais et als. #Agda
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Tema_4:_Polimorfismo_y_funciones_de_orden_superior_en_Coq][DAOconCoq T4: Polimorfismo y funciones de orden superior en Coq]]. #ITP #Coq
+ [[https://github.com/jaalonso/DAOconCoq/releases/download/v0.4/DAOconCoq.pdf][Demostración Asistida por Ordenador (4 primeros capítulos)]]. #DAOconCoq
  #ITP #Coq
+ [[https://dl.acm.org/citation.cfm?id=3236788][Prototyping a functional language using higher-order logic
  programming: a functional pearl on learning the ways of
  λProlog/Makam]]. ~ A. Stampoulis, A. Chlipala. #Metaprogramming #Prolog
+ [[https://dl.acm.org/citation.cfm?id=3236787][Equivalences for free: univalent parametricity for effective
  transport]]. ~ N. Tabareau, É. Tanter, M. Sozeau. #Coq #HoTT
+ [[https://dl.acm.org/citation.cfm?id=3236791][Fault tolerant functional reactive programming (functional pearl)]]. ~
  I. Perez #FunctionalProgramming #Haskell #Idris
+ [[https://dl.acm.org/citation.cfm?id=3236795][Partially-static data as free extension of algebras]]. ~ J. Yallo et
  als. #FunctionalProgramming #Haskell
+ [[https://www.sciencedirect.com/science/article/pii/S0167642318300273][Boolean constraints in SWI-Prolog: A comprehensive system description]]. 
  ~ Markus Triska #Prolog #CLP
+ [[http://iris-project.org/tutorial-pdfs/iris-lecture-notes.pdf][Lecture notes on Iris: Higher-order concurrent separation logic]]. ~
  L. Birkedal, A. Bizjak #ITP #Coq #Logic
+ [[https://limperg.de/ghc-extensions/][A guide to GHC's extensions]]. ~ Jannis Limperg #Haskell
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell/releases/download/v.9.7.1/Examenes_de_PF_con_Haskell.pdf][Libro de exámenes de programación funcional con Haskell (versión del 4
  de agosto de 2018)]]. #Haskell #I1M2017
+ [[https://archive.org/stream/MathematicalOlympiadInChinaProblemsAndSolutions/Mathematical_Olympiad_in_China-Problems_and_Solutions][Mathematical olympiad in China (problems and solutions)]]. #Math
+ [[http://www.math.wustl.edu/~sk/eolss.pdf][The history and concept of mathematical proof]]. ~ S. G. Krantz. #Math 
+ [[https://en.wikipedia.org/wiki/Mathematical_proof][Mathematical proof]]. ~ Wikipedia #Math
+ [[https://mpg.is/papers/gissurarson2018suggesting-xp.pdf][Suggesting valid hole fits for typed-holes (Experience report)]]. ~
  Matthías Páll Gissurarson #Haskell
+ [[https://github.com/noinia/hgeometry][hgeometry: A simple geometry library in Haskell]]. ~ Frank Staals
  #Haskell #Math
+ [[http://mvaled.github.io/blog/html/2018/08/01/composing-iterator-returning-functions.html][Composing iterator-returning functions]]. ~ Manuel Vázquez Acosta
  #Python #Haskell 
+ [[https://global.handelsblatt.com/companies/lidl-software-flop-germany-digital-failure-950223][Lidl software disaster another example of Germany’s digital failure]]. ~
  F. Kolf, C. Kerkmann #Sofware #Bug
+ [[https://openstax.org/subjects][OpenStax: openly licensed textbooks]]. #eBooks
+ [[https://arxiv.org/pdf/1807.11792][Computing integer sequences: Filtering vs generation (Functional pearl)]]. 
  ~ I. Salvo, A. Pacifico #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1807.11267][Coherent explicit dictionary application for Haskell: Formalisation
  and coherence proof]]. ~ T. Winant, D. Devriese #Haskell
+ [[https://www.cs.us.es/~jalonso/publicaciones/2018-DAOconIsabelleHOL.pdf][Demostración asistida por ordenador con Isabelle/HOL]]. #DAO #IsabelleHOL
+ [[https://sonatsuer.github.io/evangelism/2018/07/23/invitation.html][An invitation to functional programming (for mathematicians)]]. ~ Sonat
  Süer #FunctionalProgramming #Haskell
+ [[https://danghica.blogspot.com/2018/07/haskell-aint-maths.html][Haskell ain't maths]]. ~ Dan Ghica #Haskell #Maths
+ [[https://sonatsuer.github.io/higher-algebra/2018/07/30/monoid-homomorphisms-1.html][Monoid homomorphisms (Part 1 of 2)]]. ~ Sonat Süer #CategoryTheory #Haskell
+ [[http://math.jhu.edu/~eriehl/arithmetic.pdf][Categorifying cardinal arithmetic]]. ~ Emily Riehl #Math #CategoryTheory
+ [[https://rjlipton.wordpress.com/2018/08/06/desperately-seeking-integers/][Desperately seeking integers (A few twists on Turing’s proof of undecidability
  of predicate calculus)]]. ~ R.J. Lipton, K.W. Regan #Logic #Math
+ [[http://semantic-domain.blogspot.com/2018/08/category-theory-in-pl-research.html ][Category theory in PL research]]. ~ N. Krishnaswami #CategoryTheory
  #CompSci
+ [[https://medium.com/@jeremyjkun/habits-of-highly-mathematical-people-b719df12d15e][Habits of highly mathematical people]]. ~ Jeremy Kun #Math
+ [[https://www.quantamagazine.org/a-short-guide-to-hard-problems-20180716/][A short guide to hard problems]]. ~ Kevin Hartnett #Math #CompSci
+ [[http://www.openculture.com/?p=1034777][Discover “Unpaywall,” a new (and legal) browser extension that lets
  you read millions of science articles normally locked up behind
  paywalls]].
+ [[http://blog.poisson.chat/posts/2018-08-06-one-type-family.html][Haskell with only one type family]]. ~ Xia Li-yao #Haskell
+ [[https://mmhaskell.com/blog/2018/8/6/keeping-it-clean-haskell-code-formatters][Keeping it clean: Haskell code formatters]]. ~ James Bowen   #Haskell
+ [[https://arxiv.org/pdf/1808.01270v2][Topological models of arithmetic]]. ~ A. Enayat, J.D. Hamkins, B. Wcisło
  #Logic #Math
+ [[http://cl-informatik.uibk.ac.at/cek/submitted/ckkp-jar17.pdf][Semantics of Mizar as an Isabelle object logic]]. ~ C. Kaliszyk, K. Pąk
  #ITP IsabelleHOL #Mizar #Logic
+ [[http://www.staff.science.uu.nl/~swier004/publications/2018-tyde.pdf][From algebra to abstract machine: a verified generic construction]]. ~
  C.T. Cortiñas, W. Swierstra #FunctionalProgramming #ITP #Agda
+ [[https://www.mimuw.edu.pl/~lukaszcz/cicm2018.pdf]["Concrete semantics" with Coq and CoqHammer]]. ~ Ł. Czajka, B. Ekici,
  C. Kaliszyk #ITP #Coq #IsabelleHOL
+ [[https://github.com/lukaszcz/COQ-IMP ][Coq version of (part of) the HOL-IMP theories accompanying the book
  "Concrete Semantics with Isabelle/HOL"]]. Formalized using
  CoqHammer. #ITP #Coq
+ [[http://www.mdpi.com/2224-2708/7/3/34/pdf][Enif-Lang: A specialized language for programming network functions on
  commodity hardware]]. ~ N. Bonelli, S. Giordano, G. Procissi #Haskell
+ [[https://haskell-works.github.io/posts/2018-08-08-data-parallel-rank-select-bit-string-construction.html][Data-parallel rank-select bit-string construction]]. ~ John Ky #Haskell
+ [[https://sonatsuer.github.io/higher-algebra/2018/08/09/monoid-homomorphisms-2.html][Monoid homomorphisms (Part 2 of 2)]]. ~ Sonat Süer   #CategoryTheory #Haskell
+ [[https://sras.me/haskell/miscellaneous-enlightenments.html][Learning Haskell: Miscellaneous enlightenments]]. ~ Sandeep C R #Haskell 
+ [[https://markkarpov.com/tutorial/th.html][Template Haskell tutorial]]. ~ Mark Karpov #Haskell
+ [[https://www.onlineuniversities.com/blog/2009/07/100-best-websites-for-mathletes/][100 best websites for mathletes]]. #Math
+ [[https://www.dropbox.com/s/i0qgfoye6artcp8/untyped_lambda.pdf?dl=0][Lambda calculus - step by step]]. ~ Helmut Brandl #LambdaCalculus #Logic
  #Math
+ [[https://leanpub.com/outsidefp][An outsider's guide to statically typed functional programming]]. ~
  Brian Marick #FunctionalProgramming #Elm #PureScript
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Tema_5:_T%C3%A1cticas_b%C3%A1sicas_de_Coq][DAOconCoq T5: Tácticas básicas de Coq]]. #ITP #Coq
+ [[https://github.com/jaalonso/DAOconCoq/releases/download/v0.5/DAOconCoq.pdf][Demostración Asistida por Ordenador con Coq (5 primeros capítulos)]]. 
  #DAOconCoq #ITP #Coq
+ [[https://www.johndcook.com/blog/2018/08/11/currying/][Currying in calculus, PDEs, programming, and categories]]. ~ J.D. Cook
  #Math #FunctionalProgramming #Haskell #CategoryTheory
+ [[https://medium.com/@krystal.maughan/breaking-the-space-time-barrier-with-haskell-time-traveling-and-debugging-in-codeworld-a-google-e87894dd43d7][Breaking the space-time barrier with Haskell: Time-traveling and
  debugging in CodeWorld]]. ~ Krystal Maughan #Haskell #CodeWorld
+ [[https://www.fceia.unr.edu.ar/~mauro/pubs/cm-conf.pdf][Improving typeclass relations by being open]]. ~ G. Martínez,
  M. Jaskelioff, G. De Luca #Haskell
+ [[https://github.com/lortabac/versioning][Type-safe data versioning in Haskell]]. ~ Lorenzo Tabacchini #Haskell
+ [[https://www.fpcomplete.com/hubfs/Haskell-User-Survey-Results.pdf][State of Haskell 2018]]. ~ Aaron Contorer #Haskell
+ [[https://www.nature.com/news/paradox-at-the-heart-of-mathematics-makes-physics-problem-unanswerable-1.18983][Paradox at the heart of mathematics makes physics problem
  unanswerable]]. ~ Davide Castelvecch #Logic #Math #Physics
+ [[https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/][Fast Sudoku solver in Haskell #3: Picking the right data structures]]. ~
  Abhinav Sarkar #Haskell
+ [[http://matryoshka.gforge.inria.fr/pubs/deep_learning_article.pdf][A formal proof of the expressiveness of deep learning]]. ~ A. Bentkamp,
  J.C. Blanchette, D. Klakow. #ITP #IsabelleHOL #DeepLearning
+ [[http://cattheory.com/extensibleTypeDirectedEditing.pdf][Extensible type-directed editing]]. ~ J. Korkut, D.T. Christiansen
  #FunctionalProgramming #Idris
+ [[http://www.philipzucker.com/approximating-compiling-categories-using-typelevel-haskell-take-2/][Approximating compiling to categories using type-level Haskell: Take 2]]. 
  ~ Philip Zucker #FunctionalProgramming #Haskell
+ [[http://matryoshka.gforge.inria.fr/pubs/wagemaker_bsc_thesis.pdf][A formally verified proof of the Mason-Stothers theorem in Lean]]. ~
  J. Wagemaker #ITP #Lean #Math
+ [[http://kataskeue.com/gdp.pdf][Ghosts of departed proofs (Functional pearl)]]. ~ Matt Noonan #Haskell
+ [[http://www.cse.chalmers.se/~patrikj/papers/TypeTheory4ModProg_preprint_2018-05-19.pdf][Type theory as a framework for modelling and programming]]. ~
  C. Ionescu, P. Jansson, N. Botta. #FunctionalProgramming
+ [[https://plato.stanford.edu/entries/proof-theory/][Proof theory]]. ~ Michael Rathjen  #Logic
+ [[https://divisbyzero.com/2010/08/18/mathematical-surprises/][Mathematical surprises]]. ~ Dave Richeson #Math
+ [[https://link.springer.com/article/10.1007/s10817-018-9455-7][A verified SAT solver framework with learn, forget, restart, and
  incrementality]]. ~ J.C. Blanchette et als. #ITP #IsabelleHOL #SAT
+ [[https://towardsdatascience.com/newbies-guide-to-deep-learning-6bf601c5a98e][Newbie’s guide to Deep Learning (Taking baby steps when starting
  DL)]]. ~ Arkar Min Aung #DeepLearning
+ [[https://www.isa-afp.org/entries/Minsky_Machines.html?utm_source=dlvr.it&utm_medium=twitter][Minsky machines in Isabelle/HOL]]. ~ Bertram Felgenhauer #ITP #IsabelleHOL
+ [[https://arxiv.org/pdf/1807.08416v1][Some fundamental theorems in Mathematics]]. ~ Oliver Knill #Math
+ [[https://medium.com/brandons-computer-science-notes/divide-and-conquer-algorithms-4e83d9999ffa][Divide and conquer algorithms]]. ~ Brandon Skerritt   #Algorithms
+ [[https://mzabani.github.io/posts/2018-08-13.html][Typeclass induction and developing a QuickCheck-like library]]. ~
  Marcelo Zabani #FunctionalProgramming #Haskell
+ [[https://patternsinfp.wordpress.com/2018/08/14/folds-on-lists/][Folds on lists]]. ~ Jeremy Gibbons #FunctionalProgramming #Haskell
+ [[https://github.com/sharkdp/cube-composer][Cube composer: A puzzle game inspired by functional programming]]. ~
  David Peter #FunctionalProgramming #PureScript #Game
+ [[https://arxiv.org/pdf/1808.04251v1][Proof simplification and automated theorem proving]]. ~ Michael Kinyon
  #ATP #Prover9
+ [[https://arxiv.org/pdf/1808.03810][The Boyer-Moore waterfall model revisited]]. ~ P. Papapanagiotou,
  J. Fleuriot #ITP #HOL_Light
+ [[http://www.cse.chalmers.se/~algehed/blogpostsHTML/SAT.html][A very small SAT solver]]. ~ Maximilian Algehed #FunctionalProgramming
  #Haskell #Logic #SAT
+ [[http://argo.matf.bg.ac.rs/publications/2018/2018-InformalToFormal.pdf][From informal to formal proofs in euclidean geometry]]. ~ S
  Stojanovic-Ður #ATP #TPTP #Math
+ [[https://medium.com/@baseerhk/pearls-of-scala-functional-programming-part-i-ab4b76ba0b43][Pearls of Scala functional programming, Part I (1. Smallest free number:
  array-based solution)]]. ~ Baseer Al-Obaidy #FunctionalProgramming #Scala
+ [[https://binx.io/blog/2018/08/09/functional-programming-in-python/][Functional programming in Python (Creating transformation pipelines in
  Python)]]. ~ Dennis Vriend #FunctionalProgramming #Python
+ [[https://arxiv.org/pdf/1808.03274][Introducing computer science to high school students through logic
  programming]]. ~ T.T. Yuen, M. Reyes, Y. Zhang. #LogicProgramming #ASP #Teaching
+ [[https://journals.agh.edu.pl/csci/article/view/2863][Using Erlang in research and education in a technical university]]. ~
  I. Petrov, A. Alexeyenko, G. Ivanova. #FunctionalProgramming #Erlang
  #Teaching
+ [[https://julesh.com/2018/08/16/lenses-for-philosophers/][Lenses for philosophers]]. ~ Jules Hedges #CategoryTheory
+ [[https://www.johndcook.com/blog/2018/04/14/categorical-data-analysis/][Categorical data analysis]]. ~ John D. Cook #CategoryTheory
+ [[https://shiftordie.de/blog/2018/08/17/how-to-transform-camels-purescript-haskell/][How to turn a Dromedary camel into a Bactrian camel]]. ~ Alexander Klink
  #FunctionalProgramming #Haskell
+ [[https://github.com/mchav/CourseraMachineLearning][Exercises and notes from the Coursera Machine Learning Course by
  Andrew Ng]]. ~ Michael Chavinda #FunctionalProgramming
  #Haskell #MachineLearning
+ [[https://opensource.googleblog.com/2018/08/zurihac-2018-haskell-hackathon-in.html][ZuriHac 2018: Haskell hackathon in Rapperswil]]. ~ Ivan Krišto. 
  #FunctionalProgramming #Haskell
+ [[https://medium.com/@maiavictor/solving-the-mystery-behind-abstract-algorithms-magical-optimizations-144225164b07][Solving the mystery behind Abstract Algorithm’s magical optimizations]]. 
  ~ Victor Maia #Haskell
+ [[https://julesh.com/2016/09/22/abusing-the-continuation-monad/][Abusing the continuation monad]]. ~ Jules Hedges   #FunctionalProgramming #Haskell
+ [[http://www.cis.upenn.edu/~rrand/popl_2016/][Programs and proofs in the Coq proof assistant]]. ~ Arthur Azevedo de
  Amorim and Robert Rand. #ITP #Coq
+ [[https://terrytao.wordpress.com/2018/08/18/qed-version-2-0-an-interactive-text-in-first-order-logic][QED version 2.0: an interactive text in first-order logic]]. ~ Terence
  Tao #Teaching #Logic
+ [[https://medium.com/building-nubank/demystifying-functional-programming-in-a-real-company-e954a2591504][Demystifying functional programming (in a real company)]]. ~ Caio
  Oliveira #FunctionalProgramming
+ [[https://medium.com/@sderosiaux/why-referential-transparency-matters-7c179424dab5][Why referential transparency matters?]] ~ Stéphane Derosiaux
  #FunctionalProgramming
+ [[https://arxiv.org/pdf/1808.04289&hl][Eliminating unstable tests in floating-point programs]]. ~ L. Titolo,
  C.A. Muñoz, M.A. Feliú, and M.M. Moscato. #FormalVerification #PVS
+ [[https://tarski.cs.us.es/~jalonso/DAOconCoq/index.php/Tema_6:_L%C3%B3gica_en_Coq][DAOconCoq T6: Lógica en Coq]]. #DAO #Coq #Lógica
+ [[https://github.com/jaalonso/DAOconCoq/releases/download/v0.6/DAOconCoq.pdf][Demostración Asistida por Ordenador con Coq (6 primeros
  capítulos)]]. #DAOconCoq #DAO #Coq #ProgramaciónFuncional #Lógica
+ [[https://github.com/LeventErkok/sbvPlugin][SBVPlugin: Formally prove properties of Haskell programs using
  SBV/SMT]]. ~ Levent Erkök #Haskell
+ [[http://www.scs.stanford.edu/11au-cs240h/notes/ghc-slides.htm][A Haskell compiler]]. ~ David Tereil #Haskell
+ [[https://bartoszmilewski.com/2018/08/20/recursion-schemes-for-higher-algebras/][Recursion schemes for higher algebras]]. ~ Bartosz Milewski
  #FunctionalProgramming #Haskell #CategoryTheory
+ [[https://www.microsiervos.com/archivo/ia/etica-asistentes-inteligentes-filosofia.html][Sobre la ética de los asistentes inteligentes]]. ~ @Alvy #IA
+ [[https://philpapers.org/archive/DANTAE-2.pdf][Towards an ethics of AI assistants: An initial framework]]. ~ John
  Danaher #AI
+ [[http://www.usma.edu/eecs/SiteAssets/SitePages/Faculty%20Publication%20Documents/Okasaki/icfp99square.pdf][From fast exponentiation to square matrices: An adventure in types]]. ~
  Chris Okasaki #FunctionalProgramming #Haskell
+ [[https://mathoverflow.net/questions/308797/what-programming-language-should-a-professional-mathematician-know][What programming language should a professional mathematician know?]]
  #Math #Programming #CompSci
+ [[https://www.technologyreview.es/s/10458/esta-red-neuronal-aplica-leyes-fisicas-aprendidas-de-forma-automatica][Esta red neuronal aplica leyes físicas aprendidas de forma
  automática]]. #IA #Física
+ [[https://arxiv.org/pdf/1807.10300][Discovering physical concepts with neural networks]]. ~ R. Iten et
  als. #MachineLearning #Physics
+ [[https://functor.tokyo/blog/2018-08-21-machine-learning-for-haskellers][How to get into Machine Learning for a Haskeller]]. ~ Dennis Gosnell
  #Haskell #MachineLearning
+ [[https://functional.works-hub.com/learn/water-jug-rewrite-with-haskell-part-i-4347a?utm_source=reddit&utm_campaign=Walkies&utm_content=Hask%2FBlog][Water jug rewrite with Haskell (Part I)]]. ~ Vignesh Sarma K #Haskell
+ [[http://ceur-ws.org/Vol-2162/paper-08.pdf][A verified simple prover for first-order logic]]. ~ J. Villadsen,
  A. Schlichtkrull, A.H. From. #ITP #IsabelleHOL
+ [[https://arxiv.org/pdf/1808.05342][Formalisation of a frame stack semantics for a Java-like language]]. ~ A
  Schubert, J. Chrząszcz. #ITP #Coq
+ [[http://haskell.cs.yale.edu/wp-content/uploads/2011/01/cs.pdf][The conception, evolution, and application of functional programming
  languages]]. ~ Paul Hudak #FunctionalProgramming 
+ [[http://goto.ucsd.edu/~nvazou/real_world_liquid.pdf][LiquidHaskell: Experience with refinement types in the real world]]. ~
  N. Vazou, E.L. Seidel, R. Jhala #Haskell #LiquidHaskell
+ [[https://leanpub.com/fpmortals/read][Functional programming for mortals with Scalaz]]. ~ Sam Halliday
  #FunctionalProgramming #Scala #Scalaz
+ [[https://github.com/fommil/fpmortals][Source and examples to “Functional Programming for Mortals with
  Scalaz”]]. ~ Sam Halliday #FunctionalProgramming #Scala #Scalaz
+ [[http://andreipopescu.uk/pdf/cosmed.pdf][CoSMed: A confidentiality-verified social media platform]]. ~
  T. Bauereiß et als. #ITP #IsabelleHOL
+ [[https://profsjt.blogspot.com/2018/08/review-of-cosmed-confidentiality.html][Review of: "CoSMed: a confidentiality-verified social media platform"]]. 
  ~ Simon Thompson #ITP #IsabelleHOL
+ [[http://www.egri-nagy.hu/pdf/Math_Liberal_Arts_Reader.pdf][Mathematics and programming - the easy languages to learn]]. ~
  A. Egri-Nagy #Math #CompSci 
+ [[http://downloads.hindawi.com/journals/mpe/aip/4982974.pdf][A new algebraic approach to decision making in a railway interlocking
  system based on preprocess]]. A. Hernando, R. Maestre, E. Roanes-Lozano.
  #Math #CompSci
+ [[https://arboldetintalibros.wordpress.com/2011/11/02/matematicos-y-acusmaticos/][Matemáticos y acusmáticos]]. ~ Lucio Fernando Ruíz #Matemáticas
+ [[https://w.pitula.me/2016/monad-proof/][The proof: Monad as a monoid in category of endofunctors]]. ~ Wojtek
  Pituła #FunctionalProgramming #Scala
+ [[https://medium.com/@maiavictor/the-abstract-calculus-fe8c46bcf39c][The abstract calculus]]. ~ Victor Maia #FunctionalProgramming #Haskell
+ [[https://dev.to/allanmacgregor/you-should-learn-functional-programming-in-2018-4nff][You should learn functional programming in 2018]]. ~ Allan MacGregor
  #FunctionalProgramming
+ [[https://phaazon.net/media/uploads/axelsson2013using.pdf][Using circular programs for higher-order syntax (Functional pearl)]]. ~
  E. Axelsson, K. Claessen. #FunctionalProgramming #Haskell
+ [[https://purelyfunctional.org/slides/writing_fast_haskell.pdf][Writing fast Haskell (Elegance is not an excuse for bad performance)]]. 
  ~ Moritz Kiefer  #FunctionalProgramming
  #Haskell
+ [[https://qnikst.github.io/posts/2018-08-23-ht-no-more.html][Marrying Haskell and Hyper-Threading]]. ~ Alexander Vershilov
  #FunctionalProgramming #Haskell
+ [[https://towardsdatascience.com/what-is-tail-recursion-elimination-or-why-functional-programming-can-be-awesome-43091d76915e][How functional programming can be awesome: Tail recursion elimination]]. 
  ~ Luciano Strika #FunctionalProgramming #Python #Haskell
+ [[https://haskell-works.github.io/posts/2018-08-22-pdep-and-pext-bit-manipulation-functions.html][Bit-manipulation operations for high-performance succinct data-structures and
  CSV parsing]]. ~ John Ky #FunctionalProgramming #Haskell
+ [[https://medium.com/@zaid.naom/exploring-folds-a-powerful-pattern-of-functional-programming-3036974205c8][Exploring folds: A powerful pattern of functional programming]]. ~ Zaid
  Ajaj #FunctionalProgramming
+ [[https://speakerdeck.com/konn/the-great-power-of-newtypes][The great power of Newtypes.]] ~ Hiromi Ishii   #FunctionalProgramming #Haskell
+ [[http://www.cs.tufts.edu/~kfisher/teaching.html][Some lectures on programming languages]]. ~ Kathleen Fisher #Programming
+ [[https://www.slideshare.net/StevePoling1/turing-goes-to-church][Turing goes to Church (What can a computer do?).]] ~ Steve Poling
  #CompSci #FunctionalProgramming
+ [[https://ajknapp.github.io/2018/08/14/notomatic-differentiation.html][Not-o-matic differentiation]]. ~ Andrew Knapp #FunctionalProgramming #Haskell
+ [[http://www.cse.chalmers.se/~patrikj/papers/Janssonetal_DSLsofMathCourseExamplesResults_preprint_2018-08-17.pdf][Examples and results from a BSc-level course on domain specific
  languages of mathematics ~ P.]] Jansson et als. #Haskell
  #Math
+ [[https://arxiv.org/pdf/1808.07771][FMS: Functional programming as a modelling language]]. ~ I. Dasseville,
  G. Janssens. #ASP
+ [[http://es.r4ds.hadley.nz/][R para Ciencia de Datos]]. ~ G. Grolemund, H. Wickham #Rstats #DataScience
+ [[http://jmc.stanford.edu/articles/lisp/lisp.pdf][History of Lisp]]. ~ John McCarthy #Lisp
+ [[https://github.com/utkarshkukreti/purescript-hedwi][Hedwig: a fast, type safe, declarative PureScript library for building
  web applications]]. ~ Utkarsh Kukretig#examples #PureScript
+ [[https://youtu.be/NcUNN_tSmyE][Purely functional solutions to imperative problems (HaskellRank Ep.07)]]. 
  #FunctionalProgramming #Haskell
+ [[https://marcinszamotulski.me/posts/finite-state-machines.html][Typed transitions, finite state machines and free categories]]. ~ Marcin
  Szamotulski #FunctionalProgramming #Haskell
+ [[https://www.cicm-conference.org/2018/infproc/paper11.pdf][Towards Mac Lane’s comparison theorem for the (co)Kleisli construction in Coq]]. 
  ~ Burak Ekici. #ITP #Coq
+ [[https://www.cicm-conference.org/2018/infproc/paper2.pdf][Logic as a path to enlightenment (Work in progress report)]]. ~ Wolfgang
  Schreiner #Logic #CompSci
+ [[https://www.cicm-conference.org/2018/infproc/paper13.pdf][Automatic proof-checking of ordinary mathematical texts]]. ~ S. Frerix,
  P. Koepke. #ATP #ITP #Math
+ [[https://www.cicm-conference.org/2018/infproc/paper14.pdf][IsarMathLib: a formalized mathematics library for Isabelle/ZF]]. ~
  S. Kołodyński. #ITP #IsabelleZF #Math
+ [[http://adam.chlipala.net/papers/FiatCryptoSP19][Simple high-level code for cryptographic arithmetic (with proofs,
  without compromises)]]. ~ A. Erbsen, J. Philipoom, J. Gross, R. Sloan,
  A. Chlipala. #ITP #Coq
+ [[http://homalg-project.github.io/CAP_project/][CAP (Categories, Algorithms, and Programming) project]]. ~ S. Gutsche,
  S. Posur, M. Barakat, Ø. Skartsæterhagen. #CAS #CategoryTheory
+ [[https://www.cicm-conference.org/2018/infproc/paper21.pdf][On the syntax and semantics of CAP (Categories, Algorithms, Programming)
  project]]. ~ S. Gutsche, S. Posur, Ø. Skartsæterhagen. #CAS #CategoryTheory
+ [[http://unsworks.unsw.edu.au/fapi/datastream/unsworks:51703/SOURCE2][Automation for proof engineering (Machine-checked proofs at scale)]]. ~
  D. Matichuk. #ITP #IsabelleHOL #PhD_Thesis
+ [[https://www.cicm-conference.org/2018/infproc/paper15.pdf][Progress in the formalization of Matiyasevich's theorem in the Mizar system]]. 
  ~ K. Pąk #ITP #Mizar #Math
+ [[http://philsci-archive.pitt.edu/14966/1/univalence-4.pdf][Univalent foundations as a foundation for mathematical practice]]. ~
  H. Crane. #Logic #Math
+ [[https://locallycompact.gitlab.io/ANLGTH/][A nonlinear guide to Haskell]]. ~ Daniel Firth #FunctionalProgramming
  #Haskell
+ [[http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/][A road to Common Lisp]]. ~ Steve Losh   #FunctionalProgramming #CommonLisp
+ [[http://stevelosh.com/blog/2018/05/fun-with-macros-gathering/][Fun with macros: Gathering]]. ~ Steve Losh   #FunctionalProgramming #CommonLisp
+ [[http://stevelosh.com/blog/2018/07/fun-with-macros-if-let/][Fun with macros: If-let and when-let]]. ~ Steve Losh   #FunctionalProgramming #CommonLisp
+ [[http://hal.inria.fr/inria-00076024/document][The calculus of constructions]]. ~ T. Coquand, G. Huet #Logic #Math
+ [[https://www.isa-afp.org/entries/Simplex.html][An incremental simplex algorithm with unsatisfiable core generation in
  Isabelle/HOL]]. ~ Filip Marić #ITP #IsabelleHOL
+ [[http://cl-informatik.uibk.ac.at/users/mfaerber/documents/thesis.pdf][Learning proof search in proof assistants]]. ~ Michael Färber
  #AutomatedTheoremProving #MachineLearning 
+ [[https://github.com/passingcuriosity/talks/blob/master/homology][A computational sketch of homology]]. ~ Thomas Sutton #FunctionalProgramming
  #Haskell #Math
+ [[https://arxiv.org/pdf/1808.07832][A simple methodology for computing families of algorithms]]. ~
  D.N. Parikh et als. #Programming #CompSci
+ [[https://dspace.library.uu.nl/handle/1874/367810][Formalisation of cryptographic proofs in Agda]]. ~ A.M. Golov. #ITP #Agda
+ [[http://cl-informatik.uibk.ac.at/cek/coqhammer][CoqHammer: Automation for dependent type theory]]. ~ Ł. Czajka,
  C. Kaliszyk. #ITP #ATP #Coq
+ [[https://github.com/lukaszcz/coqhammer][CoqHammer: An automated reasoning hammer tool for Coq]]. ~ Łukasz Czajka
  #ITP #ATP #Coq
+ [[https://arxiv.org/pdf/1711.10455][Backprop as functor: A compositional perspective on supervised
  learning]]. ~ B. Fong, D.I. Spivak, R. Tuyéras. #Haskell
  #MachineLearning
+ [[https://arxiv.org/pdf/1808.08652][Unique solutions of contractions, CCS, and their HOL formalisation]]. ~
  C. Tian, D. Sangiorgi. #ITP #HOL4
+ [[https://dspace.library.uu.nl/handle/1874/367801][Verified tail-recursive folds through dissection]]. ~ C. Tomé
  Cortiñas. #FunctionalProgramming #ITP #Agda
+ [[http://qfpl.io/share/talks/laws/slides.pdf][Laws!]] ~ George Wilson  #FunctionalProgramming #Haskell
+ [[https://mikecroucher.github.io/MLPM_talk/][Is your research software correct?]] ~ Mike Croucher   #Programming
+ [[https://softwarefoundations.cis.upenn.edu/qc-current/index.html][Software foundations Volume 4: QuickChick: Property-based testing in Coq]]. 
  ~ L. Lampropoulos, B.C. Pierce. #ITP #Coq
+ [[https://arxiv.org/abs/1707.09616v3][Owl: A general-purpose numerical library in OCaml]]. ~ L. Wang. 
  #FunctionalProgramming #OCaml
+ [[https://arxiv.org/pdf/1808.09701][Comparison of two theorem provers: Isabelle/HOL and Coq]]. ~
  A. Yushkovskiy, S. Tripakis. #ITP #IsabelleHOL #Coq
+ [[https://qfpl.io/share/talks/appetite-for-dysfunction][Appetite for dysfunction]]. ~ Andrew McMiddlin  
  #FunctionalProgramming #Haskell #WordPress
+ [[https://github.com/caisah/emacs.dz][Awesome emacs config files]]. #Emacs
+ [[https://blog.computationalcomplexity.org/2018/08/what-is-data-science.html][What is Data Science?]] ~  Lance Fortnow #DataScience
+ [[https://simons.berkeley.edu/workshops/schedule/6680][Foundations of Data Science Boot Camp]]. #DataScience
+ [[https://link.springer.com/content/pdf/10.1007%2Fs10817-017-9440-6.pdf][The role of the Mizar Mathematical Library for interactive proof
  development in Mizar]]. ~ G. Bancerek et als. #ITP #Mizar #Math
+ [[http://www.cs.nmsu.edu/~epontell/ALP/uploads/alp_Amelia_Harrison.pdf][Proving program correctness using the AG semantics: An example with
  n-queens]]. ~ A.  Harrison-18. #LogicProgramming #ASP
+ [[https://works.bepress.com/yuliya_lierler/80/download/][SMT-based constraint answer set solver EZSMT+ for non-tight
  programs]]. ~ D. Shen, Y. Lierler #LogicProgramming
  #ConstraintProgramming #ASP #SMT
+ [[https://www.techrepublic.com/article/is-julia-the-next-big-programming-language-mit-thinks-so-as-version-1-0-lands/][Is Julia the next big programming language? MIT thinks so, as version
  1.0 lands]]. #Programming #Julia
+ [[https://github.com/mandubian/neurocat][From neural networks to the Category of composable supervised learning
  algorithms in Scala]]. ~ P. Voitot #NeuralNetworks #CategoryTheory #Scala

* Septiembre 2018

+ [[https://alvinalexander.com/downloads/HelloScala-FreePreview.pdf][Hello, Scala (Learn Scala fast with small, easy lessons)]]. ~
  A. Alexander. #eBook #FunctionalProgramming #Scala
+ [[https://tarski.cs.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-julio-de-2018][GLC: Resumen de lecturas compartidas durante julio de 2018]]. 
  #FunctionalProgramming #ITP
+ [[https://tarski.cs.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-agosto-de-2018/][GLC: Resumen de lecturas compartidas durante agosto de 2018]]. 
  #FunctionalProgramming #ITP 
+ [[https://www.geekwire.com/2018/top-schools-ai-new-study-ranks-leading-u-s-artificial-intelligence-grad-programs/][Top schools for AI: New study ranks the leading U.S. artificial
  intelligence grad programs]]. #AI
+ [[https://arxiv.org/pdf/1808.08329][When you should use lists in Haskell (mostly, you should not)]]. ~
  J. Waldmann. #FunctionalProgramming #Haskell
+ [[http://www.imn.htwk-leipzig.de/~waldmann/talk/17/wflp/main.pdf][How I teach functional programming]]. ~ J. Waldmann. #FunctionalProgramming 
  #Haskell
+ [[https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/data/][How do we store data, then?]] ~ J. Waldmann. #FunctionalProgramming
  #Haskell
+ [[https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/lens/][Introduction to the Lens Library]]. ~ J. Waldmann. #FunctionalProgramming 
  #Haskell
+ [[https://arxiv.org/pdf/1808.10690][On the formalization of higher inductive types and synthetic homotopy
  theory]]. ~ F. van_Doorn. #ITP #Lean #HoTT
+ [[https://owickstrom.github.io/declarative-gtk-programming-in-haskell][Declarative GTK+ programming with Haskell]]. ~ O. Wickström
  #FunctionalProgramming #Haskell
+ [[https://github.com/owickstrom/gi-gtk-declarative][Declarative GTK+ programming in Haskell]]. ~ O. Wickström
  #FunctionalProgramming #Haskell
+ [[http://www.scipy-lectures.org][Scipy Lecture Notes (One document to learn numerics, science, and data
  with Python)]]. #Programming #Python
+ [[https://haskell-containers.readthedocs.io/en/latest/index.html][Introduction and overview of the main features of the containers
  package]]. #FunctionalProgramming #Haskell
+ [[http://www.unirioja.es/cu/jodivaso/publications/2018/AISC_2018.pdf][REGULAR-MT: A formal proof of the computation of Hermite normal form
  in a general setting]]. ~ J. Divasón, J. Aransay. #ITP #IsabelleHOL
  #Math #Vestigium
+ [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Org-Mode is one of the most reasonable markup languages to use for
  text]]. ~ Karl Voit. #Emacs #OrgMode
+ [[https://ambrevar.xyz/blog-architecture][A blog in pure Org/Lisp (A pamphlet for hackable website systems)]]. ~
  Pierre Neidhardt #Emacs #OrgMode
+ [[https://mmhaskell.com/blog/2018/8/20/making-the-jump-ii-using-more-monads][Making the jump II: Using more monads]]. ~ James Bowen
  #FunctionalProgramming #Haskell
+ [[http://kenta.blogspot.com/2018/09/fanlevif-cbc-encryption-and-decryption.html][The CBC (Cipher Block Chaining) encryption and decryption]]. ~ Ken T
  Takusagawa #FunctionalProgramming #Haskell
+ [[http://fun.cs.tufts.edu/stream-fusion.pdf][Stream fusion (from lists to streams to nothing at all)]]. ~ D. Coutts,
  R. Leshchinskiy, D. Stewart. #FunctionalProgramming #Haskell 
+ [[https://www.isa-afp.org/entries/Budan_Fourier.html][The Budan-Fourier theorem and counting real roots with multiplicity in
  Isabelle/HOL]]. ~ W. Li. #ITP #IsabelleHOL #Math
+ [[https://jaspervdj.be/posts/2018-09-04-binomial-heaps-101.html][Dependent types in Haskell: Binomial heaps 101]]. ~ Jasper Van der Jeugt
  #FunctionalProgramming #Haskell
+ [[https://chrispenner.ca/posts/update-monad][Update monads: Variation on state monads]]. ~ Chris Penner
  #FunctionalProgramming #Haskell
+ [[http://www.well-typed.com/blog/2018/09/compositional-zooming/][Compositional zooming for StateT and ReaderT using lens]]. ~ Edsko de
  Vries. #FunctionalProgramming #Haskell
+ [[http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/][Demystifying DList]]. #FunctionalProgramming #Haskell 
+ [[https://arxiv.org/abs/1809.00508][A logic-algebraic tool for reasoning with Knowledge-Based Systems]]. ~
  J.A. Alonso, G.A. Aranda, J. Borrego, M.M. Fernández, M.J. Hidalgo
  #Logic #Math #CompSci
+ [[https://enablingmaths.files.wordpress.com/2017/12/bundy_enabling_mathematical_cultures_v3.pdf][Automated reasoning in the age of the Internet]]. ~ A. Bundy. #ATP
+ [[https://www.glc.us.es/~jalonso/vestigium/resena-a-formal-proof-of-the-computation-of-hermite-normal-form-in-a-general-setting/][Vestigium: A formal proof of the computation of Hermite normal form in
  a general setting]] by J. Divasón and J. Aransay. #ITP #IsabelleHOL
  #Math 
+ [[http://matt.might.net/articles/books-papers-materials-for-graduate-students/][Reading for graduate students]]. Matt Might #CompSci
+ [[http://blog.jpolak.org/?p=2028][My top nine favourite math texts]]. ~ Jason Polak #Math
+ [[https://plato.stanford.edu/entries/logic-intuitionistic/][Intuitionistic logic]]. ~ Joan Moschovakis #Logic
+ [[https://hal.inria.fr/hal-01866271/file/main.pdf][Formal verification of a geometry algorithm: A quest for abstract
  views and symmetry in Coq proofs]]. ~ Y. Bertot. #ITP #Coq #Math #Vestigium
+ [[https://arxiv.org/pdf/1809.00738][Categories of optics]]. ~ M. Riley. #CategoryTheory #Haskell
+ [[https://github.com/minad/paripari][Fast parser combinator library for Haskell with two strategies (Fast
  acceptor and slower reporter with decent error messages)]]. ~
  D. Mendler. #FunctionalProgramming #Haskell
+ [[http://blog.jpolak.org/?p=1927][A very quick tour of R]]. ~ Jason Polak #Rstats
+ [[http://blog.jpolak.org/?p=2027][On reasonably sure proofs]]. ~ Jason Polak #Math
+ [[https://arxiv.org/pdf/math/9301202][Theorems for a price: Tomorrow's semi-rigorous mathematical culture]]. ~
  D. Zeilberger #Math
+ [[https://arxiv.org/pdf/1808.01520.pdf][Branching processes for QuickCheck generators]]. ~ A. Mista, A. Russo,
  J. Hughes. #Haskell
+ [[https://www.glc.us.es/~jalonso/vestigium/resena-comparison-of-two-theorem-provers-isabelle-hol-and-coq/][Vestigium: Comparison of two theorem provers: Isabelle/HOL and Coq]]. 
  #ITP #IsabelleHOL #Coq
+ [[https://argumatronic.com/posts/2018-09-02-effective-metaphor.html][The unreasonable effectiveness of metaphor]]. ~ Julie Moronuki
  #Math #Haskell #Linguistics
+ [[https://surface.syr.edu/cgi/viewcontent.cgi%3Farticle%3D1181%26context%3Deecs_techreports][A formally veriﬁed heap allocator]]. ~ A. Sahebolamri, S.J. Chapin,
  S.D. Constable #ITP #IsabelleHOL
+ [[https://uwspace.uwaterloo.ca/bitstream/handle/10012/13697/Arteca_Ellen.pdf][Formal semantics and mechanized soundness proof for fast gradually
  typed JavaScript]]. ~ E. Arteca. #ITP #Coq #JavaScript
+ [[http://ojs.bibsys.no/index.php/NIK/article/view/512/436][The pocket reasoner (automatic reasoning on small devices)]]. ~ J. Otten
  #ATP #Prolog
+ [[https://arxiv.org/pdf/1806.03476.pdf][Type variables in patterns]]. ~ Richard A. Eisenberg, Joachim Breitner,
  Simon Peyton Jones. #Haskell
+ [[http://blog.jpolak.org/?p=1523][12 tips for reading math books]]. ~ Jason Polak #Math
+ [[https://www.gaussianos.com/el-yin-yang-y-el-numero-aureo][El yin-yang y el número áureo]]. ~ M.A. Morales. #Matemáticas
+ [[https://plato.stanford.edu/entries/logical-truth/][Logical truth]]. ~ M. Gómez #Logic
+ [[https://plato.stanford.edu/entries/technology/][Philosophy of technology]]. ~ M. Franssen et als. #Logic
+ [[https://web.math.unifi.it/~maggesi/papers/2017-quaternions/gabrielli-maggesi-quaternions-itp-2017.pdf][Formalizing basic quaternionic analysis]]. ~ A. Gabrielli, M. Maggesi
  #ITP #HOL_Light #Math
+ [[https://www.isa-afp.org/entries/Quaternions.html][Quaternions in Isabelle/HOL]]. ~ L.C. Paulson. #ITP #IsabelleHOL #Math
+ [[https://www.era.lib.ed.ac.uk/bitstream/handle/1842/17863/Papapanagiotou2014.pdf][A formal verification approach to process modelling and composition]]. ~
  P. Papapanagiotou. #PhD_Thesis #ITP #HOL_Light
+ [[https://arxiv.org/pdf/1808.05490][Correct-by-construction process composition using classical linear
  logic inference]]. ~ P. Papapanagiotou, J. Fleuriot. #ITP #HOL_Light
+ [[http://slides.com/shersh/picnic][Picnic: put containers into a backpack]]. ~ D. Kovanikov. #FunctionalProgramming
  #Haskell
+ [[https://money.cnn.com/2018/09/07/technology/darpa-artificial-intelligence/index.html][The Pentagon is investing $2 billion into artificial intelligence]]. ~
  Matt McFarland #AI
+ [[https://hotair.tech/blog/goodbye-vscode/][Goodbye VSCode, hello Emacs (again)]]. ~ Bryan Willson Berry
  #Emacs #VSCode #JavaScript
+ [[https://youtu.be/44fb3tI2Cak][Grandes ideas de la Filosofía: Lógica]]. #Lógica
+ [[http://ceur-ws.org/Vol-2194/schmid.pdf][Inductive programming as approach to comprehensible machine learning]]. ~ Ute
  Schmid #ILP #MachineLearnig
+ [[http://metatheorem.org/includes/pubs/GraMSec18.pdf][On linear logic, functional programming, and attack trees]]. ~ Harley
  Eades III, Jiaming Jiang, and Aubrey Bryant #Haskell
+ [[https://github.com/MonoidalAttackTrees/ATLL-Formalization][The formalization of the semantics of the attack tree linear logic]]. ~
  Harley D. Eades III #Agda
+ [[http://iltp.de/ARQNL-2018/download/ARQNL2018_CEUR_Proceedings.pdf][Automated reasoning in quantified non-classical logics]]. #AutomatedReasoning
+ [[http://ceur-ws.org/Vol-2095/invited1.pdf ][Implementations of natural logics]]. ~ Lawrence S. Moss #Logic #Sage
+ [[http://ceur-ws.org/Vol-2095/invited2.pdf][Some thoughts about FOL-translations in Vampire]]. ~ Giles Reger
  #AutomatedTheoremProving #Vampire
+ [[https://hexagoxel.de/postsforpublish/posts/2018-09-09-cont-part-one.html][Forking and ContT]]. ~ Lennart Spitzner #FunctionalProgramming #Haskell
+ [[http://davidchristiansen.dk/tutorials/nbe/][Checking dependent types with normalization by evaluation: a
  tutorial]]. ~ David Thrane Christiansen #FunctionalProgramming #Racket
+ [[https://www.theverge.com/platform/amp/2018/9/5/17822562/google-dataset-search-service-scholar-scientific-journal-open-data-access][Google launches new search engine to help scientists find the datasets
  they need]]. ~ James Vincent #DataScience
+ [[http://willcrichton.net/notes/systems-programming/][What is systems programming, really?]] ~ Will Crichton
  #Programming
+ [[https://www.glc.us.es/~jalonso/vestigium/hammer-for-coq-automation-for-dependent-type-theory/][Vestigium: Hammer for Coq (automation for dependent type theory)]]. #ITP #Coq
+ [[https://arxiv.org/pdf/1809.02193][Logical rule induction and theory learning using neural theorem proving]]. 
  ~ A. Campero et als. #MachineLearnig #AutomatedTheoremProving
+ [[https://mmhaskell.com/blog/2018/8/27/common-but-not-so-common-monads][Common (but not so common) monads]]. ~ James Bowen
  #FunctionalProgramming #Haskell
+ [[https://bitbucket.org/robertmassaioli/range][range: An efficient and versatile range library]]. ~ Robert Massaioli
  #FunctionalProgramming #Haskell
+ [[http://cl-informatik.uibk.ac.at/teaching/ss18/satsmt/content.php][Course: SAT/SMT solving]]. ~ S. Winkler #Logic #ATP #SAT #SMT
+ [[http://cl-informatik.uibk.ac.at/users/mfaerber/documents/thesis.pdf][Learning proof search in proof assistants]]. ~ M. Färber #PhD_Thesis
  #ITP #ATP #MachineLearning
+ [[http://cl-informatik.uibk.ac.at/workspace/publications/JN_phdthesis_17.pdf][Mechanizing confluence: Automated and certified analysis of first- and
  higher-order rewrite systems]]. ~ J. Nagele #PhD_Thesis #ITP #IsabelleHOL
+ [[https://upcommons.upc.edu/bitstream/handle/2117/120914/134218.pdf][Automatic inductive equational reasoning]]. ~ J. Mas Rovira #Haskell
  #Logic #ATP
+ [[http://cl-informatik.uibk.ac.at/cek/docs/18/jpck-itp18.pdf][Towards formal foundations for game theory]]. ~ J. Parsert and
  C. Kaliszyk. #ITP #IsabelleHOL #Math
+ [[https://cah6.github.io/technology/nix-haskell-1/][Exploring Nix & Haskell (Part 1: project setup)]]. ~ Christian Henry
  #FunctionalProgramming #Haskell #Nix
+ [[http://ceur-ws.org/Vol-2199/paper3.pdf][Towards Coq formalisation of {log} set constraints resolution]]. ~
  C. Dubois and S. Weppe. #ITP #Coq
+ [[https://research.chalmers.se/publication/504640/file/504640_Fulltext.pdf][Automated theorem proving with extensions of first-order logic]]. ~
  E. Kotelnikov #PhD_Thesis #ATP #Vampire #Logic
+ [[https://scholarsbank.uoregon.edu/xmlui/bitstream/handle/1794/23832/Sullivan_oregon_0171N_12267.pdf][The essence of codata and its implementations]]. ~ Z. Sullivan
  #MsC_Thesis #Haskell
+ [[https://rodrigogribeiro.github.io/files/regexvm-paper.pdf][Towards certified virtual machine-based regular expression parsing]]. ~
  T.A. Delfino and R. Ribeiro. #FunctionalProgramming
  #Haskell #QuickCheck
+ [[https://github.com/rodrigogribeiro/regexvm][An operational semantics for greedy regular expression parsing]]. ~
  R. Ribeiro. #FunctionalProgramming #Haskell
  #QuickCheck #ITP #Coq
+ [[https://github.com/rodrigogribeiro/coqcourse/raw/master/slides/01_propositionsastypes.pdf][O isomorfismo de Curry-Howard (Ou sobre a similaridade entre provas e
  programas)]]. ~ R. Ribeiro. #Logic #CompSci
+ [[https://github.com/rodrigogribeiro/coqcourse][Curso: Uma introdução ao assistente de provas Coq]]. ~ R. Ribeiro. #ITP #Coq
  #Logic
+ [[https://rodrigogribeiro.github.io/talks/2014-04-01-agda-talk][Programação
  com tipos dependentes em Agda]]. ~ R. Ribeiro. #FunctionalProgramming #Agda
+ [[https://github.com/rodrigogribeiro/agda-software-foundations][A translation of Pierce's Coq book "Software foundations" to Agda]]. ~
  R. Ribeiro. #ITP #Agda
+ [[http://cl-informatik.uibk.ac.at/cek/docs/17/tgck-jsc17.pdf][Aligning concepts across proof assistant libraries]]. T. Gauthier and
  C. Kaliszyk. #ITP #MachineLearning
+ [[http://rodrigogribeiro.github.io/files/unify.pdf][A mechanized textbook proof of a type unification algorithm]]. ~
  R. Ribeiro and C. Camarão. #ITP #Coq
+ [[https://github.com/josephcmac/Folklore-and-miscellaneous-results-in-number-theory][Formal verification of folklore and miscellaneous results in number
  theory]]. ~ José Manuel Rodríguez Caballero #ITP #IsabelleHOL #Math
+ [[https://cacm.acm.org/news/231002-darpa-announces-2-billion-in-funding-for-ai-next-campaign/fulltext][DARPA announces $2 billion in funding for 'AI next' campaign]]. #AI
+ [[https://kenta.blogspot.com/2018/09/rufudqzr-verifying-compositeness-of.html][Verifying the compositeness of the 20th Fermat number]]. ~ Ken T
  Takusagawa. #Math #CompSci
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell/releases/download/v.9.8.1/Examenes_de_PF_con_Haskell.pdf][Libro de exámenes de programación funcional con Haskell (versión del
  13 de septiembre de 2018)]]. #ProgramacionFuncional #Haskell #I1M2017
+ [[https://prateekvjoshi.com/2014/10/25/a-beginners-look-at-lambda-calculus/][A beginner’s look at lambda calculus]]. ~ Prateek Joshi
  #LambdaCalculus
+ [[https://blog.wuct.me/fun-with-typed-type-level-programming-in-purescript-5f8af42cfec5][Fun with typed type-level programming in PureScript]]. ~ CT Wu
  #FunctionalProgramming #PureScript
+ [[http://cl-informatik.uibk.ac.at/cek/docs/17/ckkp-macis17.pdf][Isabelle formalization of set theoretic structures and set comprehensions]]. 
  ~ C. Kaliszyk and K. Pąk. #ITP #IsabelleHOL #Math
+ [[https://github.com/zziz/pwc][Papers with code: list of research papers with links to the source code,
  updated weekly]]. ~ Zaur Fataliyev. #MachineLearning
+ [[http://bibliotecadigital.ilce.edu.mx/Colecciones/ReinaCiencias/_docs/Introduccion_filosofia_ciencia.pdf][Una introducción a la filosofía de la ciencia]]. ~ R. Carnap #Filosofía
  #Ciencia 
+ [[http://bibliotecadigital.ilce.edu.mx/Colecciones/ReinaCiencias/_docs/rudolfcarnapylosfundamentos.pdf][Rudolf Carnap y los fundamentos de la lógica y las matemáticas]]. ~
  A. Church. #Filosofía #Ciencia
+ [[http://www.thibaultgauthier.fr/tactictoe_jv.pdf][TacticToe: Learning to prove with tactics]]. ~ T. Gauthier et als. #ITP
  #HOL4 #MachineLearning
+ [[https://medium.com/@cdsmithus/the-ups-and-downs-of-stem-standards-f72df0fb6daa][The ups and downs of STEM standards]]. ~ Chris Smith
  #Teaching #CompSci
+ [[https://dr.library.brocku.ca/bitstream/handle/10464/13646/Thesis%20Paper%2020180904.pdf][Modal and relevance logics for qualitative spatial reasoning]]. ~ Pranab
  Kumar Ghosh. #Msc_Thesis #ITP #Coq #Logic
+ [[http://marmsoler.com/docs/Interactive_Verification_ADP.pdf][A framework for interactive verification of architectural design patterns in
  Isabelle/HOL]]. ~ D. Marmsoler. #ITP #IsabelleHOL
+ [[http://jssst.or.jp/files/user/taikai/2018/PPL/ppl2-2.pdf][Experimenting with monadic equational reasoning in Coq]]. ~ R. Affeldt
  and D. Nowak. #ITP #Coq
+ [[http://jssst.or.jp/files/user/taikai/2018/PPL/ppl3-3.pdf][Proving tree algorithms for succinct data structures]]. ~ R. Affeldt,
  J. Garrigue, X. Qi, Kazunari Tanaka. #ITP #Coq #Vestigium
+ [[http://www.haskellforall.com/2014/03/introductions-to-advanced-haskell-topics.html][Introductions to advanced Haskell topics]]. ~
  G. Gonzalez. #FunctionalProgramming #Haskell
+ [[http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html][You could have invented Monads! (and maybe you already have)]]. ~ Dan
  Piponi #FunctionalProgramming #Haskell
+ [[https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/monad-transformers-step-by-step.pdf][Monad transformers step by step]]. ~ Martin Grabmüller. #FunctionalProgramming 
  #Haskell
+ [[http://www.cs.nott.ac.uk/~pszgmh/pearl.pdf][Functional pearls: Monadic parsing in Haskell]]. ~ G. Hutton,
  E. Meijer. #FunctionalProgramming #Haskell
+ [[http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html][Why free monads matter]]. ~ G. Gonzalez. #FunctionalProgramming 
  #Haskell
+ [[https://web.cecs.pdx.edu/~mpj/pubs/springschool95.pdf][Functional programming with overloading and higher-order
  polymorphism]]. M.P. Jones. #FunctionalProgramming #Haskell
+ [[https://www.glc.us.es/~jalonso/vestigium/concrete-semantics-with-coq-and-coqhammer][Vestigium: "Concrete semantics" with Coq and CoqHammer]]. #ITP #Coq
  #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Octonions.html][Octonions in Isabelle/HOL]]. ~ Angeliki Koutsoukou-Argyraki. #ITP
  #IsabelleHOL #Math 
+ [[https://twanvl.nl/blog/haskell/cps-functional-references][CPS based functional references]]. ~ Twan van Laarhoven
  #FunctionalProgramming #Haskell
+ [[http://matt.might.net/articles/compiling-up-to-lambda-calculus/][Compiling to lambda-calculus: Turtles all the way down]]. ~ Matt
  Might. #FunctionalProgramming #LambdaCalculus
+ [[https://www.gaussianos.com/extensa-coleccion-de-libros-de-matematicas/][Extensa colección de libros de matemáticas]]. ~ M.A. Morales. #Matemáticas
+ [[http://www.e-booksdirectory.com/mathematics.php][Free mathematics books]]. #eBooks #Math
+ [[https://www.gaussianos.com/diez-formas-de-pensar-como-un-matematico/][Diez formas de pensar como un matemático]]. ~ M.A. Morales. #Matemáticas
+ [[https://www.glc.us.es/~jalonso/vestigium/resena-formal-verification-of-a-geometry-algorithm-a-quest-for-abstract-views-and-symmetry-in-coq-proofs][Vestigium: Formal verification of a geometry algorithm (A quest for abstract
  views and symmetry in Coq proofs)]]. #ITP #Coq #Math
+ [[https://www.isa-afp.org/entries/Aggregation_Algebras.html][Aggregation algebras in Isabelle/HOL]]. ~ Walter Guttmann. #ITP
  #IsabelleHOL #Math
+ [[https://medium.com/@cdsmithus/codeworld-update-september-17-2018-5db971ca03df][CodeWorld update — September 17, 2018]]. ~ Chris Smith
  #FunctionalProgramming #haskell #CodeWorld
+ [[https://www.mattkeeter.com/projects/constraints][Numeric constraint solving in Haskell]]. ~ Matt Keeter. #FunctionalProgramming
  #Haskell
+ [[https://www-sop.inria.fr/members/Yves.Bertot/videos-coq/index.html][Cours vidéo de Coq]]. ~ Y. Bertot. #ITP #Coq
+ [[https://www.glc.us.es/~jalonso/vestigium/resena-proving-tree-algorithms-for-succinct-data-structures][Vestigium: Proving tree algorithms for succinct data structures]]. #ITP
  #Coq
+ [[https://github.com/jaycech3n/Isabelle-HoTT][Isabelle/HoTT: An experimental implementation of HoTT in the
  interactive theorem prover Isabelle]]. ~ Josh Chen. #ITP
  #Isabelle #IsabelleHoTT
+ [[https://staff.aist.go.jp/reynald.affeldt/documents/coqws-reals.pdf][Classical analysis with Coq]]. ~ R. Affeldt, C. Cohen, A. Mahboubi,
  D. Rouhling, P.Y. Strub. #ITP #Coq #Math
+ [[https://perso.crans.org/cohen/CoqWS2018.pdf][Classical analysis with Coq (Slides)]]. ~ R. Affeldt, C. Cohen,
  A. Mahboubi, D. Rouhling, P.Y. Strub. #ITP #Coq #Math
+ [[https://coqworkshop2018.inria.fr/files/2018/08/180708-coq-workshop.pdf][Verifying distributed systems (slides)]]. ~ Zachary Tatlock. #ITP #Coq
+ [[https://homes.cs.washington.edu/~ztatlock/pubs/diesel-sergey-popl18.pdf][Programming and proving with distributed protocols]]. ~ I. Sergey, J.R. Wilcox, Z. Tatlock. #ITP #Coq 
+ [[https://coqworkshop2018.inria.fr/files/2018/07/main-34.pdf][A Coq mechanised formal semantics for real life SQL queries: Formally
  reconciling SQL and (extended) relational algebra (slides)]]. ~
  Véronique Benzaken and Évelyne Contejean. #ITP #Coq
+ [[https://hal.archives-ouvertes.fr/hal-01830255/document][A Coq mechanised formal semantics for realistic SQL queries: Formally
  reconciling SQL and bag relational algebra]]. ~ V. Benzaken,
  É. Contejean #ITP #Coq
+ [[https://homes.cs.washington.edu/~ztatlock/pubs/reincarnate-nandi-icfp18.pdf][Functional programming for compiling and decompiling computer-aided design]]. ~
  C. Nandi, J.R. Wilcox, P. Panchekha, T. Blau, D. Grossman,
  Z. Tatlock. #FunctionalProgramming #OCaml
+ [[http://gallium.inria.fr/~agueneau/publis/gueneau-chargueraud-pottier-coq-bigO.pdf][A fistful of dollars: Formalizing asymptotic complexity claims via
  deductive program verification]]. ~ A. Guéneau, A. Charguéraud,
  F. Pottier. #ITP #Coq
+ [[https://coqworkshop2018.inria.fr/files/2018/07/slides-3.pdf][Procrastination: A proof engineering technique (slides)]]. ~
  A. Guéneau. #ITP #Coq
+ [[https://www.cs.nmsu.edu/wp/wp-content/uploads/2014/10/TR-CS-NMSU-2014-10-24.pdf][Exploring life through logic programming: Logic programming in
  bioinformatics]]. ~ A. Dal Palù, A. Dovier, A. Formisano,
  E. Pontelli. #LogicProgramming #ASP #Bioinformatics
+ [[http://thomaspietrzak.com/download.php?f=CoursCOQ.pdf][Introduction to Coq (slides)]]. ~ T. Pietrzak. #ITP #Coq #Logic
+ [[https://github.com/affeldt/coq-lille2016/raw/master/logique-cours.pdf][Le raisonnement logique dans l’assistant de preuve Coq]]. ~ R. Affeldt
  #ITP #Coq #Logic
+ [[https://coqworkshop2018.inria.fr/files/2018/07/coq2018_talk_boulme.pdf][What is the foreign function interface of the Coq programming
  language? (slides)]]. ~ S. Boulmé. #ITP #Coq
+ [[https://coqworkshop2018.inria.fr/files/2018/07/yalla_web.pdf][Preliminary report on the Yalla library: Yet Another deep embedding of
  linear logic in Coq (slides)]]. ~ O. Laurent. #ITP #Coq #Logic
+ [[https://coqworkshop2018.inria.fr/files/2018/07/main-35.pdf][ComplCoq: Rewrite Hint construction with completion procedures (slides)]]. ~
  M. Ikebuchi, K. Nakano. #ITP #Coq
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_862.pdf][ComplCoq: Rewrite Hint construction with completion procedures]]. ~
  M. Ikebuchi, K. Nakano. #ITP #Coq
+ [[https://coqworkshop2018.inria.fr/files/2018/07/slides-4.pdf][From guarded to well-founded: Formalizing Coq’s guard condition
  (slides)]]. ~ C. Mangin, M. Sozeau. #ITP #Coq
+ [[https://arxiv.org/pdf/1809.05923][What is applied category theory?]] ~ Tai-Danae Bradley. #CategoryTheory
+ [[https://code.fb.com/security/fighting-spam-with-haskell/][Fighting spam with Haskell]]. ~ Simon Marlow
  #FunctionalProgramming #Haskell
+ [[https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html][Personal website in org]]. ~ Thibault Marin. #Emacs #OrgMode
+ [[https://theoremprover-museum.github.io][The Theorem Prover Museum]]. #ATP #ITP #AutomatedReasoning
+ [[https://www.isa-afp.org/entries/Signature_Groebner.html][Signature-based Gröbner basis algorithms]]. ~ A. Maletzky. #ITP
  #IsabelleHOL #Math
+ [[https://www.math.nagoya-u.ac.jp/~garrigue/papers/JIP-26_54.pdf][Safe low-level code generation in Coq using monomorphization and
  monadification]]. ~ A. Tanaka, R. Affeldt, and J. Garrigue. #ITP #Coq
+ [[https://hub.packtpub.com/what-makes-functional-programming-a-viable-choice-for-artificial-intelligence-projects][What makes functional programming a viable choice for artificial
  intelligence projects?]] ~ Prasad Ramesh. #FunctionalProgramming #AI
+ [[http://philsci-archive.pitt.edu/15034/1/Univalent_Foundations_and_the_UniMath_library.pdf][Univalent foundations and the UniMath library (The architecture of mathematics)]]. ~ A. Bordg. #Logic
  #Math #HoTT #ITP #Coq
+ [[https://twanvl.nl/blog/haskell/simple-reflection-of-expressions][Simple reflection of expressions]]. ~ Twan van Laarhoven #FunctionalProgramming
  #Haskell
+ [[https://www.isa-afp.org/entries/Prime_Number_Theorem.html][The prime number theorem]]. ~ M. Eberl and L.C. Paulson. #ITP #IsabelleHOL #Math
+ [[https://doisinkidney.com/posts/2018-09-20-agda-tips.html][Agda tips]]. ~ Donnacha Oisín Kidney #ITP #Agda
+ [[https://dl.acm.org/citation.cfm?id=3242754][The Thoralf plugin: for your fancy type needs]]. ~ D. Otwani,
  R.A. Eisenberg. #FunctionalProgramming #Haskell #ATP #SMT #Z3
+ [[https://github.com/Divesh-Otwani/the-thoralf-plugin][the-thoralf-plugin: a type-checker plugin to rule all type checker
  plugins involving type-equality reasoning using SMT solvers]]. ~ Divesh
  Otwani. #FunctionalProgramming #Haskell #ATP #SMT #Z3
+ [[https://sras.me/haskell/what-the-heck-is-typeable.html][What the heck is Typeable!?]]. ~ Sandeep.C.R #FunctionalProgramming
  #Haskell
+ [[https://github.com/snowleopard/alga][Alga: a library for algebraic construction and manipulation of graphs in
  Haskell]]. ~ Andrey Mokhov. #Haskell
+ [[https://mmhaskell.com/blog/2018/9/17/simple-web-routing-with-spock][Simple Web Routing with Spock!]]. ~ James Bowen #FunctionalProgramming #Haskell
+ [[https://www.westpoint.edu/eecs/SiteAssets/SitePages/Faculty%20Publication%20Documents/Okasaki/jfp98sixth.pdf][Functional pearls: Even higher-order functions for parsing or why
  would anyone ever want to use a sixth-order function?]]. ~ Chris
  Okasaki. #FunctionalProgramming #SML 
+ [[https://bitbucket.org/josh-hs-ko/MetamorphismsInAgda/raw/master/MetamorphismsInAgda.pdf][Programming metamorphic algorithms in Agda (Functional pearl)]]. ~
  Hsiang-Shang Ko. #FunctionalProgramming #ITP #Agda
+ [[https://dl.acm.org/citation.cfm?id=3242745][Generic programming of all kinds]]. ~ A. Serrano, V.C. Miraldo. 
  #FunctionalProgramming #Haskell
+ [[http://www.staff.science.uu.nl/~swier004/publications/2018-tyde.pdf][From algebra to abstract machine: a verified generic construction]]. ~
  C. Tomé Cortiñas, W. Swierstra. #FunctionalProgramming #ITP #Agda
+ [[https://dl.acm.org/citation.cfm?id=3242746][Deriving via (or, how to turn hand-written instances into an anti-pattern)]]. ~
  B. Blöndal, A. Löh, R. Scott. #FunctionalProgramming #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3241656][Garnishing Parsec with Parsley]]. ~ J. Willis,  N. Wu. #FunctionalProgramming
  #Scala
+ [[https://xenaproject.wordpress.com/2018/09/22/formalising-mathematics-a-mathematicians-personal-viewpoint][Formalising mathematics: a mathematician’s personal viewpoint]]. ~ Kevin
  Buzzard #ITP #Lean #Math
+ [[https://dl.acm.org/citation.cfm?id=3264739][HELIX: a case study of a formal verification of high performance program
  generation]]. ~ V. Zaliva, F. Franchetti. #ITP #Coq
+ [[https://arxiv.org/pdf/1809.08062][Machine-assisted proofs (ICM 2018 Panel)]]. ~ J. Davenport et als. #ITP
  #Math
+ [[https://dl.acm.org/citation.cfm?id=3242752][Coherent explicit dictionary application for Haskell]]. ~ T. Winant,
  D. Devriese. #FunctionalProgramming #Haskell
+ [[https://www.maa.org/sites/default/files/images/images/upload_library/22/Ford/Guy697-712.pdf][The strong law of small numbers]]. ~ R.K. Guy. #Math
+ [[http://shmish111.github.io/2018/09/23/freer-than-free/][Freer than free]]. ~ David Smith. #FunctionalProgramming #Haskell
+ [[https://github.com/typeclasses/assoc-list][assoc-list: An association list conceptually signifies a mapping, but is
  represented as a list (of key-value pairs)]]. ~ Chris
  Martin. #FunctionalProgramming #Haskell
+ [[https://tel.archives-ouvertes.fr/tel-01874620/document][Certified algorithms for program slicing]]. J.C. Léchenet. #PhD_Thesis
  #ITP #Coq #Why3
+ [[https://arxiv.org/pdf/1809.08304][onlineSPARC: a programming environment for Answer Set Programming]]. ~
  E. Marcopoulos, Y. Zhang. #LogicProgramming #ASP
+ [[https://plato.stanford.edu/entries/turing-machine]["Turing machines", The Stanford Encyclopedia of Philosophy]]. ~ Liesbeth
  De Mol. #CompSci
+ [[https://rmonat.fr/data/pubs/2018/fmcad18.pdf][A verified certificate checker for finite-precision error bounds in
  Coq and HOL4]]. ~ H. Becker et als. #ITP #Coq #HOL4
+ [[https://kowainik.github.io/posts/2018-09-25-co-log][co-log: Composable contravariant combinatorial comonadic configurable
  convenient logging]]. ~ Dmitrii Kovanikov #FunctionalProgramming
  #Haskell
+ [[https://arxiv.org/pdf/1809.09550][A revised and verified proof of the Scalable Commutativity Rule]]. ~ L. Tsai,
  E. Kohler, M.F. Kaashoek, N. Zeldovich. #ITP #Coq
+ [[http://staffwww.dcs.shef.ac.uk/people/G.Struth/mgs2015/ISA.html][Course: Building verification tools with Isabelle]]. ~ Georg Struth. #ITP
  #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Symmetric_Polynomials.html][Symmetric polynomials in Isabelle/HOL]]. ~ Manuel Eberl. #ITP
  #IsabelleHOL #Math
+ [[https://jjoekoullas.github.io/posts/2018-09-22-type-tetris-toolbox.html][The Type Tetris Toolbox]]. ~ J.J. Koullas #FunctionalProgramming
  #Haskell
+ [[https://rjlipton.wordpress.com/2018/09/26/reading-into-atiyahs-proof/][Reading into Atiyah’s proof]]. ~ R.J. Lipton, K.W. Regan. #Math
+ [[https://skemman.is/bitstream/1946/28736/1/msc-bjarki-2017-skemman.pdf][Formalizing the translation method in Agda]]. ~ Bjarki Ágúst Guðmundsson. #ITP
  #Agda
+ [[https://github.com/SuprDewd/agda-translation-method][Translate: An Agda library for turning equations into bijections using the
  translation method]]. ~ Bjarki Ágúst Guðmundsson. #ITP #Agda
+ [[https://wiki.algo.is][AlgoWiki: a wiki dedicated to competitive programming]]. ~ Bjarki Ágúst
  Guðmundsson. #Programming #Algorithms
+ [[http://dev.stephendiehl.com/rewrite.pdf][Rewrite combinators]]. ~ Stephen Diehl. #FunctionalProgramming 
  #Haskell
+ [[https://github.com/cohomolo-gy/haskell-resources][A list of foundational Haskell papers]]. ~ Emily Pillmore
  #FunctionalProgramming #Haskell
+ [[https://engineering.itpro.tv/2018/09/28/haskell-in-production-a-ghc-upgrade-success-story/][Haskell in production: A GHC upgrade success story]]. ~ Trevis
  Elser. #FunctionalProgramming #Haskell
+ [[https://owickstrom.github.io/komposition/][Komposition: The video editor built for screencasters]]. ~ Oskar
  Wickström. #Haskell
+ [[https://github.com/SuprDewd/T-414-AFLV][T-414-ÁFLV: A competitive programming course]]. ~ Bjarki Ágúst
  Guðmundsson. #Programming #Algorithms
+ [[https://aperiodical.com/2018/09/atiyah-riemann-hypothesis-proof-final-thoughts/][Atiyah Riemann Hypothesis proof: final thoughts]]. ~ K. Steckles,
  C. Lawson-Perfect. #Math
+ [[http://orbit.dtu.dk/files/153818480/paper_9.pdf][Formalization of first-order syntactic unification]]. ~ K.F. Brandt,
  A. Schlichtkrull, J. Villadsen. #ITP #IsabelleHOL
+ [[https://chrispenner.ca/posts/mock-effects-with-data-kinds][Mocking effects using constraints and phantom data kinds]]. ~ Chris
  Penner. #FunctionalProgramming #Haskell
+ [[http://blog.poisson.chat/posts/2018-09-29-overloaded-families.html][Overloaded type families]]. ~ Xia Li-yao #FunctionalProgramming #Haskell
+ [[http://www.cs.us.es/~fsancho/?e=207][Metaheurísticas de búsquedas y optimización (Parte 1)]]. ~
  F. Sancho. #Algoritmos #IA
+ [[http://www.cs.us.es/~fsancho/?e=208][Metaheurísticas de búsquedas y optimización (Parte 2)]]. ~
  F. Sancho. #Algoritmos #IA
+ [[https://ts.data61.csiro.au/publications/csiro_full_text//Klein_AKMHF_toappear.pdf][Formally verified software in the real world]]. ~ G. Klein et
  als. #FormalVerification #ITP #IsabelleHOL
+ [[https://enlightened-digital.com/90-years-of-ai-in-the-movies-whats-changed-and-what-hasnt/][90 Years of AI in the movies: what’s changed (and what hasn’t)]]. #AI
+ [[https://enlightened-digital.com/ai-goes-to-the-movies-a-history-of-artificial-intelligence-in-film/][AI goes to the movies: A history of Artificial Intelligence in film]]. #AI
+ [[https://towardsdatascience.com/essential-math-for-data-science-why-and-how-e88271367fbd][Essential Math for Data Science: 'Why' and 'How']]. ~ Tirthajyoti Sarkar
  #DataScience

* Octubre 2018

+ [[https://dl.acm.org/citation.cfm?id=3241787][From algebra to abstract machine: a verified generic construction]]. ~
  C. Tomé Cortiñas, W. Swierstra. #FunctionalProgramming #ITP #Agda
+ [[http://ctp.di.fct.unl.pt/~btoninho/depk_draft.pdf][Refinement kinds (A theory of type-safe meta-programming)]]. ~
  L. Caires, B. Toninho. #FunctionalProgramming #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3242766][Typing the wild in Erlang]]. ~ N. Valliappan, J. Hughes. #FunctionalProgramming
  #Erlang
+ [[https://arxiv.org/abs/1809.10756][An introduction to probabilistic programming]]. ~ J.W. van de Meent, B. Paige,
  H. Yang, F. Wood. #FunctionalProgramming #Lisp #Clojure #FOPPL
+ [[https://gitlab.com/jgkamat/rmsbolt][RMSbolt: A supercharged implementation of the godbolt compiler-explorer for
  Emacs]]. ~ Jay Kamat. #Programming #Emacs
+ [[https://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-septiembre-de-2018/][Resumen de lecturas compartidas durante septiembre de 2018]].
+ [[https://www.isa-afp.org/entries/Pi_Transcendental.html][The transcendence of π in Isabelle/HOL]]. ~ M. Eberl. #ITP #isabelleHOL
  #Math
+ [[http://orbit.dtu.dk/files/154035749/paper7.pdf][Proving in the Isabelle proof assistant that the set of real numbers
  is not countable]]. ~ J. Villadsen. #ITP #isabelleHOL #Math
+ [[http://orbit.dtu.dk/files/154035393/paper6.pdf][Students' Proof Assistant (SPA)]]. ~ A. Schlichtkrull, J. Villadsen,
  A.H. From. #ITP #IsabelleHOL #Logic
+ [[https://blog.jle.im/entry/introduction-to-singletons-3.html][Introduction to Singletons (Part 3)]]. ~ Justin Le. #Haskell 
+ [[https://alasconnect.github.io/blog/posts/2018-10-02-introducing-haskell-to-a-company.html][Introducing Haskell to a company]]. ~ Brian Jones.  #FunctionalProgramming
  #Haskell
+ [[http://matryoshka.gforge.inria.fr/pubs/schlichtkrull_phd_thesis.pdf][Formalization of logic in the Isabelle proof assistant]]. ~
  A. Schlichtkrull. #PhD_Thesis #ITP #IsabelleHOL #Logic
+ [[https://annals-csis.org/proceedings/2018/drp/pdf/88.pdf][Representation matters: An unexpected property of polynomial rings and its
  consequences for formalizing abstract field theory]]. ~ C. Schwarzweller. #ITP
  #Mizar #Math
+ [[https://arxiv.org/pdf/1810.01109][AI benchmark: Running deep neural networks on Android smartphones]]. ~
  A. Ignatov et als. #AI #DeepLearning
+ [[http://prl.korea.ac.kr/~pronto/home/papers/oopsla18-fixml.pdf][Automatic diagnosis and correction of logical errors for functional
  programming assignments]]. ~ J. Lee et als. #FunctionalProgramming
  #OCaml 
+ [[https://repository.upenn.edu/edissertations/2879/][Random testing for language design]]. ~ L. Lampropoulos. #PhD_Thesis
  #ITP #Coq #QuickChick
+ [[https://alasconnect.github.io/blog/posts/2018-10-04-productive-haskell-in-enterprise.html][Productive Haskell in enterprise]]. ~ Brian Jones. #FunctionalProgramming 
  #Haskell
+ [[https://blog.nyarlathotep.one/2018/09/rewrite-rules-and-a-specific-fold/][Rewrite rules and a specific fold: use optimization techniques from
  GHC.Base]]. ~ Alexandre Moine. #FunctionalProgramming #Haskell
+ [[https://github.com/soupi/haskell-study-plan][Haskell study plan (an opinionated list of resources for learning Haskell)]]. ~
  Gil Mizrahi. #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1810.00445][An application of ASP theories of intentions to understanding
  restaurant scenarios: insights and narrative corpus]]. ~ Q. Zhang,
  C. Benton, D. Inclezan. #LogicProgramming #ASP
+ [[https://arxiv.org/pdf/1810.00453][anthem: Transforming gringo programs into first-order theories
  (preliminary report)]]. ~ V. Lifschitz, P. Lühne,
  T. Schaub. #LogicProgramming #ASP #ATP
+ [[https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/][A review of the Lean theorem prover]]. ~ Thomas Hales. #ITP #LeanTheoremProver
+ [[https://madiot.fr/coq100/][Formalizing 100 theorems in Coq]]. #ITP #Coq #Math
+ [[https://www.tweag.io/posts/2018-10-04-capability.html][capability: the ReaderT pattern without boilerplate]]. ~ A. Herrmann,
  A. Spiwack. #FunctionalProgramming #Haskell
+ [[https://github.com/erkmos/haskell-companies][A gently curated list of companies using Haskell in industry]]. 
  ~ Erik Mossberg #FunctionalProgramming #Haskell
+ [[https://www.fpcomplete.com/blog/2012/09/ten-things-you-should-know-about-haskell-syntax][Ten things you should know about Haskell syntax]]. ~ Bartosz Milewski 
  #FunctionalProgramming #Haskell
+ [[https://www.makeuseof.com/tag/python-programming-language-downsides/][4 reasons why Python isn’t the programming language for you]]. ~ Ian Buckley 
  #Programming #Python
+ [[https://xenaproject.wordpress.com/2018/10/07/what-is-the-xena-project/][What is the Xena Project?]] ~ Kevin Buzzard #ITP #LeanTheoremProver #Math
+ [[https://byorgey.wordpress.com/2018/10/06/counting-inversions-with-monoidal-sparks/][Counting inversions with monoidal sparks]]. ~ Brent Yorgey
  #FunctionalProgramming #Haskell #Math
+ [[http://www.parsonsmatt.org/2018/10/02/small_types.html][Keep your types small ... and your bugs smaller]]. ~ Matt
  Parsons. #FunctionalProgramming #Haskell
+ [[http://daniberg.com/2018/10/02/monads-for-fp-in-scala.html][Monads for functional programming in Scala]]. ~ Daniel Berg
  #FunctionalProgramming #Scala
+ [[http://downloads.hindawi.com/journals/mpe/2018/4982974.pdf][A new algebraic approach to decision making in a railway interlocking
  system based on preprocess]]. ~ A. Hernando, R. Maestre,
  E. Roanes-Lozano. #Math #CompSci
+ [[https://mml-book.com][Companion webpage to the book "Mathematics for Machine Learning"]]. ~
  Marc Peter Deisenroth, A Aldo Faisal, and Cheng Soon Ong. #eBook
  #MachineLearning #Math
+ [[http://www.haskellforall.com/2018/10/detailed-walkthrough-for-beginner.html][Detailed walkthrough for a beginner Haskell program]]. ~
  G. Gonzalez. #FunctionalProgramming #Haskell
+ [[https://lptk.github.io/programming/2018/10/04/comprehending-monoids-with-class.html][Comprehending Monoids with Class]]. ~ Lionel Parreaux
  #FunctionalProgramming #Haskell
+ [[https://mmhaskell.com/blog/2018/10/8/deeper-stack-knowledge][Deeper Stack knowledge]]. ~ James Bowen. #FunctionalProgramming #Haskell
+ [[http://www.newthinktank.com/2015/08/learn-haskell-one-video/][Learn Haskell in one video]]. ~ Derek Banas. 
  #FunctionalProgramming #Haskell
+ [[http://www.philipzucker.com/division-of-polynomials-in-haskell][Division of polynomials in Haskell]]. ~ Philip Zucker. 
  #FunctionalProgramming #Haskell #Math 
+ [[https://arxiv.org/abs/1810.02688][Wikistat 2.0: Educational resources for Artificial Intelligence]]. ~
  P. Besse, B. Guillouet, B. Laurent #AI
+ [[https://github.com/wikistat/][Wikistat 2.0: Tutoriels (calepins jupyter) d'auto-apprentissage en
  Science des Données & Intelligence artificielle]]. #DataScience #AI
+ [[http://scholar.rose-hulman.edu/cgi/viewcontent.cgi?article=1217&context=rhumj][Fractals and the Weierstrass-Mandelbrot function]]. ~ A. Zaleski #Math
+ [[http://www.ijpe-online.com/attachments/article/1515/02-IJPE-09-02.pdf][Formal verification of helicopter automatic landing control algorithm in
  theorem prover Coq]]. ~ X. Chen, G. Chen. #ITP #Coq
+ [[https://www.mpg.is/papers/gissurarson2018suggesting-msc.pdf][Suggesting valid hole fits for typed-holes in Haskell]]. ~ Matthías Páll
  Gissurarson. #Msc_Thesis #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1810.02142][Propositional logic with short-circuit evaluation: a non-commutative
  and a commutative variant]]. ~ J.A. Bergstra, A. Ponse,
  D.J.C. Staudt. #Logic #ATP #Prover9
+ [[https://whatthefunctional.wordpress.com/2018/10/10/making-a-haskell-interface-for-the-rosie-pattern-language/][Making a Haskell interface for the Rosie Pattern Language]]. ~ Laurence
  Emms. #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1810.04314][The fundamental theorem of algebra in ACL2]]. ~ R. Gamboa,
  J. Cowles. #ITP #ACL2 #Math
+ [[https://arxiv.org/pdf/1810.04312][Using ACL2 in the design of efficient, verifiable data structures for
  high-assurance systems]]. ~ D. Hardin, K. Slind. #ITP #ACL2
+ [[https://samcgardner.github.io/2018/10/06/linear-regression-in-haskell.html][An introduction to linear regression using Haskell]]. ~ Sam Gardner. 
  #FunctionalProgramming #Haskell
+ [[https://andrewgelman.com/2018/10/11/functional-programming-languages-popular-programming-languages-community/][Why are functional programming languages so popular in the programming
  languages community?]] #FunctionalProgramming
+ [[https://mitpress.mit.edu/books/art-prolog-second-edition][The art of Prolog, second edition (Advanced programming techniques)]]. ~
  L.S. Sterling, E.Y. Shapiro. #Open #eBook #LogicProgramming #Prolog
+ [[https://arxiv.org/pdf/1810.04315][Real vector spaces and the Cauchy-Schwarz inequality in ACL2(r)]]. ~
  C. Kwan, M.R. Greenstreet. #ITP #ACL2 #Math
+ [[https://www.ideals.illinois.edu/bitstream/handle/2142/100116/K-semantics-tech-report.pdf][IsaK: a complete semantics of K]]. ~ L. Li, E.L. Gunter. #ITP
  #IsabelleHOL
+ [[https://haskanything.com][Hask Anything!: a website aimed at collecting and organizing the
  collective knowledge of the Haskell community]]. #FunctionalProgramming
  #Haskell
+ [[https://wiki.haskell.org/Functional_programming][Functional programming]]. #FunctionalProgramming #Haskell
+ [[https://www.technologyreview.com/s/612263/the-us-military-wants-to-teach-ai-some-basic-common-sense][The US military wants to teach AI some basic common sense]]. ~ Will
  Knight. #AI
+ [[https://joshchen.io/pdfs/implementation-hott-isabelle.pdf][An implementation of Homotopy Type Theory in Isabelle/Pure]]. ~
  J. Chen. #Msc_Thesis #ITP #Isabelle #HoTT
+ [[https://github.com/jaycech3n/Isabelle-HoTT][Isabelle/HoTT: An experimental implementation of HoTT in the
  interactive proof assistant Isabelle]]. J. Chen. #ITP
  #Isabelle #HoTT
+ [[https://eprint.iacr.org/2018/941.pdf][A tutorial introduction to CryptHOL]]. ~ A. Lochbihler,
  S.R. Sefidgar. #ITP #IsabelleHOL #CryptHOL
+ [[https://arxiv.org/pdf/1810.04309][Formalising filesystems in the ACL2 theorem prover: an Application to
  FAT32]]. ~ Mihir Parang Mehta. #ITP #ACL2
+ [[https://www.ahri.net/practical-haskell-programs-from-scratch/][Practical Haskell programs from scratch (a quick and easy guide)]]. 
  #FunctionalProgramming #Haskell
+ [[https://drive.google.com/file/d/1qexG1WABkK56G9XJsw9McRCdPVbGBJBj/view][Headfirst into Haskell]]. ~ Abby Sassel. #FunctionalProgramming 
  #Haskell
+ [[http://ranjitjhala.github.io/static/ctfp-ccs18.pdf][Towards verified, constant-time floating point operations]]. ~
  M. Andrysco et als. #FunctionalProgramming #Haskell #SMT 
+ [[https://jaspervdj.be/posts/2018-09-04-binomial-heaps-101.html][Dependent types in Haskell: Binomial heaps 101 (Who put binary numbers
  in my type system?)]]. ~ Jasper Van der Jeugt. 
  #FunctionalProgramming #Haskell
+ [[https://arxiv.org/pdf/1810.04311][Incremental SAT library integration in ACL2 using abstract stobjs]]. ~
  Sol Swords. #ITP #ACL2 #SAT
+ [[http://blog.ezyang.com/2018/09/hiw18-lets-go-mainstream-with-eta/][#HIW18: Let’s go mainstream with Eta!]]. ~ Rahul
  Muttineni. #FunctionalProgramming #Haskell #Eta
+ [[https://icfp18.sigplan.org/event/hiw-2018-papers-corespec-verifying-ghc-with-hs-to-coq][CoreSpec: Verifying GHC with hs-to-coq]]. ~ Antal Spector-Zabusky et
  als. #FunctionalProgramming #Haskell #ITP #Coq
+ [[https://icfp18.sigplan.org/event/hiw-2018-papers-coercion-quantification][Coercion quantification]]. ~ N. Xie, R.A. Eisenberg. #FunctionalProgramming 
  #Haskell
+ [[https://guide.aelve.com/haskell][Aelve Guide: Wiki for the Haskell ecosystem]]. #Haskell 
+ [[https://github.com/ajlopez/AprendiendoDeepLearning][Enlaces y recursos sobre redes neuronales y deep learning]]. ~ @ajlopez
  #AI #NeuralNetworks #DeepLearning
+ [[https://arxiv.org/pdf/1810.04316][Convex functions in ACL2(r)]]. ~ C. Kwan, M.R. Greenstreet. #ITP #ACL2 #Math
+ [[https://github.com/RKlompUU/SCRIPTWriter][ESCRIPT: a human readable language for programming Bitcoin scripts]]. ~
  Rick Klomp. #FunctionalProgramming #Haskell
+ [[https://github.com/RKlompUU/SCRIPTAnalyser][SCRIPT Analyser: Symbolic verification of Bitcoin's output scripts]]. ~
  Rick Klomp. #FunctionalProgramming #Haskell
+ [[https://medium.com/@cdsmithus/fixpoints-in-haskell-294096a9fc10][Fixpoints in Haskell]]. ~ Chris Smith. #FunctionalProgramming 
  #Haskell
+ [[https://typeclasses.com/javascript/monoidal-folds][A JavaScript WAT and monoidal folds]]. ~ Julie Moronuki
  and Chris Martin. #JavaScript #Haskell
  #FunctionalProgramming
+ [[https://github.com/volhovM/orgstat][Orgstat: a statistics visualizer tool for org-mode]]. ~ Mikhail
  Volkhov. #Haskell #Emacs #OrgMode
+ [[https://github.com/orome/crypto-enigma-hs][A Haskell Enigma machine simulator with rich display and machine state
  details]]. #FunctionalProgramming #Haskell
+ [[https://wiki.haskell.org/index.php?title=Haskell_in_industry][Haskell in industry]]. #FunctionalProgramming #Haskell
+ [[https://openlibra.com/es/book/learn-programming][Learn programming]]. ~ A. Salonen. #eBook #Programming #OpenLibra 
+ [[https://arxiv.org/pdf/1810.05315][Learning to reason (Theorem proving at first order via reinforcement
  learning)]]. ~ Brian Groenke. #Logic #ATP #MachineLearning
+ [[https://twobithistory.org/2018/10/14/lisp.html][How Lisp became God's own programming language]]. ~ Sinclair
  Target. #Programming #Lisp
+ [[https://arxiv.org/pdf/1810.05666][DefunT: A tool for automating termination proofs by using the
  community books]]. ~ Matt Kaufmann. #ITP #ACL2
+ [[https://github.com/MaiaVictor/cedille-core][Cedille-Core: A minimal (600 LOC) programming language capable of proving
  theorems about its own terms]]. #ITP #Logic #FunctionalProgramming #Haskell
+ [[https://github.com/maiavictor/formality][Formality: An efficient programming language and proof assistant]]. #ITP
  #Cedille
+ [[https://github.com/nkarag/haskell-DBFunctor][DBFunctor: Functional data management (type safe ETL/ELT in Haskell)]]. 
  ~ Nikos Karagiannidis. #FunctionalProgramming #Haskell
+ [[https://anthonybonato.com/2018/10/17/problem-solving-vs-proving/][Problem solving vs proving]]. ~ Anthony Bonato #Math 
+ [[https://www.isa-afp.org/entries/Factored_Transition_System_Bounding.html][Upper bounding diameters of state spaces of factored transition
  systems in Isabelle/HOL]]. F. Kurz and M. Abdulaziz. #ITP #IsabelleHOL
+ [[https://github.com/granule-project/granule][Granule: a statically typed functional language with graded modal
  types for fine-grained program reasoning via types]]. ~ Dominic Orchard
  #FunctionalProgramming #Haskell
+ [[http://homepages.inf.ed.ac.uk/wadler/papers/sbmf/sbmf.pdf][Programming language foundations in Agda]]. ~ P. Wadler. #ITP #Agda #Coq
+ [[https://plfa.github.io][Programming language foundations in Agda]]. ~ P. Wadler,
  W. Kokke. #eBook #ITP #Agda #Coq
+ [[http://ilyasergey.net/papers/temporal-isola18.pdf][Temporal properties of smart contracts]]. ~ I. Sergey, A. Kumar,
  A. Hobor. #ITP #Coq
+ [[https://perso.telecom-paristech.fr/bloch/OptionIA/Logics-SymbolicAI.html][Logics and symbolic Artificial Intelligence]]. ~ Isabelle Bloch, Natalia
  Díaz Rodríguez. #AI #Logic
+ [[https://www.isa-afp.org/entries/Randomised_BSTs.html][Randomised binary search trees in Isabelle/HOL]]. ~ M. Eberl #ITP
  #IsabelleHOL
+ [[https://diogocastro.com/blog/2018/10/17/haskells-kind-system-a-primer/][Haskell's kind system (a primer)]]. ~  D. Castro. #Haskell 
+ [[http://blog.ploeh.dk/2018/10/15/an-applicative-password-list][An applicative password list]]. ~ M. Seemann. #FunctionalProgramming #Haskell
+ [[https://chame.co/writeups/sum_and_product/post.html][Sigma, Pi, Sum, Product]]. ~ Samuel Breese. #FunctionalProgramming #Haskell
+ [[https://diginomica.com/2018/06/04/ai-curve-fitting-not-intelligence][AI today and tomorrow is mostly about curve fitting, not intelligence]]. 
  ~ Kurt Marko. #AI #DeepLearning
+ [[https://elpais.com/tecnologia/2018/03/16/actualidad/1521204836_317670.html][Máquinas listas, pero sin sentido común]]. ~ Ramon López de Mántaras. #IA
+ [[http://www.mit.edu/~tomeru/papers/machines_that_think.pdf][Building machines that learn and thinlike people]].  ~ B.M. Lake, T.D. Ullman,
  J.B. Tenenbaum, S.J. Gershman. #AI
+ [[http://binaire.blog.lemonde.fr/2018/10/20/algorithmes-a-la-recherche-de-luniversalite-perdue/][Algorithmes: à la recherche de l’universalité perdue]]. ~ Rachid
  Guerraoui #CompSci
+ [[http://verse.systems/blog/post/2018-10-02-Proofs-And-Side-Effects/][Proofs and side effects (Understanding the promise and the fine print
  of formal methods for security)]]. ~ Toby Murray. #ITP
+ [[https://people.eng.unimelb.edu.au/tobym/papers/secdev2018.pdf][BP: Formal proofs, the fine print and side effects]]. ~ T. Murray,
  P.C. van Oorscho. #ITP
+ [[http://blog.sigfpe.com/2018/10/running-from-past.html][Running from the past]]. ~ Dan Piponi. #FunctionalProgramming
  #Haskell
+ [[https://blog.plover.com/prog/haskell/traversable.html][Mark Dominus: I struggle to understand Traversable]]. #FunctionalProgramming 
  #Haskell
+ [[https://wiki.haskell.org/Cookbook][The Haskell Cookbook]]. #FunctionalProgramming #Haskell
+ [[https://babbagefiles.xyz/next_browser-common_lisp/][Browsing the Web with Common Lisp]]. #Lisp #CommonLisp #Web #NextBrowser
+ [[http://next.atlas.engineer][Next: a keyboard-oriented, extensible web-browser inspired by Emacs
  and designed for power users]]. #Lisp #CommonLisp #Web #NextBrowser
+ [[https://arxiv.org/pdf/1810.08380][Formalizing computability theory via partial recursive functions]]. ~
  M. Carneiro. #ITP #Lean
+ [[https://gmalecha.github.io/reflections/2018/denotational-imp][A denotational semantics for an imperative language]]. ~ G. Malecha. #ITP #Coq
+ [[https://www.isa-afp.org/entries/Lambda_Free_EPO.html][Formalization of the embedding path order for lambda-free higher-order
  terms]]. ~ A. Bentkamp. #ITP #IsabelleHOL
+ [[https://vadosware.io/post/rest-ish-services-in-haskell-part-1/][REST-ish services in Haskell (Part 1)]]. ~ @vadosware #FunctionalProgramming 
  #Haskell
+ [[https://github.com/javpelle/ComputerAlgebra][Some computer algebra algorithms in Haskell]]. ~ J. Pellejero. 
  #FunctionalProgramming #Haskell #Math
+ [[https://chalkdustmagazine.com/features/an-invitation-to-category-theory/][An invitation to category theory]]. ~ Tai-Danae Bradley. #CategoryTheory
+ [[https://link.springer.com/content/pdf/10.1007%2F978-3-030-02508-3_10.pdf][Layer systems for confluence — formalized]]. ~ B. Felgenhauer, F. Rapp
  #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Prime_Number_Theorem.html][The prime number theorem in Isabelle/HOL]]. ~ M. Eberl, L. Paulson. #ITP
  #IsabelleHOL #Math
+ [[https://mmhaskell.com/blog/2018/11/12/elm-more-functional-frontend][Elm: Functional frontend!]] ~ James Bowen.  #FunctionalProgramming #Elm
+ [[https://blog.jle.im/entry/introduction-to-singletons-4.html][Introduction to Singletons (Part 4)]]. ~ Justin Le. #Haskell
  #FunctionalProgramming
+ [[http://www.iro.umontreal.ca/~monnier/hopl-4-emacs-lisp.pdf][Evolution of Emacs Lisp]]. ~ S. Monnier, M. Sperber. #Emacs #Lisp
+ [[https://www.csc.kth.se/~jsannemo/slask/main.pdf][Principles of algorithmic problem solving]]. ~ J. Sannemo. #eBook
  #Algorithms #Programming #CompSci
+ [[https://hal.inria.fr/hal-01897468/document][Deriving proved equality tests in Coq-elpi (Stronger induction
  principles for containers in Coq)]]. ~ E. Tassi. #ITP #Coq
+ [[https://www.quantamagazine.org/in-computers-we-trust-20130222/][In computers we trust? (As math grows ever more complex, will
  computers reign?)]] #Math #CompSci #ITP
+ [[http://web.eecs.umich.edu/~cpeikert/pubs/alchemy.pdf][Alchemy: A Language and Compiler for Homomorphic Encryption Made easY]]. 
  ~ E. Crockett, C. Peikert, C. Sharp. #Haskell #FunctionalProgramming
+ [[https://dimjasevic.net/marko/2018/10/23/typed-functional-programming-and-software-correctness][Typed functional programming and software correctness]]. ~ Marko
  Dimjašević. #FunctionalProgramming
+ [[https://blog.softwaremill.com/algebraic-data-types-in-four-languages-858788043d4e][Algebraic Data Types in four languages (A comparison)]]. ~ #Haskell
  #Scala #Rust #TypeScript
+ [[https://medium.com/@scott_jones/third-wave-ai-the-coming-revolution-in-artificial-intelligence-1ffd4784b79e][Third wave AI: The coming revolution in Artificial Intelligence]]. ~
  Scott Jones. #AI
+ [[https://www.darpa.mil/about-us/darpa-perspective-on-ai][A DARPA perspective on Artificial Intelligence]]. ~ John Launchbury. #AI
+ [[https://www.bbc.com/news/business-44466213][Can we trust AI if we don't know how it works?]] ~ Marianne Lehnis. #AI
+ [[https://www.youtube.com/watch?v=T6ohwZNL0RQ][Assuring AI]]. ~ John Launchbury. #AI
+ [[https://code.world/doc.html?shelf=help/codeworld.shelf&path=help/GuideUnit1.md#13][CodeWorld guide]]. ~ Chris Smith. #Haskell #CodeWorld
  #FunctionalProgramming
+ [[https://youtu.be/P8fgFCSAqYs][Solving russian calendar problems in Haskell (HaskellRank Ep.08)]]. ~
  Alexey Kutepov. #FunctionalProgramming #Haskell
+ [[http://bit.ly/2Pm3Sxc][Los cuadrados y la factorización]]. ~ Juan Arias de Reyna. #Matematicas
  #Computacion
+ [[https://www.ams.org/journals/notices/199612/pomerance.pdf][A tale of two sieves]]. ~ C. Pomerance. #Math #CompSci 
+ [[https://cacm.acm.org/magazines/2018/11/232193-ai-explain-yourself/fulltext][AI, explain yourself]]. ~ Don Monroe. #AI #XAI
+ [[https://www.teslarati.com/darpa-us-defense-ai-common-sense-machine-learning/][US Department of Defense commits $2B to training AI to have “common
  sense”]]. #AI
+ [[https://www.ciodive.com/news/ai-talent-pipeline-clogged-by-education-programs-slow-or-unable-to-change/540497/][AI talent pipeline clogged by education programs slow or unable to
  change]]. #AI
+ [[https://francis.naukas.com/2011/07/13/para-que-sirven-las-matematicas/][Para qué sirven las matemáticas]]. ~ Francisco R. Villatoro
  #Matemáticas
+ [[https://www3.math.tu-berlin.de/combi/wp_henk/wp-content/uploads/2011/08/475166a-The+unplanned+impact+of+mathematics.pdf][The unplanned impact of mathematics]]. ~ P. Rowlett. #Math
+ [[https://es.slideshare.net/AlejandroMena6/build-your-own-monads][Build your own monads]]. ~ A. Serrano. #FunctionalProgramming
  #Haskell
+ [[https://anchpop.github.io/wise_mans_haskell][Wise man’s Haskell (Free book for learning Haskell)]]. ~ Andre
  Popovitch. #eBook #FunctionalProgramming #Haskell
+ [[https://drive.google.com/file/d/1ikKuK6T2xccLynvdAVjGGZ029zjQlGAX/view][Headfirst into Haskell]]. ~ Abby Sassel. #FunctionalProgramming 
  #Haskell
+ [[https://www.slideshare.net/LukaJacobowitz/testing-in-the-world-of-functional-programming][Testing in the World of Functional Programming]]. ~ Luka
  Jacobowitz. #FunctionalProgramming #Scala
+ [[https://theconversation.com/statistics-and-data-science-degrees-overhyped-or-the-real-deal-102958][Statistics and data science degrees: Overhyped or the real deal?]] ~
  P. Richard Hahn #DataScience
+ [[http://cleilaclo2018.mackenzie.br/docs/SIESC/182774.pdf][A functional paradigm using the C language for teaching Programming
  for Engineers]]. ~ V. Theoktisto. #Teaching #Programming
  #FunctionalProgramming
+ [[https://www.researchgate.net/profile/George_Baryannis/publication/328282705_Legal_Representation_and_Reasoning_in_Practice_A_Critical_Comparison/links/5bc9cb06a6fdcc03c7941e70/Legal-Representation-and-Reasoning-in-Practice-A-Critical-Comparison.pdf][Legal representation and reasoning in practice: a critical comparison]]. ~
  S. Batsakis et als. #KRR #ASP #Logic #AI
+ [[https://stratos.seas.harvard.edu/files/stratos/files/periodictabledatastructures.pdf][The periodic table of data structures]]. ~ S. Idreos et als. #Algorithmic 
+ [[https://arxiv.org/pdf/1808.02066.pdf][The internals of the data calculator]]. ~ S. Idreos et als. #Algorithmic 
+ [[https://www.isa-afp.org/entries/Epistemic_Logic.html][Epistemic logic in Isabelle/HOL]]. ~ Andreas Halkjær From. #ITP #IsabelleHOL
  #Logic
+ [[https://ptival.github.io/card-game-04][Creating a card game in Haskell (part 4)]]. ~ Valentin Robert
  #FunctionalProgramming #Haskell
+ [[http://bit.ly/2RnL3qv][Fourier, Cantor, las series trigonométricas y la teoría de conjuntos]]. ~ Pedro
  J. Paúl #Matemáticas
+ [[https://dimjasevic.net/marko/2018/10/23/typed-functional-programming-and-software-correctness/][Typed functional programming and software correctness]]. ~ Marko
  Dimjašević. #FunctionalProgramming #Haskell #Agda
+ [[http://qfpl.io/posts/intro-to-state-machine-testing-1][Introduction to state machine testing: part 1]]. ~ Andrew McMiddlin
  #FunctionalProgramming #Haskell
+ [[http://nickseagull.github.io/lw-eta-2018][Pragmatic development in Eta]]. ~ Nick Tchayka. 
  #FunctionalProgramming #Haskell #Eta
+ [[http://www.cis.syr.edu/~sueo/cis252][Course CIS 252: Introduction to Computer Science]]. ~ Susan Older 
  #FunctionalProgramming #Haskell
+ [[https://dl.acm.org/citation.cfm?id=3276946][A trustworthy mechanized formalization of R]]. ~ M. Bodin, T. Diaz,
  É. Tanter. #ITP #Coq #RStat
+ [[https://arxiv.org/pdf/1803.06494][Attack trees in Isabelle]]. ~ F. Kammüller. #ITP #IsabelleHOL 
+ [[https://hal.inria.fr/hal-01903752/document][A generic Coq proof of typical worst-case analysis]]. ~ P. Fradet,
  M. Lesourd, J.F. Monin, S. Quinton. #ITP #Coq
+ [[https://github.com/ivanperez-keera/simple-affine-space][A simple implementation of affine spaces and vector spaces in Haskell]]. 
  #FunctionalProgramming #Haskell #Math
+ [[https://www.hindawi.com/journals/tswj/2014/834237][The laws of natural deduction in inference by DNA computer]]. ~
  Ł. Rogowski, P. Sosík. #Logic #DNAcomputing

* Noviembre 2018
+ [[https://www.glc.us.es/~jalonso/vestigium/resumen-de-lecturas-compartidas-durante-octubre-de-2018][Resumen de lecturas compartidas durante octubre de 2018]]. 
  #FunctionalProgramming #Haskell #ITP #IsabelleHOL #Coq #Agda
+ [[https://www.isa-afp.org/entries/GewirthPGCProof.html][Formalisation and evaluation of Alan Gewirth's proof for the principle
  of generic consistency in Isabelle/HOL]]. ~ D. Fuenmayo. #ITP
  #IsabelleHOL #Logic
+ [[http://orbilu.uni.lu/bitstream/10993/37013/1/IOlogic-farjami.pdf][I/O logic in HOL]]. ~ A. Farjami, P. Meder, X. Parent,
  C. Benzmüller. #ITP #IsabelleHOL
+ [[http://orbilu.uni.lu/bitstream/10993/37014/1/Aqvist-farjami.pdf][Åqvist’s dyadic deontic logic E in HOL]]. ~ C. Benzmüller, A. Farjami,
  X. Parent. #ITP #IsabelleHOL #Logic
+ [[https://arxiv.org/pdf/1810.11979][Formal proofs of Tarjan's algorithm in Why3, Coq, and Isabelle]]. ~
  R. Chen, C. Cohen, J.J. Levy, S. Merz, L. Thery. #ITP #Why3 #Coq
  #IsabelleHOL
+ [[https://arxiv.org/pdf/1811.00796][Automated theorem proving in intuitionistic propositional logic by deep
  reinforcement learning]]. ~ M. Kusumoto, K. Yahata, M. Sakai. #ATP #DeepLearning
+ [[https://dev.to/supermanitu/haskell-by-example---the-birthday-bar-12m7][Haskell by example: The birthday bar]]. ~ Jan van Brügge
  #FunctionalProgramming #Haskell
+ [[https://pl-rants.net/posts/haskell-opt-journey/][Haskell: journey from 144 min to 17 min]]. ~ Denis. #FunctionalProgramming
  #Haskell
+ [[https://vanemden.wordpress.com/2018/10/29/history-of-structured-programming/][History of "Structured programming"]]. ~ Maarten van Emden. #Programming
+ [[https://medium.com/@stites/hasktorch-v0-0-1-28d9ab270f3f][Hasktorch: a library for tensors and neural networks in Haskell]]. ~ Sam
  Stites. #FunctionalProgramming #Haskell #DeepLearning
+ [[http://matryoshka.gforge.inria.fr/pubs/metathy_paper.pdf][Formalizing the metatheory of logical calculi and automatic provers in
  Isabelle/HOL]]. ~ J.C. Blanchette. #ITP #IsabelleHOL #Logic
+ [[https://www.sciencedirect.com/science/article/pii/S157106611830080X/pdf%3Fmd5%3D9ea092c87333b6b917921a1ae9f85aa7%26pid%3D1-s2.0-S157106611830080X-main.pdf][Mechanizing focused linear logic in Coq]]. ~ B. Xavier, C. Olarte,
  G. Reis, V. Nigam. #ITP #Coq #Logic
+ [[http://bit.ly/2yUuSKK][Formalization of universal algebra in Agda]]. ~ E. Gunther, A. Gadea,
  M. Pagano. #ITP #Agda
+ [[http://www.cse.chalmers.se/~patrikj/papers/TypeTheory4ModProg_preprint_2018-05-19.pdf][Type theory as a framework for modelling and programming]]. ~
  C. Ionescu, P. Jansson, N. Botta. #FunctionalProgramming #TypeTheory
+ [[https://competition.isabelle.systems/competitions][Proving for Fun]]: proving competitions and learning material for
  Interactive Proof Assistants such as Isabelle. #ITP #IsabelleHOL
+ [[https://vaibhavsagar.com/blog/2018/11/03/moving-towards-dialogue/][Moving towards dialogue]]. ~ Vaibhav Sagar. #FunctionalProgramming 
  #Haskell #Idris
+ [[https://mmhaskell.com/blog/2018/11/5/elm-iii-building-a-bridge-adding-effects][Elm III: adding effects]]. ~ James Bowen.  #FunctionalProgramming #Elm
+ [[http://bit.ly/2OrSjja][Graphics programming in Elm develops Math knowledge & social
  cohesion]]. ~ J. Zhang et als. #Teaching #Math #FunctionalProgramming
  #Elm
+ [[https://hal.archives-ouvertes.fr/hal-01563373/document][A Lisp way to type theory and formal proofs]]. ~ Frédéric
  Peschanski. #ITP #LaTTe #Clojure #FunctionalProgramming
+ [[https://github.com/latte-central/LaTTe][LaTTe: a Laboratory for Type Theory experiments (in Clojure)]]. ~
  Frederic Peschanski. #ITP #LaTTe #Clojure #FunctionalProgramming
+ [[https://european-lisp-symposium.org/static/proceedings/2018.pdf][Proceedings of the 11 th European Lisp Symposium (April 16-17,
  2018)]]. #Lisp #FunctionalProgramming
+ [[http://dailynous.com/2018/11/07/new-free-open-source-multi-purpose-multi-system-logic-software/][Carnap: a new free open-source multi-purpose multi-system logic software]]. ~
  Graham Leach-Krouse. #Logic #Haskell #FunctionalProgramming
+ [[https://github.com/gleachkr/Carnap][Carnap: A formal logic framework that runs in the browser]]. ~ Graham
  Leach-Krouse. #Logic #Haskell #FunctionalProgramming
+ [[https://carnap.io][Carnap.io: A formal logic framework for Haskell]]. ~ Graham
  Leach-Krouse. #Logic #Haskell #FunctionalProgramming
+ [[https://dev.to/supermanitu/haskell-by-example---utopian-tree-1da2][Haskell by example: Utopian tree]]. ~ Jan van Brügge. #Haskell
  #FunctionalProgramming
+ [[http://technocrat.rbind.io/2018/11/07/r-and-haskell-meant-for-each-other/][R and Haskell, meant for each other?]]. ~ Richard Careaga. #Rstats #Haskell
+ [[https://tweag.github.io/HaskellR/][HaskellR: Programming R in Haskell]]. #Rstats #Haskell
+ [[http://bit.ly/2RHnl8T][Why is functional programming gaining traction? Why now?]] ~ Eric
  Normand. #FunctionalProgramming
+ [[https://arxiv.org/pdf/1811.03176][SAT-based explicit LTLf satisfiability checking]]. ~ J. Li, K.Y. Rozier,
  G. Pu, Y. Zhang, M.Y. Vardi. #Logic #SAT #ATP
+ [[https://robertwpearce.com/hakyll-pt-1-setup-and-initial-customization.html][Hakyll Pt. 1: Setup & initial customization]]. ~ Robert Pearce. #Haskell
  #Hakyll #FunctionalProgramming
+ [[https://tech.finn.no/2018/10/18/haskell-at-finn-no/][Haskell at FINN.no]]. ~ Sjur Millidahl. #Haskell #FunctionalProgramming
+ [[https://serokell.io/blog/2018/11/05/signal-processing][Signal processing in Haskell]]. ~ Rinat Stryungis. #Haskell
  #FunctionalProgramming
+ [[https://qfpl.io/posts/waargonaut-the-jsoner/][Waargonaut the JSONer]]. ~ Sean Chalmers. #Haskell #FunctionalProgramming
+ [[https://github.com/pcarbonn/H-Calc][So, you want to write a DSL interpreter ]]... H-Calc!. #Haskell #DSL
  #FunctionalProgramming
+ [[https://dl.acm.org/citation.cfm?id=3264832][On the naturalness of proofs]]. ~ V.J. Hellendoorn, P.T. Devanbu,
  M.A. Alipour. #ITP #HOL_Light #Coq
+ [[https://www.logicmatters.net/2018/11/05/tarski-on-truth-very-briefly][Tarski on truth: a thumbnail sketch]]. ~ Peter Smith. #Logic
+ [[https://kevinlynagh.com/notes/shipping-puzzle/][Exploring a shipping puzzle]]. ~ Kevin Lynagh. #Clojure
  #Alloy #FunctionalProgramming
+ [[https://arxiv.org/abs/1810.13430][Exceptionally monadic error handling (Looking at bind and squinting really
  hard)]]. ~ J. Malakhovski. #Haskell #FunctionalProgramming
+ [[http://robertylewis.com/padics/padics.pdf][A formal proof of Hensel's lemma over the p-adic integers]]. ~
  R.Y. Lewis. #ITP #Lean #Math
+ [[https://doisinkidney.com/posts/2018-11-10-a-very-simple-prime-sieve.html][A very simple prime sieve in Haskell]]. ~ Donnacha Oisín Kidney
  #Haskell #FunctionalProgramming
+ [[https://markkarpov.com/post/existential-quantification.html][Existential quantification]]. ~ Mark Karpov. #Haskell
  #FunctionalProgramming
+ [[https://danieljharvey.github.io/posts/2018-11-11-typeclasses-show.html][Typeclasses: Show]]. ~ Daniel J. Harvey #Haskell
+ [[https://omegaup.com/img/libropre3.pdf][Problemas y algoritmos]]. ~ Luis Vargas. #Libro #Algoritmos
  #Programacion #Cpp
+ [[http://pier.guillen.com.mx/algoritmos.htm][Algoritmos]]. ~ Pier Paolo Guillen Hernandez. #Algoritmos
+ [[http://www.unirioja.es/cu/joheras/papers/immiia.pdf][Informática para las Matemáticas, Matemáticas para la Informática,
  Informática aplicada]]. ~ J. Aransay et als. #Matematicas #Informatica
+ [[http://binaire.blog.lemonde.fr/2018/11/12/a-la-recherche-du-logiciel-parfait][À la recherche du logiciel parfait]]. ~ Xavier Leroy. #ITP
+ [[https://dev.to/eddroid/teaching-functional-programming-two-big-picture-approaches-3nli][Teaching Functional Programming: two big picture approaches]]. ~ Ed
  Toro. #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2018/11/12/elm-iv-navigation][Elm IV: navigation!]] ~ James Bowen. #FunctionalProgramming
  #Elm
+ [[https://github.com/jrclogic/SMCDEL][SMCDEL: A symbolic model checker for Dynamic Epistemic Logic]]. ~ Malvin
  Gattinger. #Logic #Haskell #FunctionalProgramming
+ [[https://github.com/jrclogic/SMCDEL/raw/master/SMCDEL.pdf][SMCDEL: an implementation of symbolic model checking for Dynamic
  Epistemic Logic with Binary Decision Diagrams]]. ~ Malvin
  Gattinger. #Logic #Haskell #FunctionalProgramming
+ [[https://malv.in/2018/funcproglog/][Course: Functional programming for logicians]]. ~ Malvin Gattinger and
  Jana Wagemaker. #Logic #Haskell #FunctionalProgramming
+ [[https://homepages.cwi.nl/~jve/papers/15/html][Davis, Putnam, Logemann, Loveland (DPLL) theorem proving in Haskell]]. ~
  Jan van Eijck. #Logic #Haskell #FunctionalProgramming #ATP
+ [[https://malv.in/posts/2016-11-16-why-io-input-types-are-confusing.html][Why IO input types are confusing]]. ~ Malvin Gattinger. #Haskell
  #FunctionalProgramming
+ [[https://cse.iitk.ac.in/users/spramod/papers/memocode18.pdf][UCLID5: Integrating modeling, verification, synthesis, and learning]]. ~
  S.A. Seshia, P. Subramanyam. #FormalVerification #ITP
+ [[https://mathscholar.org/2018/09/simple-proofs-of-great-theorems][Simple proofs of great theorems]]. #Math
+ [[https://mathscholar.org/2018/09/simple-proofs-the-irrationality-of-pi/][Simple proofs: The irrationality of pi]]. #Math
+ [[https://mathscholar.org/2018/09/simple-proofs-the-fundamental-theorem-of-algebra/][Simple proofs: The fundamental theorem of algebra]]. #Math
+ [[https://mathscholar.org/2018/09/simple-proofs-the-impossibility-of-trisection/][Simple proofs: The impossibility of trisection]]. #Math
+ [[http://qfpl.io/posts/intro-to-state-machine-testing-2/][Introduction to state machine testing: part 2]]. ~ Andrew McMiddlin
  #Haskell #FunctionalProgramming
+ [[http://www.philipzucker.com/a-touch-of-topological-quantum-computation-in-haskell-pt-i][A touch of topological quantum computation in Haskell pt. I]]. ~ Philip
  Zucker. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/pdf/1811.05094][A SAT+CAS approach to finding good matrices: new examples and
  counterexamples]]. ~ C. Bright et als. #SAT #CAS
+ [[https://arxiv.org/pdf/1811.05116v1][Programs as the language of science]]. ~ G. Pantelis. #CompSci 
+ [[https://github.com/jaalonso/Examenes_de_PF_con_Haskell/releases/download/v10.1/Examenes_de_PF_con_Haskell.pdf][Libro de exámenes de programación funcional con Haskell (versión del
  14 de noviembre de 2018)]]. #ProgramacionFuncional #Haskell #I1M2018
+ [[http://flint.cs.yale.edu/flint/publications/sacc.pdf][An abstract stack based approach to verified compositional compilation
  to machine code]]. ~ P. Wilke, Y. Wang, Z. Shao. #ITP #Coq
+ [[http://adam.chlipala.net/papers/FiatCryptoSP19/][Simple high-level code for cryptographic arithmetic (with proofs,
  without compromises)]]. ~ A. Erbsen, J. Philipoom, J. Gross, R. Sloan,
  A. Chlipala. #ITP #Coq
+ [[https://dl.acm.org/citation.cfm?doid=3243631.3236784][Ready, set, verify!  applying hs-to-coq to real-world Haskell code (experience
  report)]]. ~ J. Breitner, A. Spector-Zabusky, Y. Li, C. Rizkallah, J. Wiegley,
  S. Weirich. #ITP #Coq #Haskell
+ [[https://functor.tokyo/blog/2018-11-15-termonad][Termonad: A terminal emulator configurable in Haskell]]. ~ Dennis
  Gosnell. #Haskell #FunctionalProgramming
+ [[http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml][Great works in programming languages]]. ~ Benjamin C. Pierce. #CompSci
+ [[https://alternativebit.fr/posts/haskell/ex-hack-alpha/][Ex-Hack: a Haskell example-based documentation]]. ~ @ninjatrappeur #Haskell
+ [[https://youtu.be/Xfu-Mt4YDWQ][GTK+ programming with Haskell]]. ~ Oskar Wickström. #Haskell
+ [[https://octopi.chalmers.se/2018/11/08/typed-holes/][Typed-holes and valid hole fits]]. ~ Matthías Páll Gissurarson. #Haskell
  #FunctionalProgramming
+ [[https://mpg.is/papers/gissurarson2018suggesting.pdf][Suggesting valid hole fits for typed-holes (experience report)]]. ~
  Matthías Páll Gissurarson. #Haskell #FunctionalProgramming
+ [[https://haskellweekly.news/issues/133.html][Haskell Weekly 133: News from the Haskell community (November 15 2018)]]. 
  #Haskell
+ [[https://sketis.net/2018/isabelle-mmt-export-of-isabelle-theories-and-import-as-omdoc-content][Isabelle/MMT: export of Isabelle theories and import as OMDoc
  content]]. ~ Makarius Wenzel. #ITP #IsabelleHOL #MMT
+ [[http://www.macs.hw.ac.uk/~ek19/pddl-verification.pdf][Proof-carrying plans]]. ~ C. Schwaab et als. #ITP #Agda IA #Planning
+ [[https://www.ps.uni-saarland.de/Publications/documents/ForsterEtAl_2018_On-Synthetic-Undecidability.pdf][On synthetic undecidability in Coq, with an application to the
  Entscheidungsproblem]]. ~ Y. Forster, D. Kirst, G. Smolka. #ITP #Coq #Logic
+ [[https://members.loria.fr/DLarchey/files/papers/BFE_CPP19.pdf][Breadth-first extraction: lessons from a small exercice in algorithm
  certification]]. ~ D. Larchey-Wendling, R. Matthes. #ITP #Coq #Algorithms
+ [[https://members.loria.fr/DLarchey/files/papers/UNDEC_CPP19.pdf][Certified undecidability of intuitionistic linear logic via binary
  stack machines and Minsky machines]]. ~ Y. Forster, D. Larchey-Wendling. 
  #ITP #Coq #Logic
+ [[https://books.google.es/books?id=jI15DwAAQBAJ&lpg=PP1&hl=es&pg=PP][Practical Web Development with Haskell (Master the essential skills to
  build fast and scalable Web applications)]]. ~ Ecky Putrady. #Haskell
+ [[https://robertwpearce.com/hakyll-pt-2-generating-a-sitemap-xml-file.html][Hakyll Pt. 2: Generating a sitemap XML file]]. ~ Robert Pearce. #Haskell
  #Hakyll #FunctionalProgramming
+ [[https://plato.stanford.edu/entries/logic-firstorder-emergence][The emergence of first-order logic]]. ~ William Ewald. #Logic 
+ [[https://arxiv.org/pdf/1405.7615][Formal verification of control systems properties with theorem proving]]. 
  ~ D. Araiza-Illan, K. Eder, A. Richards. #ITP 
+ [[https://taylor.fausak.me/2018/11/18/2018-state-of-haskell-survey-results][2018 state of Haskell survey results]]. ~ Taylor Fausak. #Haskell
+ [[https://itnext.io/pros-and-cons-of-functional-programming-32cdf527e1c2][Pros and cons of functional programming]]. ~ Iren Korkishko.
  #FunctionalProgramming
+ [[https://www.math3ma.com/blog/the-tensor-product-demystified][The tensor product, demystified]]. ~ Tai-Danae Bradley. #Math
+ [[https://www.isa-afp.org/entries/Matroids.html][Matroids in Isabelle/HOL]]. ~ Jonas Keinholz. #ITP #IsabelleHOL #Math
+ [[https://arxiv.org/abs/1810.05806.pdf][Human-competitive patches in automatic program repair with Repairnator]]. 
  ~ M. Monperrus et als. #Programming 
+ [[http://bit.ly/2Q4jNAD][Creative Maths Challenge]]. #Math
+ [[https://www.johndcook.com/blog/2018/11/20/curry-howard-lambek][Curry-Howard-Lambek correspondence]]. ~ John D. Cook. #CompSci
+ [[https://doisinkidney.com/posts/2018-11-20-fast-verified-structures.html][Keeping formal verification in bounds]]. ~ Donnacha Oisín Kidney. #Haskell #Agda
+ [[https://upcommons.upc.edu/handle/2117/113325][Analysis and solution of a collection of algorithmic problems]]. ~
  R.E. López. #Algorithms #Programming #Cpp
+ [[https://www.isa-afp.org/entries/Generic_Deriving.html][Deriving generic class instances for datatypes in Isabelle/HOL]]. ~
  Jonas Rädle, Lars Hupel. #ITP #IsabelleHOL
+ [[http://dld.bz/hftr9][What is elementary geometry?]] ~ Alfred Tarski #Math #Logic #History
+ [[https://github.com/BartoszMilewski/Publications/raw/master/Oredev.pdf][Programming with Math]]. ~ Bartosz Milewski. #Logic
  #Math #Programming #Haskell
+ [[https://www.codementor.io/harshittyagi/high-performance-mathematical-paradigms-in-python-pjc5yocqm][High-performance mathematical paradigms in Python]]. ~ Harshit Tyagi
  #Python #Math
+ [[http://www.ps.uni-saarland.de/~kirst/bachelor.php][Formalised set theory: well-orderings and the axiom of choice]]. ~
  Dominik Kirst. #ITP #Coq #Math
+ [[https://www.ps.uni-saarland.de/extras/types15/][Axiomaticl set theory in type theory]]. ~ Gert Smolka. #ITP #Coq #Math
+ [[http://irreal.org/blog/?p=7632][Writing a Thesis with Org Mode]]. #Emacs #OrgMode
+ [[https://write.as/dani/writing-a-phd-thesis-with-org-mode][Writing a PhD thesis with Org Mode]]. ~ Daniel Gómez. #Emacs #OrgMode
+ [[https://write.as/dani/an-emacs-library-for-frictionless-blogging][An Emacs Library for frictionless Blogging]]. ~ Daniel Gómez. #Emacs #OrgMode
+ [[http://bit.ly/2Qg7nFD][Producto de Euler y ceros]]. ~ Juan Arias de Reyna. #Matemáticas
+ [[https://courses.ps.uni-saarland.de/icl_18/2/Resources][Course: Introduction to computational logic]]. ~ Gert Smolka. #ITP #Coq
  #Logic
+ [[https://dimjasevic.net/marko/2018/11/20/function-totality-abstraction-tool-in-programming/][Function totality: Abstraction tool in programming]]. ~ Marko
  Dimjašević. #Haskell #FunctionalProgramming
+ [[https://kowainik.github.io/posts/2018-11-18-state-pattern-matching][State monad comes to help sequential pattern matching]]. ~ Dmitrii
  Kovanikov. #Haskell #FunctionalProgramming
+ [[https://arxiv.org/abs/1608.02644.pdf][Holophrasm: a neural automated theorem prover for higher-order logic]]. 
  ~ D. Whalen. #ITP #NeuralNetworks
+ [[https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf][Why functional programming matters]]. ~ J. Hughes. #FunctionalProgramming
+ [[https://github.com/sandrolovnicki/pLam][pLam: command line interpreter for learning and exploring pure λ-calculus]]. 
  ~ Sandro Lovnički. #Haskell #LambdaCalculus
+ [[https://www.i-programmer.info/news/204-challenges/12323-new-site-for-googles-coding-competitions-.html][New site for Google's coding competitions]]. ~ Sue Gee. #CompetitiveProgramming
+ [[http://matt.might.net/articles/quick-quickcheck/][An introduction to QuickCheck by example: Number theory and Okasaki's
  red-black trees]]. ~ Matt Might. #Haskell #QuickCheck
  #FunctionalProgramming
+ [[https://github.com/hmemcpy/milewski-ctfp-pdf/releases/download/v1.1-rc/category-theory-for-programmers-scala.pdf][Category theory for programmers. (Scala edition)]]. ~ B. Milewski,
  I. Tabachnik. #CategoryTheory #Haskell #Scala #FunctionalProgramming
+ [[https://tech.kinja.com/haskell-for-scala-developers-1581854668][Haskell for Scala developers]]. ~ Claire Neveu. #Haskell 
  #Scala #FunctionalProgramming
+ [[https://john.cs.olemiss.edu/~hcc/csci450/ELIFP/ExploringLanguages.html][Exploring languages with interpreters and functional programming]]. ~
  H. Conrad Cunningham. #CompSci #Programming #FunctionalProgramming
  #Haskell
+ [[https://www.wisdomandwonder.com/article/10805/emacsorg-mode-choosing-the-best-writing-and-publishing-software][(Emacs+Org-Mode) Choosing the best writing and publishing software]]. 
  #Emacs #OrgMode
+ [[https://dev.to/leandrotk_/functional-programming-principles-in-javascript-26g7][Functional programming principles in Javascript]]. ~ @leandrotk_
  #FunctionalProgramming #JavaScript
+ [[http://blog.poisson.chat/posts/2018-11-26-type-surgery.html][Surgery for data types]]. ~ Xia Li-yao. #Haskell #FunctionalProgramming
+ [[http://settheory.net/links][Directory of links on logic and foundations of mathematics]]. ~ Sylvain
  Poirier. #Logic #Math
+ [[https://mmhaskell.com/blog/2018/10/15/getting-started-with-purescript][Getting started with Purescript!]] ~ James Bowen. #Purescript #Haskell
  #FunctionalProgramming
+ [[https://www.fpcomplete.com/blog/2018/10/is-rust-functional][Is Rust functional?]] ~ M. Snoyman. #Rust #FunctionalProgramming
+ [[https://www.fpcomplete.com/blog/2018/11/haskell-and-rust][Haskell and Rust]]. ~ Chris Allen. #Haskell #Rust
  #FunctionalProgramming
+ [[https://dl.acm.org/citation.cfm?id=361612][Computer programming as an art]]. ~ Donald Knuth. #Programming #CompSci
+ [[https://arxiv.org/abs/1811.11093][Counting polynomial roots in Isabelle/HOL: A formal proof of the
  Budan-Fourier theorem]]. ~ W.Li, L.C. Paulson. #ITP #IsabelleHOL #Math
+ [[https://www.isa-afp.org/entries/Graph_Saturation.html][Graph saturation in Isabelle/HOL]]. ~ S.J.C. Joosten. #ITP #IsabelleHOL 
+ [[http://www.cis.upenn.edu/~bcpierce/papers/deepweb-overview.pdf][From C to interaction trees: Specifying, verifying, and testing a networked
  server]]. ~ N. Koh et als. #ITP #Coq
+ [[https://arxiv.org/abs/1811.10818][Experience report on formally verifying parts of OpenJDK's API with KeY]]. 
  ~ A. Knüppel, T. Thüm, C. Pardylla, I. Schaefer. #ATP #KeY
+ [[https://arxiv.org/abs/1811.10814][Lightweight interactive proving inside an automatic program verifier]]. 
  ~ S. Dailler, C. Marché, Y. Moy. #ITP #ATP
+ [[https://github.com/bor0/gidti][Gentle introduction to dependent types with Idris]]. ~ Boro
  Sitnikovski. #Idris #FunctionalProgramming #ITP
+ [[https://arxiv.org/abs/1811.10819][Isabelle/jEdit as IDE for domain-specific formal languages and
  informal text documents]]. ~ M. Wenzel. #ITP #IsabelleHOL
+ [[http://www.cs.utexas.edu/users/EWD/ewd06xx/EWD697.PDF][Some beautiful arguments using mathematical induction]]. ~
  E.W. Dijkstra. #Math #CompSci
+ [[https://users.soe.ucsc.edu/~cschuster/phd/phd_thesis.pdf][Towards live programming environments for statically verified JavaScript]]. ~
  C. Schuster. #PhD_Thesis #ITP #LeanProver #JavaScript
+ [[https://github.com/levjj/esverify-theory/][Formalism and proofs for esverify]]. ~ C. Schuster. #IPT #LeanProver
  #JavaScript
+ [[https://esverify.org][esverify: Program verification for ECMAScript/JavaScript]]. ~
  C. Schuster. #IPT #LeanProver #JavaScript
+ [[https://github.com/hide-kawabata/traf][Traf: A proof tree viewer that works with Coq through Proof General]]. ~
  Hideyuki Kawabata. #ITP #Coq
+ [[https://bitbucket.org/nadiapolikarpova/synquid/][Synquid: synthesizes programs from refinement types]]. ~ Nadia
  Polikarpova. #Haskell #FunctionalProgramming
+ [[http://www-kb.is.s.u-tokyo.ac.jp/~koba/papers/aplas18-long.pdf][Automated synthesis of functional programs with auxiliary functions]]. ~
  S. Eguchi, N. Kobayashi, T. Tsukada. #Haskell #FunctionalProgramming
+ [[https://www.isa-afp.org/entries/Auto2_HOL.html][Auto2 prover]]. ~ B. Zhan. #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Functional_Ordered_Resolution_Prover.html][A verified functional implementation of Bachmair and Ganzinger's ordered
  resolution prover]]. ~ A. Schlichtkrull, J.C. Blanchette, D. Traytel. #ITP
  #IsabelleHOL
+ [[https://blockstream.com/2018/11/28/simplicity-github][Simplicity: High-assurance smart contracting]]. ~ R. Oconnor,
  A. Poelstra. #Haskell #Coq #ITP #FunctionalProgramming #Blockchain
+ [[https://github.com/ElementsProject/simplicity][Simplicity: a blockchain programming language designed as an
  alternative to Bitcoin script]]. ~ R. Oconnor. #Haskell #Coq #ITP
  #FunctionalProgramming #Blockchain
+ [[https://youtu.be/HnOix9TFy1A][Type-driven program synthesis]]. ~ N. Polikarpova #Haskell
  #FunctionalProgramming

* Diciembre 2018

+ [[https://arxiv.org/abs/1803.05998][|{Math, Philosophy, Programming, Writing}| = 1]]. ~ Attila
  Egri-Nagy. #Math #Philosophy #Programming
+ [[https://pdfs.semanticscholar.org/7454/9e68cca4d929fd008c259a2dc18667e0efe7.pdf][Certifying the true error: Machine learning in Coq with verified
  generalization guarantees]]. ~ A. Bagnall, G. Stewart. #ITP #Cop #MachineLearnig
+ [[https://www.ideals.illinois.edu/bitstream/handle/2142/102075/casper-report.pdf][Verification of Casper in the Coq proof assistant]]. ~ K. Palmskog et
  als. #ITP #Coq #Blockchain
+ [[http://www.lsv.fr/~fthire/research/sttforall/paper/sttforall.pdf][Sharing a library between proof assistants: reaching out to the HOL family]]. 
  ~ F. Thiré. #ITP #Dedukti #Coq #Matita #OpenTheory #LeanProver #PVS
+ [[https://hal.inria.fr/hal-01668246/file/presentation.pdf][Interoperability between arithmetic proofs using Dedukti]]. ~ F. Thiré
  #ITP #Dedukti #Coq #Matita #OpenTheory #LeanProver #PVS
+ [[https://github.com/Deducteam/Logipedia][Logipedia: an arithmetic library that is shared between several proof
  systems]]. ~ F. Thiré. #ITP #Dedukti #Coq #Matita #OpenTheory #LeanProver #PVS
+ [[https://arxiv.org/abs/1811.09840][Three Euler’s sieves and a fast prime generator (Functional pearl)]]. ~
  I. Salvo, A. Pacifico. #Haskell #FunctionalProgramming #Math
+ [[http://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/slides/meiser.pdf][QuickCheck (a lightweight tool for random testing of Haskell
  programs)]]. ~ K. Claessen, J. Hughes. #Haskell #QuickCheck
+ [[https://www.lri.fr/%7Empereira/thesis.pdf][Tools and techniques for the verification of modular stateful code]]. ~
  M.J. Parreira. #ITP #Why3
+ [[http://wadler.blogspot.com/2018/12/programming-language-foundations-in-agda.html][Programming language foundations in Agda]]. ~ Philip Wadler. #ITP #Agda
+ [[https://youtu.be/NGBsSOOXv1A][Histoire des mathématiques dans l'humanité]]. ~ Cedric Villani. #Math
+ [[https://plfa.github.io][Programming language foundations in Agda]]. ~ Philip Wadler, Wen Kokke. #ITP
  #Agda
+ [[https://arxiv.org/abs/1811.11317][Adventures in formalisation: Financial contracts, modules, and two-level type
  theory]].  ~ Danil Annenkov. #PhD_Thesis #ITP #Coq #Agda #Lean
+ [[http://cs.lmu.edu/~ray/notes/introhaskell][Introduction to Haskell]]. ~ Ray Toal #Haskell #FunctionalProgramming
+ [[http://cs.lmu.edu/~ray/classes/pl/][Course: Programming languages]]. ~ Ray Toal #Programming
+ [[https://github.com/ekmett/guanxi][guanxi: An exploration of relational programming in Haskell]]. ~ Edward
  Kmett #Haskell #FunctionalProgramming
+ [[http://www.isle.org/~langley/papers/integrative.eaai19.pdf][An integrative framework for artificial intelligence education]]. ~
  P. Langley. #Teaching #AI 
+ [[https://thealmarty.com/2018/12/04/programming-with-lenses-in-haskell-and-ocaml/][Programming with Lenses in Haskell and OCaml]]. #Haskell #OCaml
  #FunctionalProgramming
+ [[https://www.parsonsmatt.org/2018/12/04/laziness_quiz.html][Laziness Quiz]]. ~ Matt Parsons. #Haskell #FunctionalProgramming
+ [[https://gitlab.com/danielhones/pycategories][Pycategories: Python library implementing ideas from category theory]]. ~ 
  Daniel Hones. #Python #Haskell #CategoryTheory 
+ [[https://blog.jle.im/entry/alchemical-groups.html][Alchemical groups: Advent of code with free groups and group homomorphisms]]. 
  ~ Justin Le. #Haskell #FunctionalProgramming
+ [[http://gallium.inria.fr/blog/fixin-your-automata/][Fixin' your automata]]. ~ François Pottier. #OCaml #FunctionalProgramming 
+ [[https://bor0.wordpress.com/2018/12/05/dependently-typed-lambda-calculus-in-haskell/][Dependently typed lambda calculus in Haskell]]. ~ Boro Sitnikovski. #Haskell 
  #FunctionalProgramming
+ [[https://medium.com/@ertu.ctn/why-clojure-seriously-why-9f5e6f24dc29][Why Clojure? I’ll tell you why ...]] ~ Ertuğrul Çetin. #Clojure 
  #FunctionalProgramming
+ [[https://medium.freecodecamp.org/a-behind-the-scenes-look-at-map-filter-and-reduce-in-swift-1991f5c7bc80][A behind the scenes look at Map, Filter, and Reduce in Swift]]. ~
  Boudhayan Biswas. #Swift #FunctionalProgramming
+ [[https://dev.to/leandrotk_/functional-programming-principles-in-javascript-26g7][Functional programming principles in Javascript]]. ~ @leandrotk_
  #FunctionalProgramming #JavaScript
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_123.pdf][Verified analysis of random binary tree structures]]. ~ M. Eberl,
  M.W. Haslbeck, T. Nipkow. #ITP #IsabelleHOL
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_325.pdf][Automated theorem proving in a chat environment]]. ~ R. Zhumagambetov,
  M. Sterling. #ITP #Coq
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_4.pdf][Automating the diagram method to prove correctness of program
  transformations]]. ~ D. Sabel. #Haskell #FunctionalProgramming
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_13.pdf][A simple functional presentation and an inductive correctness proof of
  the Horn algorithm]]. ~ A. Ravara. #Logic #SAT
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_322.pdf][Implementing a proof assistant using focusing and logic programming]]. ~
  T. Libal. #ITP #LogicProgramming #Prolog
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_287.pdf][Shaving with Occam's razor: deriving minimalist theorem provers for minimal
  logic]]. ~ P. Tarau. #Logic #ATP #Prolog #LogicProgramming
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_755.pdf][Rating of geometric automated theorem provers]]. ~ N. Baeta,
  P. Quaresma. #ATP #Geometry
+ [[https://qfpl.io/posts/intro-to-state-machine-testing-3/][Introduction to state machine testing: part 3]]. ~ Andrew McMiddlin. 
  #Haskell #FunctionalProgramming
+ [[https://lens-by-example.chrispenner.ca/articles/traversals/writing-traversals][Lens by example: Writing traversals]]. ~ Chris Penner. #Haskell
  #FunctionalProgramming
+ [[https://docs.perl6.org/language/haskell-to-p6][Haskell to Perl 6: nutshell (Learning Perl 6 from Haskell, in a
  nutshell)]]. #Haskell #Perl
+ [[http://cl-informatik.uibk.ac.at/users/griff/publications/Lochmann-Sternagel-CPP19.pdf][Certified ACKBO]]. ~ A. Lochmann, C. Sternagel. #ITP #IsabelleHOL 
+ [[http://t-news.cn/Floc2018/FLoC2018-pages/proceedings_paper_761.pdf][Towards intuitive reasoning in axiomatic geometry]]. ~ M. Doré,
  K. Broda. #ITP #ELFE #Haskell #Math
+ [[https://www.onikudaki.net/blog/archives/196][Binding to a C++ CORBA interface in Haskell]]. ~ Michael Oswald. #Haskell #Cpp
+ [[http://matryoshka.gforge.inria.fr/pubs/metathy_paper.pdf][Formalizing the metatheory of logical calculi and automatic provers in
  Isabelle/HOL]]. ~ J.C. Blanchette. #ITP #IsabelleHOL #Logic #ATP
+ [[https://bitbucket.org/isafol/isafol/wiki/Home][IsaFoL: Isabelle Formalization of Logic]]. #ITP #IsabelleHOL #Logic
+ [[https://www21.in.tum.de/~haslbema/documents/provingcontests_draft18.pdf][Competitive proving for fun]]. ~ M.P.L. Haslbeck, S. Wimmer. #ITP #IsabelleHOL
+ [[https://github.com/ProofSystem/Encyclopedia/blob/master/main.pdf][Towards an encyclopaedia of proof systems]]. #Logic
+ [[http://ps.uni-saarland.de/Publications/documents/Schneider_2018_PhDThesis.pdf][A verified compiler for a linear imperative/functional intermediate
  language]]. ~ S. Schneider. #PhD_Thesis #ITP #Coq
+ [[https://dspace.library.uu.nl/bitstream/handle/1874/369181/Thesis-Tomas-Ehrencron.pdf][Techniques behind SMT solvers]]. ~ T. Ehrencron. #SMT #LiquidHaskell #ATP
+ [[https://interestingengineering.com/15-of-the-most-important-algorithms-that-helped-define-mathematics-computing-and-physics
  ][15 of the most important algorithms that helped define Mathematics,
  Computing, and Physics]]. ~ C. McFadden. #Algorithms #Math #CompSci #Physics
+ [[https://medium.com/syncedreview/2018-in-review-10-ai-failures-c18faadf5983][2018 in review: 10 AI failures]]. #AI
+ [[https://arxiv.org/abs/1812.03624][Formalization of metatheory of the Quipper quantum programming
  language in a linear logic]]. ~ M.Y. Mahmoud, A.P. Felty. #ITP #Coq
+ [[https://github.com/jeremydaw/idt][Intuitionistic dual tableaux in HOL]]. ~ Jeremy E. Dawson. #ITP #HOL #Logic 
+ [[https://blogs.ncl.ac.uk/andreymokhov/united-monoids/][United monoids]]. ~ A. Mokhov. #Haskell #FunctionalProgramming #Math
+ [[https://blog.jle.im/entry/shifting-the-stars.html][Shifting the stars: Advent of code with galilean optimization]]. ~ Justin
  Le. #Haskell #FunctionalProgramming
+ [[https://www.tweag.io/posts/2018-12-12-benchgraph.html][DIY benchmark history with Criterion and Shiny]]. ~ Théophane
  Hufschmitt. #Haskell #FunctionalProgramming
+ [[https://medium.com/@fommil/why-not-both-8adadb71a5ed][Why not both? (Build Haskell projects with either cabal or stack)]]. ~ Sam
  Halliday. #Haskell
+ [[https://nokomprendo.frama.io/tuto_fonctionnel/posts/tuto_fonctionnel_25/2018-08-25-en-README.html][A webcam server in 35 lines of Haskell]]. #Haskell
+ [[http://sagebook.gforge.inria.fr/english.html][Computational mathematics with SageMath]]. ~ Paul Zimmermann et als. #eBook
  #SageMath
+ [[https://link.springer.com/article/10.1007/s10817-018-09504-w][A verified implementation of algebraic numbers in Isabelle/HOL]]. ~
  S.J.C. Joosten, R. Thiemann, A. Yamada. #ITP #IsabelleHOL #Haskell #Math
+ [[http://www.lix.polytechnique.fr/Labo/Dale.Miller/blanco-phd-draft.pdf][Applications of foundational proof certificates in theorem proving]]. ~
  M. Roberto. #PhD_Thesis #FPC #ATP
+ [[https://www.lri.fr/~mpereira/thesis.pdf][Tools and techniques for the verification of modular stateful code]]. ~
  M.J. Pereira. #PhD_Thesis #ITP #Why3
+ [[https://plus.maths.org/content/will-machine-learning-replace-mathematicians][Will machine learning replace mathematicians?]] ~ Chris Budd. #Math #AI
  #ITP
+ [[https://github.com/isovector/thinking-with-types][Thinking with types: Type-level programming in Haskell]]. ~ Sandy
  Maguire. #Haskell #FunctionalProgramming
+ [[https://thescipub.com/pdf/10.3844/jmssp.2018.209.218][Formalizing probability concepts in a type theory]]. ~ F. Kachapova. #ITP #Coq 
  #Math
+ [[https://arxiv.org/abs/1712.07474][Can one design a geometry engine? On the (un)decidability of affine Euclidean
  geometries]]. ~ J.A. Makowsky. #Logic #Math #ATP
+ [[https://arxiv.org/abs/1812.03318][A verified Timsort C implementation in Isabelle/HOL]]. ~ Y. Zhang,
  Y. Zhao, D. Sanan. #ITP #IsabelleHOL #Algorithms
+ [[https://arxiv.org/abs/1812.05878][In praise of sequence (co-)algebra and its implementation in
  Haskell]]. ~ K. Clenaghan. #Haskell #FunctionalProgramming #Math
+ [[https://www.nytimes.com/2018/12/17/science/donald-knuth-computers-algorithms-programming.html][The Yoda of Silicon Valley]]. ~ S. Roberts. #CompSci
+ [[https://serokell.io/blog/2018/12/17/why-dependent-haskell][Why dependent Haskell is the future of software development]]. ~ V. Zavialov. 
  #Haskell #FunctionalProgramming
+ [[https://hal.archives-ouvertes.fr/hal-01830255v2/document][A Coq mechanised formal semantics for realistic SQL queries (Formally
  reconciling SQL and bag relational algebra)]]. ~ V. Benzaken, É. Contejean. 
  #ITP #Coq
+ [[http://matryoshka.gforge.inria.fr/pubs/overbeek_msc_thesis.pdf][Formalizing the semantics of concurrent revisions]]. ~ R. Overbeek. 
  #Msc_Thesis #ITP #IsabelleHOL
+ [[https://www.isa-afp.org/entries/Order_Lattice_Props.html][Properties of orderings and lattices]]. ~ G. Struth. #ITP #IsabelleHOL #Math
+ [[https://www.isa-afp.org/entries/Constructive_Cryptography.html][Constructive cryptography in HOL]]. ~ A. Lochbihler, S.R. Sefidgar. #ITP
  #IsabelleHOL
+ [[https://serokell.io/blog/2018/11/14/logical-background][Constructive and non-constructive proofs in Agda (Part 1): Logical
  background]]. ~ Danya Rogozin #ITP #Agda #Logic
+ [[https://serokell.io/blog/2018/11/26/agda-in-nutshell][Constructive and non-constructive proofs in Agda (Part 2): Agda in a
  nutshell]]. ~ Danya Rogozin. #ITP #Agda #Logic
+ [[https://serokell.io/blog/2018/11/30/playing-with-negation][Constructive and non-constructive proofs in Agda (Part 3): Playing
  with negation]]. ~ Danya Rogozin #ITP #Agda #Logic
+ [[https://doisinkidney.com/posts/2018-12-14-primes-in-agda.html][Prime sieves in Agda]]. ~ Donnacha Oisín Kidney. #ITP #Agda
+ [[https://serokell.io/blog/2018/11/05/signal-processing][Signal processing in Haskell]]. ~ Rinat Stryungis. #Haskell
  #FunctionalProgramming
+ [[https://doisinkidney.com/posts/2018-12-18-traversing-graphs.html][Pure & lazy breadth-first traversals of graphs in Haskell]]. ~ Donnacha
  Oisín Kidney. #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2018/10/22/purescript-ii-typeclasses-and-monads][Purescript II: Typeclasses and Monads]]. ~ James Bowen.
  #Purescript #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2018/10/29/purescript-iii-web-pages-with-react][Purescript III: Making a Web Page with Purescript and React!]] ~ James
  Bowen.  #Purescript #Haskell #FunctionalProgramming
+ [[https://mmhaskell.com/blog/2018/11/5/purescript-iv-building-a-bridge][Purescript IV: Routing and navigation!]] ~ James Bowen. 
  #Purescript #Haskell #FunctionalProgramming
+ [[https://link.springer.com/article/10.1007/s10817-012-9260-7][Proof pearl: A mechanized proof of GHC’s mergesort]]. ~
  C. Sternagel. #ITP #IsabelleHOL #Haskell #Algorithms
+ [[https://cvlad.info/clasical-logic-in-haskell][Classical logic in Haskell]]. ~ Vladimir Ciobanu. #Haskell
  #FunctionalProgramming #Logic
+ [[http://www.cs.umd.edu/~rrand/thesis.pdf][Formally verified quantum programming]]. ~ R. Rand. #PhD_Thesis #ITP #Coq
+ [[https://doisinkidney.com/posts/2018-12-21-balancing-scans.html][Balancing scans]]. ~ Donnacha Oisín Kidney. #Haskell #Agda
+ [[https://bartoszmilewski.com/2018/12/20/open-season-on-hylomorphisms][Open season on hylomorphisms]]. ~ B. Milewski. #Haskell 
  #FunctionalProgramming
+ [[https://github.com/probcomp/metaprob][Metaprob: A language for probabilistic programming and metaprogramming,
  embedded in Clojure]]. #Clojure #FunctionalProgramming
+ [[https://hackernoon.com/clojure-functional-programming-38cc6a9298f5][Clojure & functional programming]]. ~ @leandrotk_ #Clojure
  #FunctionalProgramming
+ [[https://www.gaussianos.com/el-yin-yang-y-el-numero-aureo][El yin-yang y el número áureo]]. ~ M.A. Morales. #Matemáticas
+ [[https://brianmckenna.org/blog/higher_kinded_parametricity][Higher kinded parametricity]]. ~ Brian McKenna. #Haskell
  #FunctionalProgramming
+ [[https://www21.in.tum.de/~eberlm/linrec.pdf][Verified solving and asymptotics of linear recurrences]]. ~
  M. Eberl. #ITP #IsabelleHOL #Math #Algorithmic
+ [[https://hal.inria.fr/hal-01962912/document][Verifying a security hypervisor model by infinite symbolic execution and
  invariant strengthening]]. ~ V. Rusu, G. Grimaud, M. Hauspie. #ITP #Coq
+ [[http://images.math.cnrs.fr/Decomposer-et-iterer-pour-resoudre-un-probleme.html][Décomposer et itérer pour résoudre un problème]]. ~ G. Legendre,
  J. Salomon. #Algorithms #Math
+ [[https://ocharles.org.uk/blog/posts/2018-12-25-fast-downward.html][Solving planning problems with Fast Downward and Haskell]]. ~ @acid2
  #Haskell #FunctionalProgramming
+ [[https://alhassy.github.io/PathCat][Graphs are to categories as lists are to monoids]]. ~ Musa
  Al-hassy. #CategoryTheory #Agda #Haskell
+ [[https://github.com/alhassy/CatsCheatSheet][A listing of common theorems in elementary category theory]]. ~ Musa
  Al-hassy. #CategoryTheory #Agda
+ [[https://github.com/alhassy/CoqCheatSheet][Reference sheet for the Coq language]]. ~ Musa Al-hassy. #ITP #Coq
+ [[https://alhassy.github.io/literate/][Literate Agda with Org-mode]]. ~ Musa Al-hassy. #ITP #Agda #Emacs #OrgMode
+ [[http://cl-informatik.uibk.ac.at/users/thiemann/paper/LPAR18_LLL.pdf][A verified efficient implementation of the LLL basis reduction algorithm]]. 
  ~ R. Bottesch, M.W. Haslbeck, R. Thiemann. #ITP #IsabelleHOL
+ [[http://www.philipzucker.com/compiling-to-categories-3-a-bit-cuter][Compiling to categories 3: A bit cuter]]. ~ Philip Zucker. 
  #Haskell #FunctionalProgramming
+ [[http://bit.ly/2RjX3x1][Essential logic for computer science]]. ~ R. Page, R. Gamboa. #Logic
  #ITP #ACL2
+ [[https://dodisturb.me/posts/2018-12-25-The-Essence-of-Datalog.html][The essence of Datalog]]. #Haskell #FunctionalProgramming #LogicProgramming
+ [[https://www.researchgate.net/profile/Jerzy_Karczmarczuk/publication/2437746_Functional_Programming_and_Mathematical_Objects/links/549467c80cf29b94481ea108.pdf][Functional programming and mathematical objects]]. ~
  J. Karczmarczuk. #Haskell #FunctionalProgramming #Math
+ [[https://nextjournal.com/zampino/latte-cantor][Proving Cantor's theorem in Clojure using LaTTe]]. ~ Andrea
  Amantini. #ITP #LaTTe #Clojure
+ [[http://math.ucr.edu/home/baez/books.html][How to learn Math and Physics]]. ~ John Carlos Baez.
  #Math #Physics
+ [[http://www3.risc.jku.at/publications/download/risc_5814/Paper.pdf][Gröbner bases and Macaulay matrices in Isabelle/HOL]]. ~ A. Maletzky. 
  #ITP #IsabelleHOL #Math
+ [[http://www3.risc.jku.at/publications/download/risc_5815/Paper.pdf][A generic and executable formalization of signature-based Gröbner
  basis algorithms]]. A. Maletzky. #ITP #IsabelleHOL #Math
+ [[http://algorithms.wtf][Algorithms]]. ~ Jeff Erickson. #eBook #Algorithms
+ [[http://mfleck.cs.illinois.edu/building-blocks][Building blocks for theoretical computer science]]. ~ M.M. Fleck. #eBook
  #CompSci
+ [[http://opendatastructures.org][Open data structures (An open content textbook)]]. P. Morin. #eBook
  #Algorithms #CompSci
+ [[https://arxiv.org/abs/1812.11108][Towards a constructive formalization of Perfect Graph Theorems]]. ~
  A.K. Singh, R. Natarajan. #ITP #Coq
+ [[https://github.com/friguzzi/aleph][Port of Aleph (an Inductive Logic Programming system) to SWI-Prolog]]. ~
  Fabrizio Riguzzi. #ILP #Prolog
+ [[https://www.johndcook.com/blog/2018/12/30/groups-2019/][Groups of order 2019]]. ~ John D. Cook. #Math #Python
+ [[http://hojaynumeros.blogspot.com/2018/12/resumen-de-calculos-sobre-el-ano-2019.html][Resumen de cálculos sobre el año 2019]]. ~ Antonio Roldán. #Matemáticas
+ [[http://yoda.guillaume.pagesperso-orange.fr/N1000/N2019.htm][Nombre 2019, deux-mille-dix-neuf]]. ~ Gérard Villemin. #Maths
+ [[https://xenaproject.wordpress.com/2018/12/30/learning-lean-by-example][Learning Lean by example]]. ~ Kevin Buzzard. #ITP #LeanTheoremProver #Math

